
Project1_withFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000777c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  0800791c  0800791c  0001791c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c48  08007c48  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007c48  08007c48  00017c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c50  08007c50  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c50  08007c50  00017c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c54  08007c54  00017c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a1c  20000074  08007ccc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a90  08007ccc  00024a90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b385  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003836  00000000  00000000  0003b429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0003ec60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  00040010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001910a  00000000  00000000  00041238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f44  00000000  00000000  0005a342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a91b  00000000  00000000  0006f286  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00109ba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af8  00000000  00000000  00109bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007904 	.word	0x08007904

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007904 	.word	0x08007904

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96e 	b.w	8000d60 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468c      	mov	ip, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f040 8083 	bne.w	8000bb2 <__udivmoddi4+0x116>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d947      	bls.n	8000b42 <__udivmoddi4+0xa6>
 8000ab2:	fab2 f282 	clz	r2, r2
 8000ab6:	b142      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	f1c2 0020 	rsb	r0, r2, #32
 8000abc:	fa24 f000 	lsr.w	r0, r4, r0
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	4097      	lsls	r7, r2
 8000ac4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ad4:	fa1f fe87 	uxth.w	lr, r7
 8000ad8:	fb08 c116 	mls	r1, r8, r6, ip
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aee:	f080 8119 	bcs.w	8000d24 <__udivmoddi4+0x288>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8116 	bls.w	8000d24 <__udivmoddi4+0x288>
 8000af8:	3e02      	subs	r6, #2
 8000afa:	443b      	add	r3, r7
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b04:	fb08 3310 	mls	r3, r8, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	193c      	adds	r4, r7, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8105 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	f240 8102 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000b24:	3802      	subs	r0, #2
 8000b26:	443c      	add	r4, r7
 8000b28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b2c:	eba4 040e 	sub.w	r4, r4, lr
 8000b30:	2600      	movs	r6, #0
 8000b32:	b11d      	cbz	r5, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c5 4300 	strd	r4, r3, [r5]
 8000b3c:	4631      	mov	r1, r6
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	b902      	cbnz	r2, 8000b46 <__udivmoddi4+0xaa>
 8000b44:	deff      	udf	#255	; 0xff
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	d150      	bne.n	8000bf0 <__udivmoddi4+0x154>
 8000b4e:	1bcb      	subs	r3, r1, r7
 8000b50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	2601      	movs	r6, #1
 8000b5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b5e:	0c21      	lsrs	r1, r4, #16
 8000b60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b68:	fb08 f30c 	mul.w	r3, r8, ip
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000b70:	1879      	adds	r1, r7, r1
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0xe2>
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	f200 80e9 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1ac9      	subs	r1, r1, r3
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x10c>
 8000b98:	193c      	adds	r4, r7, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x10a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80d9 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e7bf      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0x12e>
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	f000 80b1 	beq.w	8000d1e <__udivmoddi4+0x282>
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	4631      	mov	r1, r6
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	fab3 f683 	clz	r6, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d14a      	bne.n	8000c68 <__udivmoddi4+0x1cc>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0x140>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 80b8 	bhi.w	8000d4c <__udivmoddi4+0x2b0>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb61 0103 	sbc.w	r1, r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	468c      	mov	ip, r1
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0a8      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000bea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bee:	e7a5      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000bf0:	f1c2 0320 	rsb	r3, r2, #32
 8000bf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000bf8:	4097      	lsls	r7, r2
 8000bfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000bfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c02:	40d9      	lsrs	r1, r3
 8000c04:	4330      	orrs	r0, r6
 8000c06:	0c03      	lsrs	r3, r0, #16
 8000c08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c0c:	fa1f f887 	uxth.w	r8, r7
 8000c10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c18:	fb06 f108 	mul.w	r1, r6, r8
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x19c>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c2a:	f080 808d 	bcs.w	8000d48 <__udivmoddi4+0x2ac>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 808a 	bls.w	8000d48 <__udivmoddi4+0x2ac>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b281      	uxth	r1, r0
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c48:	fb00 f308 	mul.w	r3, r0, r8
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x1c4>
 8000c50:	1879      	adds	r1, r7, r1
 8000c52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c56:	d273      	bcs.n	8000d40 <__udivmoddi4+0x2a4>
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d971      	bls.n	8000d40 <__udivmoddi4+0x2a4>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	4439      	add	r1, r7
 8000c60:	1acb      	subs	r3, r1, r3
 8000c62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c66:	e778      	b.n	8000b5a <__udivmoddi4+0xbe>
 8000c68:	f1c6 0c20 	rsb	ip, r6, #32
 8000c6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c74:	431c      	orrs	r4, r3
 8000c76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c86:	431f      	orrs	r7, r3
 8000c88:	0c3b      	lsrs	r3, r7, #16
 8000c8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c8e:	fa1f f884 	uxth.w	r8, r4
 8000c92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c9e:	458a      	cmp	sl, r1
 8000ca0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ca4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ca8:	d908      	bls.n	8000cbc <__udivmoddi4+0x220>
 8000caa:	1861      	adds	r1, r4, r1
 8000cac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cb0:	d248      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000cb2:	458a      	cmp	sl, r1
 8000cb4:	d946      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000cb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cba:	4421      	add	r1, r4
 8000cbc:	eba1 010a 	sub.w	r1, r1, sl
 8000cc0:	b2bf      	uxth	r7, r7
 8000cc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cce:	fb00 f808 	mul.w	r8, r0, r8
 8000cd2:	45b8      	cmp	r8, r7
 8000cd4:	d907      	bls.n	8000ce6 <__udivmoddi4+0x24a>
 8000cd6:	19e7      	adds	r7, r4, r7
 8000cd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cdc:	d22e      	bcs.n	8000d3c <__udivmoddi4+0x2a0>
 8000cde:	45b8      	cmp	r8, r7
 8000ce0:	d92c      	bls.n	8000d3c <__udivmoddi4+0x2a0>
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	4427      	add	r7, r4
 8000ce6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cea:	eba7 0708 	sub.w	r7, r7, r8
 8000cee:	fba0 8902 	umull	r8, r9, r0, r2
 8000cf2:	454f      	cmp	r7, r9
 8000cf4:	46c6      	mov	lr, r8
 8000cf6:	4649      	mov	r1, r9
 8000cf8:	d31a      	bcc.n	8000d30 <__udivmoddi4+0x294>
 8000cfa:	d017      	beq.n	8000d2c <__udivmoddi4+0x290>
 8000cfc:	b15d      	cbz	r5, 8000d16 <__udivmoddi4+0x27a>
 8000cfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000d02:	eb67 0701 	sbc.w	r7, r7, r1
 8000d06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d0a:	40f2      	lsrs	r2, r6
 8000d0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d10:	40f7      	lsrs	r7, r6
 8000d12:	e9c5 2700 	strd	r2, r7, [r5]
 8000d16:	2600      	movs	r6, #0
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e70b      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0x60>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6fd      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d2c:	4543      	cmp	r3, r8
 8000d2e:	d2e5      	bcs.n	8000cfc <__udivmoddi4+0x260>
 8000d30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d34:	eb69 0104 	sbc.w	r1, r9, r4
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7df      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e7d2      	b.n	8000ce6 <__udivmoddi4+0x24a>
 8000d40:	4660      	mov	r0, ip
 8000d42:	e78d      	b.n	8000c60 <__udivmoddi4+0x1c4>
 8000d44:	4681      	mov	r9, r0
 8000d46:	e7b9      	b.n	8000cbc <__udivmoddi4+0x220>
 8000d48:	4666      	mov	r6, ip
 8000d4a:	e775      	b.n	8000c38 <__udivmoddi4+0x19c>
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e74a      	b.n	8000be6 <__udivmoddi4+0x14a>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	4439      	add	r1, r7
 8000d56:	e713      	b.n	8000b80 <__udivmoddi4+0xe4>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	443c      	add	r4, r7
 8000d5c:	e724      	b.n	8000ba8 <__udivmoddi4+0x10c>
 8000d5e:	bf00      	nop

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <adcSetChannelSequence>:
    adc->SMPR[1] |= samplingTime << (3 * channel);
  else
    adc->SMPR[0] |= samplingTime << (3 * (channel - 10));
}

void  adcSetChannelSequence(Adc *adc, int channels[], int  length){
 8000d64:	b480      	push	{r7}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  adc->SQR[0] |= length << 20;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	051b      	lsls	r3, r3, #20
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  for(int i = 0; i < length; i++){
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	e040      	b.n	8000e06 <adcSetChannelSequence+0xa2>
    if(i < 6)
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	2b05      	cmp	r3, #5
 8000d88:	dc11      	bgt.n	8000dae <adcSetChannelSequence+0x4a>
      adc->SQR[2] |= channels[i] << (i * 5);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	4413      	add	r3, r2
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	fa00 f303 	lsl.w	r3, r0, r3
 8000da4:	ea41 0203 	orr.w	r2, r1, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	635a      	str	r2, [r3, #52]	; 0x34
 8000dac:	e028      	b.n	8000e00 <adcSetChannelSequence+0x9c>
    else if(i < 13)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	2b0c      	cmp	r3, #12
 8000db2:	dc12      	bgt.n	8000dda <adcSetChannelSequence+0x76>
      adc->SQR[1] |= channels[i] << ((i - 6) * 5);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	1f9a      	subs	r2, r3, #6
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	fa00 f303 	lsl.w	r3, r0, r3
 8000dd0:	ea41 0203 	orr.w	r2, r1, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8000dd8:	e012      	b.n	8000e00 <adcSetChannelSequence+0x9c>
    else
      adc->SQR[0] |= channels[i] << ((i - 13) * 5);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	4413      	add	r3, r2
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f1a3 020d 	sub.w	r2, r3, #13
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	fa00 f303 	lsl.w	r3, r0, r3
 8000df8:	ea41 0203 	orr.w	r2, r1, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  for(int i = 0; i < length; i++){
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dbba      	blt.n	8000d84 <adcSetChannelSequence+0x20>
  }
}
 8000e0e:	bf00      	nop
 8000e10:	bf00      	nop
 8000e12:	371c      	adds	r7, #28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <adcConfiguration>:

void  adcConfiguration(Adc  *adc, adcConfig config){
 8000e1c:	b490      	push	{r4, r7}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	e9c7 2300 	strd	r2, r3, [r7]
  adc->CR[0] &= ~(0xFFFFFFFF);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
  adc->CR[0] |= (config & 0xFFFFFFFF);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	461a      	mov	r2, r3
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	605a      	str	r2, [r3, #4]

  adc->CR[1] &= ~(0xFFFFFFFF);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  adc->CR[1] |= (config >> 32);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	461c      	mov	r4, r3
 8000e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	000a      	movs	r2, r1
 8000e60:	2300      	movs	r3, #0
 8000e62:	4613      	mov	r3, r2
 8000e64:	4323      	orrs	r3, r4
 8000e66:	461a      	mov	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	609a      	str	r2, [r3, #8]
}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc90      	pop	{r4, r7}
 8000e74:	4770      	bx	lr

08000e76 <gpioWritePin>:
 *      Author: Yip Sai Wei
 */

#include	"Gpio.h"

void	gpioWritePin(Gpio  *gpio, int  pin, int  state){
 8000e76:	b480      	push	{r7}
 8000e78:	b085      	sub	sp, #20
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
	if(state)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d005      	beq.n	8000e94 <gpioWritePin+0x1e>
		gpio->BSRR = state << pin;
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	409a      	lsls	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	619a      	str	r2, [r3, #24]
	else
		gpio->BSRR = 1 << (16 + pin);
}
 8000e92:	e005      	b.n	8000ea0 <gpioWritePin+0x2a>
		gpio->BSRR = 1 << (16 + pin);
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	3310      	adds	r3, #16
 8000e98:	2201      	movs	r2, #1
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	619a      	str	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <gpioConfigurePin>:

int	gpioReadPin(Gpio  *gpio, int  pin){
	return	(gpio->IDR >> pin) & 1;
}

void  gpioConfigurePin(Gpio *gpio, int  pin, GpioConfig config){
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  gpio->MODER &= GPIO_MODE_MASK(pin);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2103      	movs	r1, #3
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	401a      	ands	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	601a      	str	r2, [r3, #0]
  gpio->MODER |= (config & 0xF)  << (2 * pin);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 020f 	and.w	r2, r3, #15
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	430b      	orrs	r3, r1
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	601a      	str	r2, [r3, #0]

  gpio->OTYPER &= GPIO_TYPE_MASK(pin);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	2101      	movs	r1, #1
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	401a      	ands	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	605a      	str	r2, [r3, #4]
  gpio->OTYPER |= ((config & 0xFF) >> 0x4) << pin;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	4619      	mov	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	f003 020f 	and.w	r2, r3, #15
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	430b      	orrs	r3, r1
 8000f14:	461a      	mov	r2, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	605a      	str	r2, [r3, #4]

  gpio->OSPEEDR &= GPIO_SPEED_MASK(pin);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2103      	movs	r1, #3
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	609a      	str	r2, [r3, #8]
  gpio->OSPEEDR |= ((config & 0xFFF) >> 0x8) << (2 * pin);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	4619      	mov	r1, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 020f 	and.w	r2, r3, #15
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	430b      	orrs	r3, r1
 8000f48:	461a      	mov	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	609a      	str	r2, [r3, #8]

  gpio->PUPDR &= GPIO_PULL_MASK(pin);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2103      	movs	r1, #3
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	401a      	ands	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	60da      	str	r2, [r3, #12]
  gpio->PUPDR |= ((config & 0xFFFF) >> 0xC) << (2 * pin);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	0b1b      	lsrs	r3, r3, #12
 8000f6e:	f003 020f 	and.w	r2, r3, #15
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	60da      	str	r2, [r3, #12]

  if(pin > 7){
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	2b07      	cmp	r3, #7
 8000f86:	dd1c      	ble.n	8000fc2 <gpioConfigurePin+0x116>
    gpio->AFR[1] &= GPIO_AFR_MASK(pin - 8);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	3b08      	subs	r3, #8
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	210f      	movs	r1, #15
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	625a      	str	r2, [r3, #36]	; 0x24
    gpio->AFR[1] |= ((config & 0xFFFFF) >> 0x10) << (4 * (pin - 8));
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	0c1b      	lsrs	r3, r3, #16
 8000faa:	f003 020f 	and.w	r2, r3, #15
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	3b08      	subs	r3, #8
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	430b      	orrs	r3, r1
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
  }else{
    gpio->AFR[0] &= GPIO_AFR_MASK(pin);
    gpio->AFR[0] |= ((config & 0xFFFFF) >> 0x10) << (4 * pin);
  }
}
 8000fc0:	e019      	b.n	8000ff6 <gpioConfigurePin+0x14a>
    gpio->AFR[0] &= GPIO_AFR_MASK(pin);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6a1a      	ldr	r2, [r3, #32]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	210f      	movs	r1, #15
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	621a      	str	r2, [r3, #32]
    gpio->AFR[0] |= ((config & 0xFFFFF) >> 0x10) << (4 * pin);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	0c1b      	lsrs	r3, r3, #16
 8000fe2:	f003 020f 	and.w	r2, r3, #15
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	430b      	orrs	r3, r1
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	621a      	str	r2, [r3, #32]
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <rccResetUnresetDevice>:
 *      Author: Yip Sai Wei
 */
#include	"Rcc.h"


void	rccResetUnresetDevice(_IO_ uint32_t *io, int bitNum){
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	6039      	str	r1, [r7, #0]
  *io |= RCC_RESET_DEVICE(bitNum);			//Reset
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2101      	movs	r1, #1
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	fa01 f202 	lsl.w	r2, r1, r2
 8001018:	431a      	orrs	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	601a      	str	r2, [r3, #0]
  *io &= RCC_SET_DEVICE(bitNum);			//Unreset
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2101      	movs	r1, #1
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	fa01 f202 	lsl.w	r2, r1, r2
 800102a:	43d2      	mvns	r2, r2
 800102c:	401a      	ands	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	601a      	str	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <rccUnresetAndEnableGpio>:


void	rccUnresetAndEnableGpio(RccGpio	rccGpio){
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  rccResetUnresetDevice(ahb1ResetReg, rccGpio);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	4619      	mov	r1, r3
 800104e:	4808      	ldr	r0, [pc, #32]	; (8001070 <rccUnresetAndEnableGpio+0x30>)
 8001050:	f7ff ffd7 	bl	8001002 <rccResetUnresetDevice>
  rcc->AHB1ENR |= (1 << rccGpio);
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <rccUnresetAndEnableGpio+0x34>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	79fa      	ldrb	r2, [r7, #7]
 800105a:	2101      	movs	r1, #1
 800105c:	fa01 f202 	lsl.w	r2, r1, r2
 8001060:	4611      	mov	r1, r2
 8001062:	4a04      	ldr	r2, [pc, #16]	; (8001074 <rccUnresetAndEnableGpio+0x34>)
 8001064:	430b      	orrs	r3, r1
 8001066:	6313      	str	r3, [r2, #48]	; 0x30
  /*
	rcc->AHB1RSTR = RCC_RESET_DEVICE(rccGpio);		//Reset
	rcc->AHB1RSTR = RCC_SET_DEVICE(rcc);		//Unreset
	rcc->AHB1ENR = ;		//Enable clock gating
   */
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023810 	.word	0x40023810
 8001074:	40023800 	.word	0x40023800

08001078 <rccUnresetAndEnableUsart>:

void	rccUnresetAndEnableUsart(RccUsart	rccUsart){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  if(rccUsart == 17){
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b11      	cmp	r3, #17
 8001086:	d10f      	bne.n	80010a8 <rccUnresetAndEnableUsart+0x30>
    rccResetUnresetDevice(apb1ResetReg, rccUsart);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4619      	mov	r1, r3
 800108c:	4810      	ldr	r0, [pc, #64]	; (80010d0 <rccUnresetAndEnableUsart+0x58>)
 800108e:	f7ff ffb8 	bl	8001002 <rccResetUnresetDevice>
    rcc->APB1ENR |= (1 << rccUsart);
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <rccUnresetAndEnableUsart+0x5c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	79fa      	ldrb	r2, [r7, #7]
 8001098:	2101      	movs	r1, #1
 800109a:	fa01 f202 	lsl.w	r2, r1, r2
 800109e:	4611      	mov	r1, r2
 80010a0:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <rccUnresetAndEnableUsart+0x5c>)
 80010a2:	430b      	orrs	r3, r1
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
  }
  else{
    rccResetUnresetDevice(apb2ResetReg, rccUsart);
    rcc->APB2ENR |= (1 << rccUsart);
  }
}
 80010a6:	e00e      	b.n	80010c6 <rccUnresetAndEnableUsart+0x4e>
    rccResetUnresetDevice(apb2ResetReg, rccUsart);
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4619      	mov	r1, r3
 80010ac:	480a      	ldr	r0, [pc, #40]	; (80010d8 <rccUnresetAndEnableUsart+0x60>)
 80010ae:	f7ff ffa8 	bl	8001002 <rccResetUnresetDevice>
    rcc->APB2ENR |= (1 << rccUsart);
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <rccUnresetAndEnableUsart+0x5c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	79fa      	ldrb	r2, [r7, #7]
 80010b8:	2101      	movs	r1, #1
 80010ba:	fa01 f202 	lsl.w	r2, r1, r2
 80010be:	4611      	mov	r1, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <rccUnresetAndEnableUsart+0x5c>)
 80010c2:	430b      	orrs	r3, r1
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023820 	.word	0x40023820
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40023824 	.word	0x40023824

080010dc <rccUnresetAndEnableAdc>:
void  rccUnresetAndEnableI2c(RccI2c rccI2c){
  rccResetUnresetDevice((uint32_t *)(RccBaseAddress + (rccI2c >> 16)), (rccI2c & 0xFF));
  rcc->APB1ENR |= (1 << (rccI2c & 0xFF));
}

void  rccUnresetAndEnableAdc(RccAdc rccAdc){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  rccResetUnresetDevice((uint32_t *)(RccBaseAddress +(rccAdc >> 16)), (rccAdc & 0xFF));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	0c1b      	lsrs	r3, r3, #16
 80010e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010ec:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80010f0:	461a      	mov	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4619      	mov	r1, r3
 80010f8:	4610      	mov	r0, r2
 80010fa:	f7ff ff82 	bl	8001002 <rccResetUnresetDevice>
  rcc->APB2ENR |= (1 << (rccAdc & 0xFF));
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <rccUnresetAndEnableAdc+0x40>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	2101      	movs	r1, #1
 8001108:	fa01 f202 	lsl.w	r2, r1, r2
 800110c:	4611      	mov	r1, r2
 800110e:	4a03      	ldr	r2, [pc, #12]	; (800111c <rccUnresetAndEnableAdc+0x40>)
 8001110:	430b      	orrs	r3, r1
 8001112:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800

08001120 <usartSetBaudRate>:
 */

#include  "Usart.h"


void  usartSetBaudRate(UsartReg *usart, int baudrate){
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t  apbFreq = returnUsartFrequency(usart);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f8f4 	bl	8001318 <returnUsartFrequency>
 8001130:	62b8      	str	r0, [r7, #40]	; 0x28
  int OVER8 = (usart->CR1 >> 15) & 1;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	0bdb      	lsrs	r3, r3, #15
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  double USARTDIV = (double) apbFreq / (baudrate * (8 * (2-OVER8)));
 800113e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001140:	f7ff f9e0 	bl	8000504 <__aeabi_ui2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	f1c3 0302 	rsb	r3, r3, #2
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	fb02 f303 	mul.w	r3, r2, r3
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9e4 	bl	8000524 <__aeabi_i2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	f7ff fb72 	bl	800084c <__aeabi_ddiv>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  int mantissa = USARTDIV;
 8001170:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001174:	f7ff fc52 	bl	8000a1c <__aeabi_d2iz>
 8001178:	4603      	mov	r3, r0
 800117a:	617b      	str	r3, [r7, #20]
  double decimalPoint = USARTDIV - mantissa;
 800117c:	6978      	ldr	r0, [r7, #20]
 800117e:	f7ff f9d1 	bl	8000524 <__aeabi_i2d>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800118a:	f7ff f87d 	bl	8000288 <__aeabi_dsub>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	e9c7 2302 	strd	r2, r3, [r7, #8]
  int fraction;
  if(OVER8)
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00f      	beq.n	80011bc <usartSetBaudRate+0x9c>
    fraction = decimalPoint * 8;
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <usartSetBaudRate+0xd0>)
 80011a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fc33 	bl	8000a1c <__aeabi_d2iz>
 80011b6:	4603      	mov	r3, r0
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ba:	e00e      	b.n	80011da <usartSetBaudRate+0xba>
  else
    fraction = decimalPoint * 16;
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <usartSetBaudRate+0xd4>)
 80011c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011c6:	f7ff fa17 	bl	80005f8 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fc23 	bl	8000a1c <__aeabi_d2iz>
 80011d6:	4603      	mov	r3, r0
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  usart->BRR = (mantissa << 4) | fraction;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	011a      	lsls	r2, r3, #4
 80011de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e0:	4313      	orrs	r3, r2
 80011e2:	461a      	mov	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	609a      	str	r2, [r3, #8]
}
 80011e8:	bf00      	nop
 80011ea:	3730      	adds	r7, #48	; 0x30
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bdb0      	pop	{r4, r5, r7, pc}
 80011f0:	40200000 	.word	0x40200000
 80011f4:	40300000 	.word	0x40300000

080011f8 <usartConfigure>:

void  usartConfigure(UsartReg *usart, UsartConfig config){
 80011f8:	b490      	push	{r4, r7}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	e9c7 2300 	strd	r2, r3, [r7]
 usart->CR1 &= USART_CR_MASK;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0c1b      	lsrs	r3, r3, #16
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	60d3      	str	r3, [r2, #12]
 usart->CR1 |= (config & 0xFFFF);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	431a      	orrs	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	60da      	str	r2, [r3, #12]

 usart->CR2 &= USART_CR_MASK;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	0c1b      	lsrs	r3, r3, #16
 8001224:	041b      	lsls	r3, r3, #16
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	6113      	str	r3, [r2, #16]
 usart->CR2 |= (config & 0xFFFFFFFF) >> 16;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	691c      	ldr	r4, [r3, #16]
 800122e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	0c02      	lsrs	r2, r0, #16
 800123c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001240:	0c0b      	lsrs	r3, r1, #16
 8001242:	4613      	mov	r3, r2
 8001244:	b29b      	uxth	r3, r3
 8001246:	ea44 0203 	orr.w	r2, r4, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	611a      	str	r2, [r3, #16]

 usart->CR3 &= USART_CR_MASK;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	0c1b      	lsrs	r3, r3, #16
 8001254:	041b      	lsls	r3, r3, #16
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	6153      	str	r3, [r2, #20]
 usart->CR3 |= config >> 32;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	695c      	ldr	r4, [r3, #20]
 800125e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	000a      	movs	r2, r1
 800126c:	2300      	movs	r3, #0
 800126e:	4613      	mov	r3, r2
 8001270:	ea44 0203 	orr.w	r2, r4, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	615a      	str	r2, [r3, #20]
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bc90      	pop	{r4, r7}
 8001280:	4770      	bx	lr

08001282 <writeToDataRegister>:

void  writeToDataRegister(UsartReg *usart, uint8_t  data){
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	70fb      	strb	r3, [r7, #3]
 usart->DR &= USART_DR_MASK;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	605a      	str	r2, [r3, #4]
 usart->DR = data;
 800129a:	78fa      	ldrb	r2, [r7, #3]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	605a      	str	r2, [r3, #4]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <isTransmissionComplete>:

int isTransmissionComplete(UsartReg *usart){
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 return (usart->SR & (1 << 6));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <isTDREmpty>:

int isTDREmpty(UsartReg *usart){
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 return (usart->SR & (1 << 7));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <isRDRAvailableForRead>:

int isRDRAvailableForRead(UsartReg *usart){
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return  (usart->SR & (1 <<5));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0320 	and.w	r3, r3, #32
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <returnRDRValue>:

int returnRDRValue(UsartReg *usart){
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return  usart->DR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <returnUsartFrequency>:

uint32_t returnUsartFrequency(UsartReg *usart){
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(usart == usart1 || usart == usart6)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <returnUsartFrequency+0x30>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d003      	beq.n	8001330 <returnUsartFrequency+0x18>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <returnUsartFrequency+0x34>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d103      	bne.n	8001338 <returnUsartFrequency+0x20>
    return  HAL_RCC_GetPCLK2Freq();
 8001330:	f001 fba2 	bl	8002a78 <HAL_RCC_GetPCLK2Freq>
 8001334:	4603      	mov	r3, r0
 8001336:	e002      	b.n	800133e <returnUsartFrequency+0x26>
  else
    return  HAL_RCC_GetPCLK1Freq();
 8001338:	f001 fb8a 	bl	8002a50 <HAL_RCC_GetPCLK1Freq>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40011000 	.word	0x40011000
 800134c:	40011400 	.word	0x40011400

08001350 <usartConfiguration>:

void  usartConfiguration(UsartReg *usart, UsartConfig config, int baudrate){
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	e9c7 2300 	strd	r2, r3, [r7]
  usartSetBaudRate(usart, baudrate);
 800135c:	69b9      	ldr	r1, [r7, #24]
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f7ff fede 	bl	8001120 <usartSetBaudRate>
  usartConfigure(usart,config);
 8001364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f7ff ff45 	bl	80011f8 <usartConfigure>
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <usartTransmit>:

Status  usartTransmit(UsartReg  *usart, char  *msg){
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
  for(int  i = 0; msg[i] != '\0'; i++){
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e018      	b.n	80013b8 <usartTransmit+0x42>
    while(!isTDREmpty(usart));
 8001386:	bf00      	nop
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff9d 	bl	80012c8 <isTDREmpty>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f9      	beq.n	8001388 <usartTransmit+0x12>
    writeToDataRegister(usart, msg[i]);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	4413      	add	r3, r2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ff6f 	bl	8001282 <writeToDataRegister>
    while(!isTransmissionComplete(usart));
 80013a4:	bf00      	nop
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff80 	bl	80012ac <isTransmissionComplete>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f9      	beq.n	80013a6 <usartTransmit+0x30>
  for(int  i = 0; msg[i] != '\0'; i++){
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3301      	adds	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	4413      	add	r3, r2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1e0      	bne.n	8001386 <usartTransmit+0x10>
    }
  return  OK;
 80013c4:	2301      	movs	r3, #1
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <usartTransmitWithLength>:

Status  usartTransmitWithLength(UsartReg  *usart, char  *msg, int len){
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b086      	sub	sp, #24
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
  for(int  i = 0; i < len; i++){
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	e018      	b.n	8001412 <usartTransmitWithLength+0x44>
    while(!isTDREmpty(usart));
 80013e0:	bf00      	nop
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f7ff ff70 	bl	80012c8 <isTDREmpty>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f9      	beq.n	80013e2 <usartTransmitWithLength+0x14>
    writeToDataRegister(usart, msg[i]);
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	4619      	mov	r1, r3
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f7ff ff42 	bl	8001282 <writeToDataRegister>
    while(!isTransmissionComplete(usart));
 80013fe:	bf00      	nop
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7ff ff53 	bl	80012ac <isTransmissionComplete>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f9      	beq.n	8001400 <usartTransmitWithLength+0x32>
  for(int  i = 0; i < len; i++){
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	429a      	cmp	r2, r3
 8001418:	dbe2      	blt.n	80013e0 <usartTransmitWithLength+0x12>
    }
  return  OK;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <readFromUsart>:

Status readFromUsart(UsartReg  *usart, char  *msg){
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  char  *charptr = msg;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  charptr--;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3b01      	subs	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
  do{
    while(!isRDRAvailableForRead(usart));
 8001438:	bf00      	nop
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff52 	bl	80012e4 <isRDRAvailableForRead>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f9      	beq.n	800143a <readFromUsart+0x16>
    charptr++;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3301      	adds	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
    *charptr = (char)returnRDRValue(usart);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff57 	bl	8001300 <returnRDRValue>
 8001452:	4603      	mov	r3, r0
 8001454:	b2da      	uxtb	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	701a      	strb	r2, [r3, #0]
  }while(*charptr != '\n');
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b0a      	cmp	r3, #10
 8001460:	d1ea      	bne.n	8001438 <readFromUsart+0x14>
  return  OK;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001472:	f000 fda9 	bl	8001fc8 <HAL_Init>

  /* USER CODE BEGIN Init */
  rccUnresetAndEnableAdc(RCC_ADC1);
 8001476:	4892      	ldr	r0, [pc, #584]	; (80016c0 <main+0x254>)
 8001478:	f7ff fe30 	bl	80010dc <rccUnresetAndEnableAdc>
  rccUnresetAndEnableGpio(RCC_GPIOA);
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff fddf 	bl	8001040 <rccUnresetAndEnableGpio>
  rccUnresetAndEnableGpio(RCC_GPIOB);
 8001482:	2001      	movs	r0, #1
 8001484:	f7ff fddc 	bl	8001040 <rccUnresetAndEnableGpio>
  rccUnresetAndEnableGpio(RCC_GPIOC);
 8001488:	2002      	movs	r0, #2
 800148a:	f7ff fdd9 	bl	8001040 <rccUnresetAndEnableGpio>

  rccUnresetAndEnableUsart(RCC_USART6);
 800148e:	2005      	movs	r0, #5
 8001490:	f7ff fdf2 	bl	8001078 <rccUnresetAndEnableUsart>
  rccUnresetAndEnableUsart(RCC_USART1);
 8001494:	2004      	movs	r0, #4
 8001496:	f7ff fdef 	bl	8001078 <rccUnresetAndEnableUsart>
  rccUnresetAndEnableUsart(RCC_USART2);
 800149a:	2011      	movs	r0, #17
 800149c:	f7ff fdec 	bl	8001078 <rccUnresetAndEnableUsart>

  gpioConfigurePin(gpioA, 5, GPIO_OUTPUT | GPIO_FAST_SPEED | GPIO_PUSH_PULL);  //LED
 80014a0:	f240 2201 	movw	r2, #513	; 0x201
 80014a4:	2105      	movs	r1, #5
 80014a6:	4887      	ldr	r0, [pc, #540]	; (80016c4 <main+0x258>)
 80014a8:	f7ff fd00 	bl	8000eac <gpioConfigurePin>

  gpioConfigurePin(gpioB, 8, GPIO_OUTPUT | GPIO_FAST_SPEED | GPIO_PUSH_PULL);// EXT. LED
 80014ac:	f240 2201 	movw	r2, #513	; 0x201
 80014b0:	2108      	movs	r1, #8
 80014b2:	4885      	ldr	r0, [pc, #532]	; (80016c8 <main+0x25c>)
 80014b4:	f7ff fcfa 	bl	8000eac <gpioConfigurePin>

  gpioConfigurePin(gpioA, 0, GPIO_ANALOG_IN | GPIO_PUSH_PULL );  //       (PA0)
 80014b8:	2203      	movs	r2, #3
 80014ba:	2100      	movs	r1, #0
 80014bc:	4881      	ldr	r0, [pc, #516]	; (80016c4 <main+0x258>)
 80014be:	f7ff fcf5 	bl	8000eac <gpioConfigurePin>

  gpioConfigurePin(gpioC, 7, GPIO_ALT_FUNC | GPIO_FAST_SPEED | AF_8);  //USART6 (Rx)
 80014c2:	4a82      	ldr	r2, [pc, #520]	; (80016cc <main+0x260>)
 80014c4:	2107      	movs	r1, #7
 80014c6:	4882      	ldr	r0, [pc, #520]	; (80016d0 <main+0x264>)
 80014c8:	f7ff fcf0 	bl	8000eac <gpioConfigurePin>
  gpioConfigurePin(gpioC, 6, GPIO_ALT_FUNC | GPIO_FAST_SPEED | AF_8);  //       (Tx)
 80014cc:	4a7f      	ldr	r2, [pc, #508]	; (80016cc <main+0x260>)
 80014ce:	2106      	movs	r1, #6
 80014d0:	487f      	ldr	r0, [pc, #508]	; (80016d0 <main+0x264>)
 80014d2:	f7ff fceb 	bl	8000eac <gpioConfigurePin>

  gpioConfigurePin(gpioA, 10, GPIO_ALT_FUNC | GPIO_FAST_SPEED | AF_7);  //USART1 (Rx)
 80014d6:	4a7f      	ldr	r2, [pc, #508]	; (80016d4 <main+0x268>)
 80014d8:	210a      	movs	r1, #10
 80014da:	487a      	ldr	r0, [pc, #488]	; (80016c4 <main+0x258>)
 80014dc:	f7ff fce6 	bl	8000eac <gpioConfigurePin>
  gpioConfigurePin(gpioA, 9, GPIO_ALT_FUNC | GPIO_FAST_SPEED | AF_7);   //       (Tx)
 80014e0:	4a7c      	ldr	r2, [pc, #496]	; (80016d4 <main+0x268>)
 80014e2:	2109      	movs	r1, #9
 80014e4:	4877      	ldr	r0, [pc, #476]	; (80016c4 <main+0x258>)
 80014e6:	f7ff fce1 	bl	8000eac <gpioConfigurePin>

  gpioConfigurePin(gpioA, 2, GPIO_ALT_FUNC | GPIO_FAST_SPEED | AF_7);  //USART2 (Rx)
 80014ea:	4a7a      	ldr	r2, [pc, #488]	; (80016d4 <main+0x268>)
 80014ec:	2102      	movs	r1, #2
 80014ee:	4875      	ldr	r0, [pc, #468]	; (80016c4 <main+0x258>)
 80014f0:	f7ff fcdc 	bl	8000eac <gpioConfigurePin>
  gpioConfigurePin(gpioA, 3, GPIO_ALT_FUNC | GPIO_FAST_SPEED | AF_7);  //       (Tx)
 80014f4:	4a77      	ldr	r2, [pc, #476]	; (80016d4 <main+0x268>)
 80014f6:	2103      	movs	r1, #3
 80014f8:	4872      	ldr	r0, [pc, #456]	; (80016c4 <main+0x258>)
 80014fa:	f7ff fcd7 	bl	8000eac <gpioConfigurePin>

  usartConfiguration(usart6, USART_TX_EN | USART_RX_EN | USART_9_BIT | USART_ODD_PARITY | USART_RXNEIE_EN
 80014fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	f243 622c 	movw	r2, #13868	; 0x362c
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	4872      	ldr	r0, [pc, #456]	; (80016d8 <main+0x26c>)
 800150e:	f7ff ff1f 	bl	8001350 <usartConfiguration>
                            | USART_1_STOPBIT
                            | USART_EN,
                            115200);

  usartConfiguration(usart1, USART_TX_EN | USART_RX_EN | USART_9_BIT | USART_ODD_PARITY | USART_RXNEIE_EN
 8001512:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	f243 622c 	movw	r2, #13868	; 0x362c
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	486e      	ldr	r0, [pc, #440]	; (80016dc <main+0x270>)
 8001522:	f7ff ff15 	bl	8001350 <usartConfiguration>
                            | USART_1_STOPBIT
                            | USART_EN,
                            115200);

  usartConfiguration(usart2, USART_TX_EN | USART_RX_EN | USART_9_BIT | USART_ODD_PARITY | USART_RXNEIE_EN
 8001526:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	f243 622c 	movw	r2, #13868	; 0x362c
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	486a      	ldr	r0, [pc, #424]	; (80016e0 <main+0x274>)
 8001536:	f7ff ff0b 	bl	8001350 <usartConfiguration>
                            | USART_1_STOPBIT
                            | USART_EN,
                            115200);

  int channel[] = {0};
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]

  adcConfiguration(adc1, ADC_CONVERTER_ON | REGULAR_CHN_START_CONVERT | EOC_INT_EN
 800153e:	f04f 0220 	mov.w	r2, #32
 8001542:	4b68      	ldr	r3, [pc, #416]	; (80016e4 <main+0x278>)
 8001544:	4868      	ldr	r0, [pc, #416]	; (80016e8 <main+0x27c>)
 8001546:	f7ff fc69 	bl	8000e1c <adcConfiguration>
                        | SET_EOC_BIT_AFTER_REGULAR_CONVERSION_ENDED);

  adcSetChannelSequence(adc1, channel, 1);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2201      	movs	r2, #1
 800154e:	4619      	mov	r1, r3
 8001550:	4865      	ldr	r0, [pc, #404]	; (80016e8 <main+0x27c>)
 8001552:	f7ff fc07 	bl	8000d64 <adcSetChannelSequence>

  messageBufferFromMaster = xMessageBufferCreate(50);
 8001556:	2201      	movs	r2, #1
 8001558:	2100      	movs	r1, #0
 800155a:	2032      	movs	r0, #50	; 0x32
 800155c:	f002 fc46 	bl	8003dec <xStreamBufferGenericCreate>
 8001560:	4603      	mov	r3, r0
 8001562:	4a62      	ldr	r2, [pc, #392]	; (80016ec <main+0x280>)
 8001564:	6013      	str	r3, [r2, #0]
  messageBufferToMaster = xMessageBufferCreate(50);
 8001566:	2201      	movs	r2, #1
 8001568:	2100      	movs	r1, #0
 800156a:	2032      	movs	r0, #50	; 0x32
 800156c:	f002 fc3e 	bl	8003dec <xStreamBufferGenericCreate>
 8001570:	4603      	mov	r3, r0
 8001572:	4a5f      	ldr	r2, [pc, #380]	; (80016f0 <main+0x284>)
 8001574:	6013      	str	r3, [r2, #0]
  messageBufferFromUsart1 = xMessageBufferCreate(50);
 8001576:	2201      	movs	r2, #1
 8001578:	2100      	movs	r1, #0
 800157a:	2032      	movs	r0, #50	; 0x32
 800157c:	f002 fc36 	bl	8003dec <xStreamBufferGenericCreate>
 8001580:	4603      	mov	r3, r0
 8001582:	4a5c      	ldr	r2, [pc, #368]	; (80016f4 <main+0x288>)
 8001584:	6013      	str	r3, [r2, #0]
  messageBufferFromUsart2 = xMessageBufferCreate(50);
 8001586:	2201      	movs	r2, #1
 8001588:	2100      	movs	r1, #0
 800158a:	2032      	movs	r0, #50	; 0x32
 800158c:	f002 fc2e 	bl	8003dec <xStreamBufferGenericCreate>
 8001590:	4603      	mov	r3, r0
 8001592:	4a59      	ldr	r2, [pc, #356]	; (80016f8 <main+0x28c>)
 8001594:	6013      	str	r3, [r2, #0]
  messageBufferFromUsart6 = xMessageBufferCreate(50);
 8001596:	2201      	movs	r2, #1
 8001598:	2100      	movs	r1, #0
 800159a:	2032      	movs	r0, #50	; 0x32
 800159c:	f002 fc26 	bl	8003dec <xStreamBufferGenericCreate>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4a56      	ldr	r2, [pc, #344]	; (80016fc <main+0x290>)
 80015a4:	6013      	str	r3, [r2, #0]
  messageBufferFromAdc = xMessageBufferCreate(50);
 80015a6:	2201      	movs	r2, #1
 80015a8:	2100      	movs	r1, #0
 80015aa:	2032      	movs	r0, #50	; 0x32
 80015ac:	f002 fc1e 	bl	8003dec <xStreamBufferGenericCreate>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4a53      	ldr	r2, [pc, #332]	; (8001700 <main+0x294>)
 80015b4:	6013      	str	r3, [r2, #0]
  RetargetInit(usart2);
 80015b6:	484a      	ldr	r0, [pc, #296]	; (80016e0 <main+0x274>)
 80015b8:	f000 fb30 	bl	8001c1c <RetargetInit>

  if(messageBufferFromMaster == NULL){
 80015bc:	4b4b      	ldr	r3, [pc, #300]	; (80016ec <main+0x280>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <main+0x15e>
    printf("There was not enough heap memory space available to create the message buffer!");
 80015c4:	484f      	ldr	r0, [pc, #316]	; (8001704 <main+0x298>)
 80015c6:	f005 f8e1 	bl	800678c <iprintf>
  }

  if(messageBufferToMaster == NULL){
 80015ca:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <main+0x284>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <main+0x16c>
    printf("There was not enough heap memory space available to create the message buffer!");
 80015d2:	484c      	ldr	r0, [pc, #304]	; (8001704 <main+0x298>)
 80015d4:	f005 f8da 	bl	800678c <iprintf>
  }

  if(messageBufferFromUsart1 == NULL){
 80015d8:	4b46      	ldr	r3, [pc, #280]	; (80016f4 <main+0x288>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <main+0x17a>
    printf("There was not enough heap memory space available to create the message buffer!");
 80015e0:	4848      	ldr	r0, [pc, #288]	; (8001704 <main+0x298>)
 80015e2:	f005 f8d3 	bl	800678c <iprintf>
  }

  if(messageBufferFromUsart2 == NULL){
 80015e6:	4b44      	ldr	r3, [pc, #272]	; (80016f8 <main+0x28c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <main+0x188>
    printf("There was not enough heap memory space available to create the message buffer!");
 80015ee:	4845      	ldr	r0, [pc, #276]	; (8001704 <main+0x298>)
 80015f0:	f005 f8cc 	bl	800678c <iprintf>
  }

  if(messageBufferFromUsart6 == NULL){
 80015f4:	4b41      	ldr	r3, [pc, #260]	; (80016fc <main+0x290>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <main+0x196>
    printf("There was not enough heap memory space available to create the message buffer!");
 80015fc:	4841      	ldr	r0, [pc, #260]	; (8001704 <main+0x298>)
 80015fe:	f005 f8c5 	bl	800678c <iprintf>
  }


  if(messageBufferFromAdc == NULL){
 8001602:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <main+0x294>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <main+0x1a4>
    printf("There was not enough heap memory space available to create the message buffer!");
 800160a:	483e      	ldr	r0, [pc, #248]	; (8001704 <main+0x298>)
 800160c:	f005 f8be 	bl	800678c <iprintf>
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001610:	f000 f88e 	bl	8001730 <SystemClock_Config>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001614:	f001 fd3a 	bl	800308c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of master */
  masterHandle = osThreadNew(masterFunction, NULL, &master_attributes);
 8001618:	4a3b      	ldr	r2, [pc, #236]	; (8001708 <main+0x29c>)
 800161a:	2100      	movs	r1, #0
 800161c:	483b      	ldr	r0, [pc, #236]	; (800170c <main+0x2a0>)
 800161e:	f001 fd7f 	bl	8003120 <osThreadNew>
 8001622:	4603      	mov	r3, r0
 8001624:	4a3a      	ldr	r2, [pc, #232]	; (8001710 <main+0x2a4>)
 8001626:	6013      	str	r3, [r2, #0]

  /* creation of slave */
  slaveHandle = osThreadNew(slaveFunction, NULL, &slave_attributes);
 8001628:	4a3a      	ldr	r2, [pc, #232]	; (8001714 <main+0x2a8>)
 800162a:	2100      	movs	r1, #0
 800162c:	483a      	ldr	r0, [pc, #232]	; (8001718 <main+0x2ac>)
 800162e:	f001 fd77 	bl	8003120 <osThreadNew>
 8001632:	4603      	mov	r3, r0
 8001634:	4a39      	ldr	r2, [pc, #228]	; (800171c <main+0x2b0>)
 8001636:	6013      	str	r3, [r2, #0]

  /* creation of commandInterpre */
  commandInterpreHandle = osThreadNew(commandInterpreterFunction, NULL, &commandInterpre_attributes);
 8001638:	4a39      	ldr	r2, [pc, #228]	; (8001720 <main+0x2b4>)
 800163a:	2100      	movs	r1, #0
 800163c:	4839      	ldr	r0, [pc, #228]	; (8001724 <main+0x2b8>)
 800163e:	f001 fd6f 	bl	8003120 <osThreadNew>
 8001642:	4603      	mov	r3, r0
 8001644:	4a38      	ldr	r2, [pc, #224]	; (8001728 <main+0x2bc>)
 8001646:	6013      	str	r3, [r2, #0]

  nvicEnableIrq(ADC_IRQ);
 8001648:	4b38      	ldr	r3, [pc, #224]	; (800172c <main+0x2c0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a37      	ldr	r2, [pc, #220]	; (800172c <main+0x2c0>)
 800164e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001652:	6013      	str	r3, [r2, #0]

  nvicSetPriority(ADC_IRQ, 6);
 8001654:	4b35      	ldr	r3, [pc, #212]	; (800172c <main+0x2c0>)
 8001656:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800165a:	4a34      	ldr	r2, [pc, #208]	; (800172c <main+0x2c0>)
 800165c:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8001660:	f8c2 3310 	str.w	r3, [r2, #784]	; 0x310

  nvicEnableIrq(USART1_IRQ);
 8001664:	4b31      	ldr	r3, [pc, #196]	; (800172c <main+0x2c0>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	4a30      	ldr	r2, [pc, #192]	; (800172c <main+0x2c0>)
 800166a:	f043 0320 	orr.w	r3, r3, #32
 800166e:	6053      	str	r3, [r2, #4]

  nvicSetPriority(USART1_IRQ, 6);
 8001670:	4b2e      	ldr	r3, [pc, #184]	; (800172c <main+0x2c0>)
 8001672:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8001676:	4a2d      	ldr	r2, [pc, #180]	; (800172c <main+0x2c0>)
 8001678:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800167c:	f8c2 3324 	str.w	r3, [r2, #804]	; 0x324

  nvicEnableIrq(USART2_IRQ);
 8001680:	4b2a      	ldr	r3, [pc, #168]	; (800172c <main+0x2c0>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4a29      	ldr	r2, [pc, #164]	; (800172c <main+0x2c0>)
 8001686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168a:	6053      	str	r3, [r2, #4]

  nvicSetPriority(USART2_IRQ, 6);
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <main+0x2c0>)
 800168e:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8001692:	4a26      	ldr	r2, [pc, #152]	; (800172c <main+0x2c0>)
 8001694:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8001698:	f8c2 3324 	str.w	r3, [r2, #804]	; 0x324

  nvicEnableIrq(USART6_IRQ);
 800169c:	4b23      	ldr	r3, [pc, #140]	; (800172c <main+0x2c0>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a22      	ldr	r2, [pc, #136]	; (800172c <main+0x2c0>)
 80016a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a6:	6093      	str	r3, [r2, #8]
  nvicSetPriority(USART6_IRQ, 6);
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <main+0x2c0>)
 80016aa:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80016ae:	4a1f      	ldr	r2, [pc, #124]	; (800172c <main+0x2c0>)
 80016b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80016b4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80016b8:	f001 fd0c 	bl	80030d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <main+0x250>
 80016be:	bf00      	nop
 80016c0:	00240008 	.word	0x00240008
 80016c4:	40020000 	.word	0x40020000
 80016c8:	40020400 	.word	0x40020400
 80016cc:	00080202 	.word	0x00080202
 80016d0:	40020800 	.word	0x40020800
 80016d4:	00070202 	.word	0x00070202
 80016d8:	40011400 	.word	0x40011400
 80016dc:	40011000 	.word	0x40011000
 80016e0:	40004400 	.word	0x40004400
 80016e4:	40000401 	.word	0x40000401
 80016e8:	40012000 	.word	0x40012000
 80016ec:	200049e4 	.word	0x200049e4
 80016f0:	200049e8 	.word	0x200049e8
 80016f4:	200049d0 	.word	0x200049d0
 80016f8:	200049e0 	.word	0x200049e0
 80016fc:	200049cc 	.word	0x200049cc
 8001700:	200049d8 	.word	0x200049d8
 8001704:	0800793c 	.word	0x0800793c
 8001708:	08007a28 	.word	0x08007a28
 800170c:	08001945 	.word	0x08001945
 8001710:	200049d4 	.word	0x200049d4
 8001714:	08007a4c 	.word	0x08007a4c
 8001718:	080019ed 	.word	0x080019ed
 800171c:	200049ec 	.word	0x200049ec
 8001720:	08007a70 	.word	0x08007a70
 8001724:	08001a9d 	.word	0x08001a9d
 8001728:	200049dc 	.word	0x200049dc
 800172c:	e000e100 	.word	0xe000e100

08001730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b094      	sub	sp, #80	; 0x50
 8001734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	2230      	movs	r2, #48	; 0x30
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f005 f81c 	bl	800677c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <SystemClock_Config+0xb4>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <SystemClock_Config+0xb4>)
 800175e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
 8001764:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <SystemClock_Config+0xb4>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <SystemClock_Config+0xb8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <SystemClock_Config+0xb8>)
 800177a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <SystemClock_Config+0xb8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800178c:	2302      	movs	r3, #2
 800178e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001790:	2301      	movs	r3, #1
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001794:	2310      	movs	r3, #16
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001798:	2300      	movs	r3, #0
 800179a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179c:	f107 0320 	add.w	r3, r7, #32
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fd35 	bl	8002210 <HAL_RCC_OscConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80017ac:	f000 fa30 	bl	8001c10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b0:	230f      	movs	r3, #15
 80017b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 ff98 	bl	8002700 <HAL_RCC_ClockConfig>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80017d6:	f000 fa1b 	bl	8001c10 <Error_Handler>
  }
}
 80017da:	bf00      	nop
 80017dc:	3750      	adds	r7, #80	; 0x50
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40007000 	.word	0x40007000

080017ec <ADC_IRQHandler>:

/* USER CODE BEGIN 4 */

void  ADC_IRQHandler(void){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
  uint16_t adcValue = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	80fb      	strh	r3, [r7, #6]
  adcValue = adc1->DR;
 80017f6:	4b07      	ldr	r3, [pc, #28]	; (8001814 <ADC_IRQHandler+0x28>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	80fb      	strh	r3, [r7, #6]
  xMessageBufferSendFromISR(messageBufferFromAdc, &adcValue, 2, pdFALSE);
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <ADC_IRQHandler+0x2c>)
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	1db9      	adds	r1, r7, #6
 8001804:	2300      	movs	r3, #0
 8001806:	2202      	movs	r2, #2
 8001808:	f002 fc33 	bl	8004072 <xStreamBufferSendFromISR>
  }
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40012000 	.word	0x40012000
 8001818:	200049d8 	.word	0x200049d8

0800181c <USART2_IRQHandler>:

void  USART2_IRQHandler(void){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  static  uint8_t usart2Buffer[20];
  static  int usart2BufferIndex = 0;
  usart2Buffer[usart2BufferIndex] = usart2->DR;
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <USART2_IRQHandler+0x60>)
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <USART2_IRQHandler+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	b2d1      	uxtb	r1, r2
 800182a:	4a16      	ldr	r2, [pc, #88]	; (8001884 <USART2_IRQHandler+0x68>)
 800182c:	54d1      	strb	r1, [r2, r3]
  if(usart2Buffer[usart2BufferIndex] == '\n'){
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <USART2_IRQHandler+0x64>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a14      	ldr	r2, [pc, #80]	; (8001884 <USART2_IRQHandler+0x68>)
 8001834:	5cd3      	ldrb	r3, [r2, r3]
 8001836:	2b0a      	cmp	r3, #10
 8001838:	d118      	bne.n	800186c <USART2_IRQHandler+0x50>
    usart2BufferIndex++;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <USART2_IRQHandler+0x64>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <USART2_IRQHandler+0x64>)
 8001842:	6013      	str	r3, [r2, #0]
    xMessageBufferSendFromISR(messageBufferFromUsart2, &usart2BufferIndex, 1, pdFALSE);
 8001844:	4b10      	ldr	r3, [pc, #64]	; (8001888 <USART2_IRQHandler+0x6c>)
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	2300      	movs	r3, #0
 800184a:	2201      	movs	r2, #1
 800184c:	490c      	ldr	r1, [pc, #48]	; (8001880 <USART2_IRQHandler+0x64>)
 800184e:	f002 fc10 	bl	8004072 <xStreamBufferSendFromISR>
    xMessageBufferSendFromISR(messageBufferFromUsart2, usart2Buffer, usart2BufferIndex, pdFALSE);
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <USART2_IRQHandler+0x6c>)
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <USART2_IRQHandler+0x64>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	2300      	movs	r3, #0
 800185e:	4909      	ldr	r1, [pc, #36]	; (8001884 <USART2_IRQHandler+0x68>)
 8001860:	f002 fc07 	bl	8004072 <xStreamBufferSendFromISR>
    usart2BufferIndex = 0;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <USART2_IRQHandler+0x64>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
  }
  else
    usart2BufferIndex++;
}
 800186a:	e004      	b.n	8001876 <USART2_IRQHandler+0x5a>
    usart2BufferIndex++;
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <USART2_IRQHandler+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	3301      	adds	r3, #1
 8001872:	4a03      	ldr	r2, [pc, #12]	; (8001880 <USART2_IRQHandler+0x64>)
 8001874:	6013      	str	r3, [r2, #0]
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40004400 	.word	0x40004400
 8001880:	20000090 	.word	0x20000090
 8001884:	20000094 	.word	0x20000094
 8001888:	200049e0 	.word	0x200049e0

0800188c <USART1_IRQHandler>:

void  USART1_IRQHandler(void){
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
  uint8_t commandFromMaster;
  commandFromMaster = usart1->DR;
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <USART1_IRQHandler+0x24>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	71fb      	strb	r3, [r7, #7]
  xMessageBufferSendFromISR(messageBufferFromUsart1, &commandFromMaster, 1, pdFALSE);
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <USART1_IRQHandler+0x28>)
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	1df9      	adds	r1, r7, #7
 80018a0:	2300      	movs	r3, #0
 80018a2:	2201      	movs	r2, #1
 80018a4:	f002 fbe5 	bl	8004072 <xStreamBufferSendFromISR>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40011000 	.word	0x40011000
 80018b4:	200049d0 	.word	0x200049d0

080018b8 <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  static  uint8_t usart6Buffer[4];
  static  int usart6BufferIndex = 0;
  uint8_t *ptr;
  if(usart6->DR != '\0' || usart6BufferIndex != 0){
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <USART6_IRQHandler+0x78>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d103      	bne.n	80018ce <USART6_IRQHandler+0x16>
 80018c6:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <USART6_IRQHandler+0x7c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d02b      	beq.n	8001926 <USART6_IRQHandler+0x6e>
  usart6Buffer[usart6BufferIndex] = usart6->DR;
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <USART6_IRQHandler+0x78>)
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <USART6_IRQHandler+0x7c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	b2d1      	uxtb	r1, r2
 80018d8:	4a17      	ldr	r2, [pc, #92]	; (8001938 <USART6_IRQHandler+0x80>)
 80018da:	54d1      	strb	r1, [r2, r3]
  if(usart6Buffer[usart6BufferIndex] == '\0'){
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <USART6_IRQHandler+0x7c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a15      	ldr	r2, [pc, #84]	; (8001938 <USART6_IRQHandler+0x80>)
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d119      	bne.n	800191c <USART6_IRQHandler+0x64>
    xMessageBufferSendFromISR(messageBufferFromUsart6, usart6Buffer, 2, pdFALSE);
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <USART6_IRQHandler+0x84>)
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	2300      	movs	r3, #0
 80018ee:	2202      	movs	r2, #2
 80018f0:	4911      	ldr	r1, [pc, #68]	; (8001938 <USART6_IRQHandler+0x80>)
 80018f2:	f002 fbbe 	bl	8004072 <xStreamBufferSendFromISR>
    if(usart6Buffer[1] > 0){
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <USART6_IRQHandler+0x80>)
 80018f8:	785b      	ldrb	r3, [r3, #1]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00a      	beq.n	8001914 <USART6_IRQHandler+0x5c>
      ptr = &(usart6Buffer[2]);
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <USART6_IRQHandler+0x88>)
 8001900:	607b      	str	r3, [r7, #4]
      xMessageBufferSendFromISR(messageBufferFromUsart6, ptr, usart6Buffer[1], pdFALSE);
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <USART6_IRQHandler+0x84>)
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <USART6_IRQHandler+0x80>)
 8001908:	785b      	ldrb	r3, [r3, #1]
 800190a:	461a      	mov	r2, r3
 800190c:	2300      	movs	r3, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	f002 fbaf 	bl	8004072 <xStreamBufferSendFromISR>
    }
    usart6BufferIndex = 0;
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <USART6_IRQHandler+0x7c>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
  }
  else
    usart6BufferIndex++;
  }
}
 800191a:	e004      	b.n	8001926 <USART6_IRQHandler+0x6e>
    usart6BufferIndex++;
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <USART6_IRQHandler+0x7c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	4a04      	ldr	r2, [pc, #16]	; (8001934 <USART6_IRQHandler+0x7c>)
 8001924:	6013      	str	r3, [r2, #0]
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40011400 	.word	0x40011400
 8001934:	200000a8 	.word	0x200000a8
 8001938:	200000ac 	.word	0x200000ac
 800193c:	200049cc 	.word	0x200049cc
 8001940:	200000ae 	.word	0x200000ae

08001944 <masterFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_masterFunction */
void masterFunction(void *argument)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint8_t receivedCommand, receivedData[2], resultDetail[3];
  char  commandToSend[2];
  /* Infinite loop */
  for(;;)
  {
    messageSize = xMessageBufferReceive(messageBufferToMaster, &receivedCommand, sizeof(receivedCommand), portMAX_DELAY);
 800194c:	4b23      	ldr	r3, [pc, #140]	; (80019dc <masterFunction+0x98>)
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	f107 0113 	add.w	r1, r7, #19
 8001954:	f04f 33ff 	mov.w	r3, #4294967295
 8001958:	2201      	movs	r2, #1
 800195a:	f002 fc38 	bl	80041ce <xStreamBufferReceive>
 800195e:	6178      	str	r0, [r7, #20]
    if(messageSize == 0)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <masterFunction+0x28>
      commandToSend[0] = ERROR;
 8001966:	23ff      	movs	r3, #255	; 0xff
 8001968:	723b      	strb	r3, [r7, #8]
 800196a:	e001      	b.n	8001970 <masterFunction+0x2c>
    else
      commandToSend[0] = receivedCommand;
 800196c:	7cfb      	ldrb	r3, [r7, #19]
 800196e:	723b      	strb	r3, [r7, #8]
    usartTransmitWithLength(usart6, commandToSend, 1);
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	2201      	movs	r2, #1
 8001976:	4619      	mov	r1, r3
 8001978:	4819      	ldr	r0, [pc, #100]	; (80019e0 <masterFunction+0x9c>)
 800197a:	f7ff fd28 	bl	80013ce <usartTransmitWithLength>
    xMessageBufferReceive(messageBufferFromUsart6, resultDetail, 2, portMAX_DELAY);
 800197e:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <masterFunction+0xa0>)
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	f107 010c 	add.w	r1, r7, #12
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	2202      	movs	r2, #2
 800198c:	f002 fc1f 	bl	80041ce <xStreamBufferReceive>
    if(resultDetail[1] > 0)
 8001990:	7b7b      	ldrb	r3, [r7, #13]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <masterFunction+0x66>
      xMessageBufferReceive(messageBufferFromUsart6, receivedData, resultDetail[1], portMAX_DELAY);
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <masterFunction+0xa0>)
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	7b7b      	ldrb	r3, [r7, #13]
 800199c:	461a      	mov	r2, r3
 800199e:	f107 0110 	add.w	r1, r7, #16
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
 80019a6:	f002 fc12 	bl	80041ce <xStreamBufferReceive>
    messageSize =  xMessageBufferSend(messageBufferFromMaster, resultDetail, 2, portMAX_DELAY);
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <masterFunction+0xa4>)
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	f107 010c 	add.w	r1, r7, #12
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	2202      	movs	r2, #2
 80019b8:	f002 faa6 	bl	8003f08 <xStreamBufferSend>
 80019bc:	6178      	str	r0, [r7, #20]
    if(resultDetail[1] > 0)
 80019be:	7b7b      	ldrb	r3, [r7, #13]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0c3      	beq.n	800194c <masterFunction+0x8>
      messageSize =  xMessageBufferSend(messageBufferFromMaster, receivedData, resultDetail[1], portMAX_DELAY);
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <masterFunction+0xa4>)
 80019c6:	6818      	ldr	r0, [r3, #0]
 80019c8:	7b7b      	ldrb	r3, [r7, #13]
 80019ca:	461a      	mov	r2, r3
 80019cc:	f107 0110 	add.w	r1, r7, #16
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
 80019d4:	f002 fa98 	bl	8003f08 <xStreamBufferSend>
 80019d8:	6178      	str	r0, [r7, #20]
    messageSize = xMessageBufferReceive(messageBufferToMaster, &receivedCommand, sizeof(receivedCommand), portMAX_DELAY);
 80019da:	e7b7      	b.n	800194c <masterFunction+0x8>
 80019dc:	200049e8 	.word	0x200049e8
 80019e0:	40011400 	.word	0x40011400
 80019e4:	200049cc 	.word	0x200049cc
 80019e8:	200049e4 	.word	0x200049e4

080019ec <slaveFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_slaveFunction */
void slaveFunction(void *argument)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  //printf("This is the slave function \n\r");
  for(;;)
  {
    xMessageBufferReceive(messageBufferFromUsart1, &command, 1, portMAX_DELAY);
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <slaveFunction+0x9c>)
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	f107 0117 	add.w	r1, r7, #23
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001a00:	2201      	movs	r2, #1
 8001a02:	f002 fbe4 	bl	80041ce <xStreamBufferReceive>
    if(command == TURN_LED_ON){
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
 8001a08:	2b50      	cmp	r3, #80	; 0x50
 8001a0a:	d109      	bne.n	8001a20 <slaveFunction+0x34>
      gpioWritePin(gpioA, 5, 1);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2105      	movs	r1, #5
 8001a10:	481e      	ldr	r0, [pc, #120]	; (8001a8c <slaveFunction+0xa0>)
 8001a12:	f7ff fa30 	bl	8000e76 <gpioWritePin>
      resultToSend[0] = SUCCESSFULLY_ON;
 8001a16:	2355      	movs	r3, #85	; 0x55
 8001a18:	733b      	strb	r3, [r7, #12]
      resultToSend[1] = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	737b      	strb	r3, [r7, #13]
 8001a1e:	e027      	b.n	8001a70 <slaveFunction+0x84>
    }else if (command == TURN_LED_OFF){
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	2b60      	cmp	r3, #96	; 0x60
 8001a24:	d109      	bne.n	8001a3a <slaveFunction+0x4e>
      gpioWritePin(gpioA, 5, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2105      	movs	r1, #5
 8001a2a:	4818      	ldr	r0, [pc, #96]	; (8001a8c <slaveFunction+0xa0>)
 8001a2c:	f7ff fa23 	bl	8000e76 <gpioWritePin>
      resultToSend[0] = SUCCESSFULLY_OFF;
 8001a30:	2365      	movs	r3, #101	; 0x65
 8001a32:	733b      	strb	r3, [r7, #12]
      resultToSend[1] = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	737b      	strb	r3, [r7, #13]
 8001a38:	e01a      	b.n	8001a70 <slaveFunction+0x84>
    }else{
      adc1->CR[1] |= (REGULAR_CHN_START_CONVERT >> 32);
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <slaveFunction+0xa4>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <slaveFunction+0xa4>)
 8001a40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a44:	6093      	str	r3, [r2, #8]
      xMessageBufferReceive(messageBufferFromAdc, &adcValue, 2, portMAX_DELAY);
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <slaveFunction+0xa8>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	f107 0114 	add.w	r1, r7, #20
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	2202      	movs	r2, #2
 8001a54:	f002 fbbb 	bl	80041ce <xStreamBufferReceive>
      resultToSend[0] = ADC_CONVERSION_FINISHED;
 8001a58:	2340      	movs	r3, #64	; 0x40
 8001a5a:	733b      	strb	r3, [r7, #12]
      resultToSend[1] = sizeof(adcValue) + 1;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	737b      	strb	r3, [r7, #13]
      resultToSend[2] = (adcValue & 0xFF);
 8001a60:	8abb      	ldrh	r3, [r7, #20]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	73bb      	strb	r3, [r7, #14]
      resultToSend[3] = (adcValue >> 8);
 8001a66:	8abb      	ldrh	r3, [r7, #20]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	73fb      	strb	r3, [r7, #15]
    }
    resultToSend[4] = '\0';
 8001a70:	2300      	movs	r3, #0
 8001a72:	743b      	strb	r3, [r7, #16]
    usartTransmitWithLength(usart1, resultToSend, resultToSend[1] + 2);
 8001a74:	7b7b      	ldrb	r3, [r7, #13]
 8001a76:	1c9a      	adds	r2, r3, #2
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4806      	ldr	r0, [pc, #24]	; (8001a98 <slaveFunction+0xac>)
 8001a80:	f7ff fca5 	bl	80013ce <usartTransmitWithLength>
    xMessageBufferReceive(messageBufferFromUsart1, &command, 1, portMAX_DELAY);
 8001a84:	e7b6      	b.n	80019f4 <slaveFunction+0x8>
 8001a86:	bf00      	nop
 8001a88:	200049d0 	.word	0x200049d0
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40012000 	.word	0x40012000
 8001a94:	200049d8 	.word	0x200049d8
 8001a98:	40011000 	.word	0x40011000

08001a9c <commandInterpreterFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_commandInterpreterFunction */
void commandInterpreterFunction(void *argument)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	; 0x30
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint16_t  adcToPrint;
  /* Infinite loop */
  //printf("Enter Command : ");
  for(;;)
  {
    xMessageBufferReceive(messageBufferFromUsart2, &charCommandSize, 1, portMAX_DELAY);
 8001aa4:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <commandInterpreterFunction+0x128>)
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	f107 010f 	add.w	r1, r7, #15
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f002 fb8c 	bl	80041ce <xStreamBufferReceive>
    xMessageBufferReceive(messageBufferFromUsart2, charCommand, charCommandSize, portMAX_DELAY);
 8001ab6:	4b43      	ldr	r3, [pc, #268]	; (8001bc4 <commandInterpreterFunction+0x128>)
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	461a      	mov	r2, r3
 8001abe:	f107 0110 	add.w	r1, r7, #16
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	f002 fb82 	bl	80041ce <xStreamBufferReceive>
      if(strncasecmp((char  *)charCommand, "TurnOnLed\n", charCommandSize) == 0)
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	461a      	mov	r2, r3
 8001ace:	f107 0310 	add.w	r3, r7, #16
 8001ad2:	493d      	ldr	r1, [pc, #244]	; (8001bc8 <commandInterpreterFunction+0x12c>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f004 ffad 	bl	8006a34 <strncasecmp>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d103      	bne.n	8001ae8 <commandInterpreterFunction+0x4c>
        command = TURN_LED_ON;
 8001ae0:	2350      	movs	r3, #80	; 0x50
 8001ae2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001ae6:	e020      	b.n	8001b2a <commandInterpreterFunction+0x8e>
      else if(strncasecmp((char  *)charCommand, "TurnOffLed\n", charCommandSize) == 0)
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	461a      	mov	r2, r3
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	4936      	ldr	r1, [pc, #216]	; (8001bcc <commandInterpreterFunction+0x130>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f004 ff9e 	bl	8006a34 <strncasecmp>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d103      	bne.n	8001b06 <commandInterpreterFunction+0x6a>
        command = TURN_LED_OFF;
 8001afe:	2360      	movs	r3, #96	; 0x60
 8001b00:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001b04:	e011      	b.n	8001b2a <commandInterpreterFunction+0x8e>
      else if(strncasecmp((char  *)charCommand, "StartADC\n", charCommandSize) == 0)
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f107 0310 	add.w	r3, r7, #16
 8001b0e:	4930      	ldr	r1, [pc, #192]	; (8001bd0 <commandInterpreterFunction+0x134>)
 8001b10:	4618      	mov	r0, r3
 8001b12:	f004 ff8f 	bl	8006a34 <strncasecmp>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d103      	bne.n	8001b24 <commandInterpreterFunction+0x88>
        command = START_ADC_CONVERSION;
 8001b1c:	2370      	movs	r3, #112	; 0x70
 8001b1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001b22:	e002      	b.n	8001b2a <commandInterpreterFunction+0x8e>
      else
        command = INVALID_COMMAND;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

      if(command == INVALID_COMMAND)
 8001b2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d103      	bne.n	8001b3a <commandInterpreterFunction+0x9e>
        printf("Invalid Command! Please try again.\n");
 8001b32:	4828      	ldr	r0, [pc, #160]	; (8001bd4 <commandInterpreterFunction+0x138>)
 8001b34:	f004 feb0 	bl	8006898 <puts>
 8001b38:	e008      	b.n	8001b4c <commandInterpreterFunction+0xb0>
      else{
        xMessageBufferSend(messageBufferToMaster, &command, sizeof(command), portMAX_DELAY);
 8001b3a:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <commandInterpreterFunction+0x13c>)
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	f107 012d 	add.w	r1, r7, #45	; 0x2d
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	2201      	movs	r2, #1
 8001b48:	f002 f9de 	bl	8003f08 <xStreamBufferSend>
      }

      if(command != INVALID_COMMAND){
 8001b4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0a7      	beq.n	8001aa4 <commandInterpreterFunction+0x8>
         xMessageBufferReceive(messageBufferFromMaster, result, 2, portMAX_DELAY);
 8001b54:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <commandInterpreterFunction+0x140>)
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b60:	2202      	movs	r2, #2
 8001b62:	f002 fb34 	bl	80041ce <xStreamBufferReceive>
         if(result[1] > 0)
 8001b66:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00a      	beq.n	8001b84 <commandInterpreterFunction+0xe8>
           xMessageBufferReceive(messageBufferFromMaster, data, result[1], portMAX_DELAY);
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <commandInterpreterFunction+0x140>)
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001b76:	461a      	mov	r2, r3
 8001b78:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b80:	f002 fb25 	bl	80041ce <xStreamBufferReceive>
        if(result[0] == SUCCESSFULLY_ON)
 8001b84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b88:	2b55      	cmp	r3, #85	; 0x55
 8001b8a:	d103      	bne.n	8001b94 <commandInterpreterFunction+0xf8>
          printf("LED Switched ON\n\r");
 8001b8c:	4814      	ldr	r0, [pc, #80]	; (8001be0 <commandInterpreterFunction+0x144>)
 8001b8e:	f004 fdfd 	bl	800678c <iprintf>
 8001b92:	e787      	b.n	8001aa4 <commandInterpreterFunction+0x8>
        else if(result[0] == SUCCESSFULLY_OFF)
 8001b94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b98:	2b65      	cmp	r3, #101	; 0x65
 8001b9a:	d103      	bne.n	8001ba4 <commandInterpreterFunction+0x108>
          printf("LED Switched OFF\n\r");
 8001b9c:	4811      	ldr	r0, [pc, #68]	; (8001be4 <commandInterpreterFunction+0x148>)
 8001b9e:	f004 fdf5 	bl	800678c <iprintf>
 8001ba2:	e77f      	b.n	8001aa4 <commandInterpreterFunction+0x8>
        else{
          adcToPrint = data[0] | (data[1] << 8);
 8001ba4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ba8:	b21a      	sxth	r2, r3
 8001baa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
          printf("ADC value : %d\n\r", adcToPrint);
 8001bb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480a      	ldr	r0, [pc, #40]	; (8001be8 <commandInterpreterFunction+0x14c>)
 8001bbe:	f004 fde5 	bl	800678c <iprintf>
    xMessageBufferReceive(messageBufferFromUsart2, &charCommandSize, 1, portMAX_DELAY);
 8001bc2:	e76f      	b.n	8001aa4 <commandInterpreterFunction+0x8>
 8001bc4:	200049e0 	.word	0x200049e0
 8001bc8:	0800798c 	.word	0x0800798c
 8001bcc:	08007998 	.word	0x08007998
 8001bd0:	080079a4 	.word	0x080079a4
 8001bd4:	080079b0 	.word	0x080079b0
 8001bd8:	200049e8 	.word	0x200049e8
 8001bdc:	200049e4 	.word	0x200049e4
 8001be0:	080079d4 	.word	0x080079d4
 8001be4:	080079e8 	.word	0x080079e8
 8001be8:	080079fc 	.word	0x080079fc

08001bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bfe:	f000 fa05 	bl	800200c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40014000 	.word	0x40014000

08001c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c14:	b672      	cpsid	i
}
 8001c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <Error_Handler+0x8>
	...

08001c1c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UsartReg *gHuart;

void RetargetInit(UsartReg *usart) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  gHuart = usart;
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <RetargetInit+0x28>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <RetargetInit+0x2c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6898      	ldr	r0, [r3, #8]
 8001c30:	2300      	movs	r3, #0
 8001c32:	2202      	movs	r2, #2
 8001c34:	2100      	movs	r1, #0
 8001c36:	f004 fe37 	bl	80068a8 <setvbuf>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200049f0 	.word	0x200049f0
 8001c48:	20000010 	.word	0x20000010

08001c4c <_isatty>:

int _isatty(int fd) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db04      	blt.n	8001c64 <_isatty+0x18>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	dc01      	bgt.n	8001c64 <_isatty+0x18>
    return 1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e005      	b.n	8001c70 <_isatty+0x24>

  errno = EBADF;
 8001c64:	f004 fd52 	bl	800670c <__errno>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2209      	movs	r2, #9
 8001c6c:	601a      	str	r2, [r3, #0]
  return 0;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_write>:

int _write(int fd, char* ptr, int len) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  Status status;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d002      	beq.n	8001c90 <_write+0x18>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d10e      	bne.n	8001cae <_write+0x36>
    status = usartTransmit(gHuart, ptr);
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <_write+0x4c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fb6d 	bl	8001376 <usartTransmit>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	75fb      	strb	r3, [r7, #23]
    if (status == OK)
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <_write+0x32>
      return len;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	e008      	b.n	8001cbc <_write+0x44>
    else
      return EIO;
 8001caa:	2305      	movs	r3, #5
 8001cac:	e006      	b.n	8001cbc <_write+0x44>
  }
  errno = EBADF;
 8001cae:	f004 fd2d 	bl	800670c <__errno>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2209      	movs	r2, #9
 8001cb6:	601a      	str	r2, [r3, #0]
  return -1;
 8001cb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200049f0 	.word	0x200049f0

08001cc8 <_close>:

int _close(int fd) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db04      	blt.n	8001ce0 <_close+0x18>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	dc01      	bgt.n	8001ce0 <_close+0x18>
    return 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e006      	b.n	8001cee <_close+0x26>

  errno = EBADF;
 8001ce0:	f004 fd14 	bl	800670c <__errno>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2209      	movs	r2, #9
 8001ce8:	601a      	str	r2, [r3, #0]
  return -1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001d02:	f004 fd03 	bl	800670c <__errno>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2209      	movs	r2, #9
 8001d0a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <_read>:

int _read(int fd, char* ptr, int len) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  Status status;

  if (fd == STDIN_FILENO) {
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10e      	bne.n	8001d48 <_read+0x30>
    status = readFromUsart(gHuart, ptr);
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <_read+0x48>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68b9      	ldr	r1, [r7, #8]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fb77 	bl	8001424 <readFromUsart>
 8001d36:	4603      	mov	r3, r0
 8001d38:	75fb      	strb	r3, [r7, #23]
    if (status == OK)
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <_read+0x2c>
      return 1;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e008      	b.n	8001d56 <_read+0x3e>
    else
      return EIO;
 8001d44:	2305      	movs	r3, #5
 8001d46:	e006      	b.n	8001d56 <_read+0x3e>
  }
  errno = EBADF;
 8001d48:	f004 fce0 	bl	800670c <__errno>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2209      	movs	r2, #9
 8001d50:	601a      	str	r2, [r3, #0]
  return -1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200049f0 	.word	0x200049f0

08001d64 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db08      	blt.n	8001d86 <_fstat+0x22>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	dc05      	bgt.n	8001d86 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d80:	605a      	str	r2, [r3, #4]
    return 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e005      	b.n	8001d92 <_fstat+0x2e>
  }

  errno = EBADF;
 8001d86:	f004 fcc1 	bl	800670c <__errno>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2209      	movs	r2, #9
 8001d8e:	601a      	str	r2, [r3, #0]
  return 0;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_MspInit+0x54>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a11      	ldr	r2, [pc, #68]	; (8001df0 <HAL_MspInit+0x54>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <HAL_MspInit+0x54>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_MspInit+0x54>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <HAL_MspInit+0x54>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_MspInit+0x54>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	210f      	movs	r1, #15
 8001dde:	f06f 0001 	mvn.w	r0, #1
 8001de2:	f000 f9eb 	bl	80021bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800

08001df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08c      	sub	sp, #48	; 0x30
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	2018      	movs	r0, #24
 8001e0a:	f000 f9d7 	bl	80021bc <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001e0e:	2018      	movs	r0, #24
 8001e10:	f000 f9f0 	bl	80021f4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <HAL_InitTick+0xa0>)
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <HAL_InitTick+0xa0>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e22:	6453      	str	r3, [r2, #68]	; 0x44
 8001e24:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_InitTick+0xa0>)
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e30:	f107 0210 	add.w	r2, r7, #16
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fe30 	bl	8002aa0 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e40:	f000 fe1a 	bl	8002a78 <HAL_RCC_GetPCLK2Freq>
 8001e44:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e48:	4a13      	ldr	r2, [pc, #76]	; (8001e98 <HAL_InitTick+0xa4>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	0c9b      	lsrs	r3, r3, #18
 8001e50:	3b01      	subs	r3, #1
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_InitTick+0xa8>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <HAL_InitTick+0xac>)
 8001e58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_InitTick+0xa8>)
 8001e5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e60:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001e62:	4a0e      	ldr	r2, [pc, #56]	; (8001e9c <HAL_InitTick+0xa8>)
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <HAL_InitTick+0xa8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_InitTick+0xa8>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8001e74:	4809      	ldr	r0, [pc, #36]	; (8001e9c <HAL_InitTick+0xa8>)
 8001e76:	f000 fe45 	bl	8002b04 <HAL_TIM_Base_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d104      	bne.n	8001e8a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8001e80:	4806      	ldr	r0, [pc, #24]	; (8001e9c <HAL_InitTick+0xa8>)
 8001e82:	f000 fe99 	bl	8002bb8 <HAL_TIM_Base_Start_IT>
 8001e86:	4603      	mov	r3, r0
 8001e88:	e000      	b.n	8001e8c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3730      	adds	r7, #48	; 0x30
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800
 8001e98:	431bde83 	.word	0x431bde83
 8001e9c:	200049f4 	.word	0x200049f4
 8001ea0:	40014000 	.word	0x40014000

08001ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <NMI_Handler+0x4>

08001eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <HardFault_Handler+0x4>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <MemManage_Handler+0x4>

08001eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <BusFault_Handler+0x4>

08001ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <UsageFault_Handler+0x4>

08001ec2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001ed6:	f000 fed1 	bl	8002c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200049f4 	.word	0x200049f4

08001ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <_sbrk+0x5c>)
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <_sbrk+0x60>)
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <_sbrk+0x64>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <_sbrk+0x64>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <_sbrk+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d207      	bcs.n	8001f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f14:	f004 fbfa 	bl	800670c <__errno>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	e009      	b.n	8001f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <_sbrk+0x64>)
 8001f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20020000 	.word	0x20020000
 8001f44:	00000400 	.word	0x00000400
 8001f48:	200000b0 	.word	0x200000b0
 8001f4c:	20004a90 	.word	0x20004a90

08001f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <SystemInit+0x20>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <SystemInit+0x20>)
 8001f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f78:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f7a:	490e      	ldr	r1, [pc, #56]	; (8001fb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f7c:	4a0e      	ldr	r2, [pc, #56]	; (8001fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f80:	e002      	b.n	8001f88 <LoopCopyDataInit>

08001f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f86:	3304      	adds	r3, #4

08001f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f8c:	d3f9      	bcc.n	8001f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f90:	4c0b      	ldr	r4, [pc, #44]	; (8001fc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f94:	e001      	b.n	8001f9a <LoopFillZerobss>

08001f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f98:	3204      	adds	r2, #4

08001f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f9c:	d3fb      	bcc.n	8001f96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f9e:	f7ff ffd7 	bl	8001f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa2:	f004 fbb9 	bl	8006718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa6:	f7ff fa61 	bl	800146c <main>
  bx  lr    
 8001faa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001fb8:	08007c58 	.word	0x08007c58
  ldr r2, =_sbss
 8001fbc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001fc0:	20004a90 	.word	0x20004a90

08001fc4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <DMA1_Stream0_IRQHandler>
	...

08001fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fcc:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <HAL_Init+0x40>)
 8001fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_Init+0x40>)
 8001fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_Init+0x40>)
 8001fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f000 f8d8 	bl	80021a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7ff fefc 	bl	8001df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ffc:	f7ff fece 	bl	8001d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023c00 	.word	0x40023c00

0800200c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_IncTick+0x20>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_IncTick+0x24>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4413      	add	r3, r2
 800201c:	4a04      	ldr	r2, [pc, #16]	; (8002030 <HAL_IncTick+0x24>)
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000008 	.word	0x20000008
 8002030:	20004a3c 	.word	0x20004a3c

08002034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <HAL_GetTick+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20004a3c 	.word	0x20004a3c

0800204c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002068:	4013      	ands	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	; (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <__NVIC_GetPriorityGrouping+0x18>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	f003 0307 	and.w	r3, r3, #7
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	db0b      	blt.n	80020da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	f003 021f 	and.w	r2, r3, #31
 80020c8:	4907      	ldr	r1, [pc, #28]	; (80020e8 <__NVIC_EnableIRQ+0x38>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2001      	movs	r0, #1
 80020d2:	fa00 f202 	lsl.w	r2, r0, r2
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000e100 	.word	0xe000e100

080020ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	db0a      	blt.n	8002116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	490c      	ldr	r1, [pc, #48]	; (8002138 <__NVIC_SetPriority+0x4c>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	0112      	lsls	r2, r2, #4
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	440b      	add	r3, r1
 8002110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002114:	e00a      	b.n	800212c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4908      	ldr	r1, [pc, #32]	; (800213c <__NVIC_SetPriority+0x50>)
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	3b04      	subs	r3, #4
 8002124:	0112      	lsls	r2, r2, #4
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	440b      	add	r3, r1
 800212a:	761a      	strb	r2, [r3, #24]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000e100 	.word	0xe000e100
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	; 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f1c3 0307 	rsb	r3, r3, #7
 800215a:	2b04      	cmp	r3, #4
 800215c:	bf28      	it	cs
 800215e:	2304      	movcs	r3, #4
 8002160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3304      	adds	r3, #4
 8002166:	2b06      	cmp	r3, #6
 8002168:	d902      	bls.n	8002170 <NVIC_EncodePriority+0x30>
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3b03      	subs	r3, #3
 800216e:	e000      	b.n	8002172 <NVIC_EncodePriority+0x32>
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	f04f 32ff 	mov.w	r2, #4294967295
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	401a      	ands	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002188:	f04f 31ff 	mov.w	r1, #4294967295
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa01 f303 	lsl.w	r3, r1, r3
 8002192:	43d9      	mvns	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	4313      	orrs	r3, r2
         );
}
 800219a:	4618      	mov	r0, r3
 800219c:	3724      	adds	r7, #36	; 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ff4c 	bl	800204c <__NVIC_SetPriorityGrouping>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ce:	f7ff ff61 	bl	8002094 <__NVIC_GetPriorityGrouping>
 80021d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	68b9      	ldr	r1, [r7, #8]
 80021d8:	6978      	ldr	r0, [r7, #20]
 80021da:	f7ff ffb1 	bl	8002140 <NVIC_EncodePriority>
 80021de:	4602      	mov	r2, r0
 80021e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff80 	bl	80020ec <__NVIC_SetPriority>
}
 80021ec:	bf00      	nop
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff ff54 	bl	80020b0 <__NVIC_EnableIRQ>
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e264      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d075      	beq.n	800231a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800222e:	4ba3      	ldr	r3, [pc, #652]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b04      	cmp	r3, #4
 8002238:	d00c      	beq.n	8002254 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223a:	4ba0      	ldr	r3, [pc, #640]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002242:	2b08      	cmp	r3, #8
 8002244:	d112      	bne.n	800226c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002246:	4b9d      	ldr	r3, [pc, #628]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002252:	d10b      	bne.n	800226c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002254:	4b99      	ldr	r3, [pc, #612]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d05b      	beq.n	8002318 <HAL_RCC_OscConfig+0x108>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d157      	bne.n	8002318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e23f      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002274:	d106      	bne.n	8002284 <HAL_RCC_OscConfig+0x74>
 8002276:	4b91      	ldr	r3, [pc, #580]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a90      	ldr	r2, [pc, #576]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800227c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	e01d      	b.n	80022c0 <HAL_RCC_OscConfig+0xb0>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x98>
 800228e:	4b8b      	ldr	r3, [pc, #556]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a8a      	ldr	r2, [pc, #552]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b88      	ldr	r3, [pc, #544]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a87      	ldr	r2, [pc, #540]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_OscConfig+0xb0>
 80022a8:	4b84      	ldr	r3, [pc, #528]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a83      	ldr	r2, [pc, #524]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b81      	ldr	r3, [pc, #516]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a80      	ldr	r2, [pc, #512]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7ff feb4 	bl	8002034 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d0:	f7ff feb0 	bl	8002034 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e204      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	4b76      	ldr	r3, [pc, #472]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0xc0>
 80022ee:	e014      	b.n	800231a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7ff fea0 	bl	8002034 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f8:	f7ff fe9c 	bl	8002034 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e1f0      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	4b6c      	ldr	r3, [pc, #432]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0xe8>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d063      	beq.n	80023ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002326:	4b65      	ldr	r3, [pc, #404]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002332:	4b62      	ldr	r3, [pc, #392]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800233a:	2b08      	cmp	r3, #8
 800233c:	d11c      	bne.n	8002378 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233e:	4b5f      	ldr	r3, [pc, #380]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d116      	bne.n	8002378 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234a:	4b5c      	ldr	r3, [pc, #368]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_RCC_OscConfig+0x152>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d001      	beq.n	8002362 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e1c4      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002362:	4b56      	ldr	r3, [pc, #344]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4952      	ldr	r1, [pc, #328]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002376:	e03a      	b.n	80023ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d020      	beq.n	80023c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002380:	4b4f      	ldr	r3, [pc, #316]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7ff fe55 	bl	8002034 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800238e:	f7ff fe51 	bl	8002034 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e1a5      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	4b46      	ldr	r3, [pc, #280]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ac:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4940      	ldr	r1, [pc, #256]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
 80023c0:	e015      	b.n	80023ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c2:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <HAL_RCC_OscConfig+0x2b0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7ff fe34 	bl	8002034 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d0:	f7ff fe30 	bl	8002034 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e184      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	4b36      	ldr	r3, [pc, #216]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d030      	beq.n	800245c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d016      	beq.n	8002430 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002402:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <HAL_RCC_OscConfig+0x2b4>)
 8002404:	2201      	movs	r2, #1
 8002406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7ff fe14 	bl	8002034 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002410:	f7ff fe10 	bl	8002034 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e164      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002422:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x200>
 800242e:	e015      	b.n	800245c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002430:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_RCC_OscConfig+0x2b4>)
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7ff fdfd 	bl	8002034 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800243e:	f7ff fdf9 	bl	8002034 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e14d      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f0      	bne.n	800243e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a0 	beq.w	80025aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10f      	bne.n	800249a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_RCC_OscConfig+0x2ac>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002496:	2301      	movs	r3, #1
 8002498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d121      	bne.n	80024ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_RCC_OscConfig+0x2b8>)
 80024ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b2:	f7ff fdbf 	bl	8002034 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b8:	e011      	b.n	80024de <HAL_RCC_OscConfig+0x2ce>
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	42470000 	.word	0x42470000
 80024c4:	42470e80 	.word	0x42470e80
 80024c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024cc:	f7ff fdb2 	bl	8002034 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e106      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4b85      	ldr	r3, [pc, #532]	; (80026f4 <HAL_RCC_OscConfig+0x4e4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d106      	bne.n	8002500 <HAL_RCC_OscConfig+0x2f0>
 80024f2:	4b81      	ldr	r3, [pc, #516]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	4a80      	ldr	r2, [pc, #512]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6713      	str	r3, [r2, #112]	; 0x70
 80024fe:	e01c      	b.n	800253a <HAL_RCC_OscConfig+0x32a>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b05      	cmp	r3, #5
 8002506:	d10c      	bne.n	8002522 <HAL_RCC_OscConfig+0x312>
 8002508:	4b7b      	ldr	r3, [pc, #492]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	4a7a      	ldr	r2, [pc, #488]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	6713      	str	r3, [r2, #112]	; 0x70
 8002514:	4b78      	ldr	r3, [pc, #480]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	4a77      	ldr	r2, [pc, #476]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6713      	str	r3, [r2, #112]	; 0x70
 8002520:	e00b      	b.n	800253a <HAL_RCC_OscConfig+0x32a>
 8002522:	4b75      	ldr	r3, [pc, #468]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	4a74      	ldr	r2, [pc, #464]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	6713      	str	r3, [r2, #112]	; 0x70
 800252e:	4b72      	ldr	r3, [pc, #456]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a71      	ldr	r2, [pc, #452]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 8002534:	f023 0304 	bic.w	r3, r3, #4
 8002538:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d015      	beq.n	800256e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002542:	f7ff fd77 	bl	8002034 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002548:	e00a      	b.n	8002560 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f7ff fd73 	bl	8002034 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f241 3288 	movw	r2, #5000	; 0x1388
 8002558:	4293      	cmp	r3, r2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e0c5      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002560:	4b65      	ldr	r3, [pc, #404]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ee      	beq.n	800254a <HAL_RCC_OscConfig+0x33a>
 800256c:	e014      	b.n	8002598 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7ff fd61 	bl	8002034 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7ff fd5d 	bl	8002034 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0af      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258c:	4b5a      	ldr	r3, [pc, #360]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1ee      	bne.n	8002576 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d105      	bne.n	80025aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259e:	4b56      	ldr	r3, [pc, #344]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	4a55      	ldr	r2, [pc, #340]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 80025a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 809b 	beq.w	80026ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025b4:	4b50      	ldr	r3, [pc, #320]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 030c 	and.w	r3, r3, #12
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d05c      	beq.n	800267a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d141      	bne.n	800264c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c8:	4b4c      	ldr	r3, [pc, #304]	; (80026fc <HAL_RCC_OscConfig+0x4ec>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7ff fd31 	bl	8002034 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d6:	f7ff fd2d 	bl	8002034 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e081      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e8:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	019b      	lsls	r3, r3, #6
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	3b01      	subs	r3, #1
 800260e:	041b      	lsls	r3, r3, #16
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	061b      	lsls	r3, r3, #24
 8002618:	4937      	ldr	r1, [pc, #220]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 800261a:	4313      	orrs	r3, r2
 800261c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800261e:	4b37      	ldr	r3, [pc, #220]	; (80026fc <HAL_RCC_OscConfig+0x4ec>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7ff fd06 	bl	8002034 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262c:	f7ff fd02 	bl	8002034 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e056      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263e:	4b2e      	ldr	r3, [pc, #184]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x41c>
 800264a:	e04e      	b.n	80026ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264c:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <HAL_RCC_OscConfig+0x4ec>)
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7ff fcef 	bl	8002034 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265a:	f7ff fceb 	bl	8002034 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e03f      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266c:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f0      	bne.n	800265a <HAL_RCC_OscConfig+0x44a>
 8002678:	e037      	b.n	80026ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e032      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002686:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <HAL_RCC_OscConfig+0x4e8>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d028      	beq.n	80026e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269e:	429a      	cmp	r2, r3
 80026a0:	d121      	bne.n	80026e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d11a      	bne.n	80026e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026b6:	4013      	ands	r3, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026be:	4293      	cmp	r3, r2
 80026c0:	d111      	bne.n	80026e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	085b      	lsrs	r3, r3, #1
 80026ce:	3b01      	subs	r3, #1
 80026d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40007000 	.word	0x40007000
 80026f8:	40023800 	.word	0x40023800
 80026fc:	42470060 	.word	0x42470060

08002700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0cc      	b.n	80028ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b68      	ldr	r3, [pc, #416]	; (80028b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d90c      	bls.n	800273c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b65      	ldr	r3, [pc, #404]	; (80028b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b63      	ldr	r3, [pc, #396]	; (80028b8 <HAL_RCC_ClockConfig+0x1b8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0b8      	b.n	80028ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d020      	beq.n	800278a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002754:	4b59      	ldr	r3, [pc, #356]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	4a58      	ldr	r2, [pc, #352]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800275e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800276c:	4b53      	ldr	r3, [pc, #332]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	4a52      	ldr	r2, [pc, #328]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002776:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002778:	4b50      	ldr	r3, [pc, #320]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	494d      	ldr	r1, [pc, #308]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d044      	beq.n	8002820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	4b47      	ldr	r3, [pc, #284]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d119      	bne.n	80027de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e07f      	b.n	80028ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d003      	beq.n	80027be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e06f      	b.n	80028ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ce:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e067      	b.n	80028ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027de:	4b37      	ldr	r3, [pc, #220]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f023 0203 	bic.w	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4934      	ldr	r1, [pc, #208]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f0:	f7ff fc20 	bl	8002034 <HAL_GetTick>
 80027f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f6:	e00a      	b.n	800280e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f8:	f7ff fc1c 	bl	8002034 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	; 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e04f      	b.n	80028ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 020c 	and.w	r2, r3, #12
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	429a      	cmp	r2, r3
 800281e:	d1eb      	bne.n	80027f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002820:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d20c      	bcs.n	8002848 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e032      	b.n	80028ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4916      	ldr	r1, [pc, #88]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002872:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	490e      	ldr	r1, [pc, #56]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002886:	f000 f821 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 800288a:	4602      	mov	r2, r0
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	490a      	ldr	r1, [pc, #40]	; (80028c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002898:	5ccb      	ldrb	r3, [r1, r3]
 800289a:	fa22 f303 	lsr.w	r3, r2, r3
 800289e:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff faa4 	bl	8001df4 <HAL_InitTick>

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40023c00 	.word	0x40023c00
 80028bc:	40023800 	.word	0x40023800
 80028c0:	08007a94 	.word	0x08007a94
 80028c4:	20000000 	.word	0x20000000
 80028c8:	20000004 	.word	0x20000004

080028cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028cc:	b5b0      	push	{r4, r5, r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028d2:	2100      	movs	r1, #0
 80028d4:	6079      	str	r1, [r7, #4]
 80028d6:	2100      	movs	r1, #0
 80028d8:	60f9      	str	r1, [r7, #12]
 80028da:	2100      	movs	r1, #0
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028de:	2100      	movs	r1, #0
 80028e0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028e2:	4952      	ldr	r1, [pc, #328]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x160>)
 80028e4:	6889      	ldr	r1, [r1, #8]
 80028e6:	f001 010c 	and.w	r1, r1, #12
 80028ea:	2908      	cmp	r1, #8
 80028ec:	d00d      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x3e>
 80028ee:	2908      	cmp	r1, #8
 80028f0:	f200 8094 	bhi.w	8002a1c <HAL_RCC_GetSysClockFreq+0x150>
 80028f4:	2900      	cmp	r1, #0
 80028f6:	d002      	beq.n	80028fe <HAL_RCC_GetSysClockFreq+0x32>
 80028f8:	2904      	cmp	r1, #4
 80028fa:	d003      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x38>
 80028fc:	e08e      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028fe:	4b4c      	ldr	r3, [pc, #304]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x164>)
 8002900:	60bb      	str	r3, [r7, #8]
       break;
 8002902:	e08e      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002904:	4b4b      	ldr	r3, [pc, #300]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x168>)
 8002906:	60bb      	str	r3, [r7, #8]
      break;
 8002908:	e08b      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800290a:	4948      	ldr	r1, [pc, #288]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x160>)
 800290c:	6849      	ldr	r1, [r1, #4]
 800290e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002912:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002914:	4945      	ldr	r1, [pc, #276]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002916:	6849      	ldr	r1, [r1, #4]
 8002918:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800291c:	2900      	cmp	r1, #0
 800291e:	d024      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002920:	4942      	ldr	r1, [pc, #264]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002922:	6849      	ldr	r1, [r1, #4]
 8002924:	0989      	lsrs	r1, r1, #6
 8002926:	4608      	mov	r0, r1
 8002928:	f04f 0100 	mov.w	r1, #0
 800292c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002930:	f04f 0500 	mov.w	r5, #0
 8002934:	ea00 0204 	and.w	r2, r0, r4
 8002938:	ea01 0305 	and.w	r3, r1, r5
 800293c:	493d      	ldr	r1, [pc, #244]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x168>)
 800293e:	fb01 f003 	mul.w	r0, r1, r3
 8002942:	2100      	movs	r1, #0
 8002944:	fb01 f102 	mul.w	r1, r1, r2
 8002948:	1844      	adds	r4, r0, r1
 800294a:	493a      	ldr	r1, [pc, #232]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x168>)
 800294c:	fba2 0101 	umull	r0, r1, r2, r1
 8002950:	1863      	adds	r3, r4, r1
 8002952:	4619      	mov	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	461a      	mov	r2, r3
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	f7fe f886 	bl	8000a6c <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4613      	mov	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e04a      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296a:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x160>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	461a      	mov	r2, r3
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	f240 10ff 	movw	r0, #511	; 0x1ff
 800297a:	f04f 0100 	mov.w	r1, #0
 800297e:	ea02 0400 	and.w	r4, r2, r0
 8002982:	ea03 0501 	and.w	r5, r3, r1
 8002986:	4620      	mov	r0, r4
 8002988:	4629      	mov	r1, r5
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	014b      	lsls	r3, r1, #5
 8002994:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002998:	0142      	lsls	r2, r0, #5
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	1b00      	subs	r0, r0, r4
 80029a0:	eb61 0105 	sbc.w	r1, r1, r5
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	018b      	lsls	r3, r1, #6
 80029ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029b2:	0182      	lsls	r2, r0, #6
 80029b4:	1a12      	subs	r2, r2, r0
 80029b6:	eb63 0301 	sbc.w	r3, r3, r1
 80029ba:	f04f 0000 	mov.w	r0, #0
 80029be:	f04f 0100 	mov.w	r1, #0
 80029c2:	00d9      	lsls	r1, r3, #3
 80029c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029c8:	00d0      	lsls	r0, r2, #3
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	1912      	adds	r2, r2, r4
 80029d0:	eb45 0303 	adc.w	r3, r5, r3
 80029d4:	f04f 0000 	mov.w	r0, #0
 80029d8:	f04f 0100 	mov.w	r1, #0
 80029dc:	0299      	lsls	r1, r3, #10
 80029de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80029e2:	0290      	lsls	r0, r2, #10
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	461a      	mov	r2, r3
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	f7fe f83a 	bl	8000a6c <__aeabi_uldivmod>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4613      	mov	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	0c1b      	lsrs	r3, r3, #16
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	60bb      	str	r3, [r7, #8]
      break;
 8002a1a:	e002      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a1e:	60bb      	str	r3, [r7, #8]
      break;
 8002a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a22:	68bb      	ldr	r3, [r7, #8]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	00f42400 	.word	0x00f42400
 8002a34:	017d7840 	.word	0x017d7840

08002a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000000 	.word	0x20000000

08002a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a54:	f7ff fff0 	bl	8002a38 <HAL_RCC_GetHCLKFreq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	0a9b      	lsrs	r3, r3, #10
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	4903      	ldr	r1, [pc, #12]	; (8002a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a66:	5ccb      	ldrb	r3, [r1, r3]
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40023800 	.word	0x40023800
 8002a74:	08007aa4 	.word	0x08007aa4

08002a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a7c:	f7ff ffdc 	bl	8002a38 <HAL_RCC_GetHCLKFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	0b5b      	lsrs	r3, r3, #13
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	4903      	ldr	r1, [pc, #12]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	08007aa4 	.word	0x08007aa4

08002aa0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	220f      	movs	r2, #15
 8002aae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ab0:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_RCC_GetClockConfig+0x5c>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0203 	and.w	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002abc:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <HAL_RCC_GetClockConfig+0x5c>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <HAL_RCC_GetClockConfig+0x5c>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_RCC_GetClockConfig+0x5c>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	08db      	lsrs	r3, r3, #3
 8002ada:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <HAL_RCC_GetClockConfig+0x60>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0207 	and.w	r2, r3, #7
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	601a      	str	r2, [r3, #0]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40023c00 	.word	0x40023c00

08002b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e041      	b.n	8002b9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f839 	bl	8002ba2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	4610      	mov	r0, r2
 8002b44:	f000 f9ca 	bl	8002edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d001      	beq.n	8002bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e044      	b.n	8002c5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1e      	ldr	r2, [pc, #120]	; (8002c68 <HAL_TIM_Base_Start_IT+0xb0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d018      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x6c>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfa:	d013      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x6c>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a1a      	ldr	r2, [pc, #104]	; (8002c6c <HAL_TIM_Base_Start_IT+0xb4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00e      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x6c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a19      	ldr	r2, [pc, #100]	; (8002c70 <HAL_TIM_Base_Start_IT+0xb8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d009      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x6c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <HAL_TIM_Base_Start_IT+0xbc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d004      	beq.n	8002c24 <HAL_TIM_Base_Start_IT+0x6c>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <HAL_TIM_Base_Start_IT+0xc0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d111      	bne.n	8002c48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b06      	cmp	r3, #6
 8002c34:	d010      	beq.n	8002c58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c46:	e007      	b.n	8002c58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40000800 	.word	0x40000800
 8002c74:	40000c00 	.word	0x40000c00
 8002c78:	40014000 	.word	0x40014000

08002c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d122      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d11b      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0202 	mvn.w	r2, #2
 8002ca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8ee 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002cc4:	e005      	b.n	8002cd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f8e0 	bl	8002e8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f8f1 	bl	8002eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d122      	bne.n	8002d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d11b      	bne.n	8002d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0204 	mvn.w	r2, #4
 8002cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2202      	movs	r2, #2
 8002d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f8c4 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002d18:	e005      	b.n	8002d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f8b6 	bl	8002e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f8c7 	bl	8002eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d122      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d11b      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0208 	mvn.w	r2, #8
 8002d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2204      	movs	r2, #4
 8002d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f89a 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002d6c:	e005      	b.n	8002d7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f88c 	bl	8002e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f89d 	bl	8002eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b10      	cmp	r3, #16
 8002d8c:	d122      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d11b      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0210 	mvn.w	r2, #16
 8002da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2208      	movs	r2, #8
 8002daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f870 	bl	8002ea0 <HAL_TIM_IC_CaptureCallback>
 8002dc0:	e005      	b.n	8002dce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f862 	bl	8002e8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f873 	bl	8002eb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d10e      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d107      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0201 	mvn.w	r2, #1
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fe fef6 	bl	8001bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0a:	2b80      	cmp	r3, #128	; 0x80
 8002e0c:	d10e      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	2b80      	cmp	r3, #128	; 0x80
 8002e1a:	d107      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f8e2 	bl	8002ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d10e      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e44:	2b40      	cmp	r3, #64	; 0x40
 8002e46:	d107      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f838 	bl	8002ec8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d10e      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d107      	bne.n	8002e84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0220 	mvn.w	r2, #32
 8002e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f8ac 	bl	8002fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a34      	ldr	r2, [pc, #208]	; (8002fc0 <TIM_Base_SetConfig+0xe4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00f      	beq.n	8002f14 <TIM_Base_SetConfig+0x38>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efa:	d00b      	beq.n	8002f14 <TIM_Base_SetConfig+0x38>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a31      	ldr	r2, [pc, #196]	; (8002fc4 <TIM_Base_SetConfig+0xe8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d007      	beq.n	8002f14 <TIM_Base_SetConfig+0x38>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a30      	ldr	r2, [pc, #192]	; (8002fc8 <TIM_Base_SetConfig+0xec>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d003      	beq.n	8002f14 <TIM_Base_SetConfig+0x38>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a2f      	ldr	r2, [pc, #188]	; (8002fcc <TIM_Base_SetConfig+0xf0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d108      	bne.n	8002f26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a25      	ldr	r2, [pc, #148]	; (8002fc0 <TIM_Base_SetConfig+0xe4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d01b      	beq.n	8002f66 <TIM_Base_SetConfig+0x8a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d017      	beq.n	8002f66 <TIM_Base_SetConfig+0x8a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <TIM_Base_SetConfig+0xe8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d013      	beq.n	8002f66 <TIM_Base_SetConfig+0x8a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a21      	ldr	r2, [pc, #132]	; (8002fc8 <TIM_Base_SetConfig+0xec>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00f      	beq.n	8002f66 <TIM_Base_SetConfig+0x8a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <TIM_Base_SetConfig+0xf0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00b      	beq.n	8002f66 <TIM_Base_SetConfig+0x8a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a1f      	ldr	r2, [pc, #124]	; (8002fd0 <TIM_Base_SetConfig+0xf4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d007      	beq.n	8002f66 <TIM_Base_SetConfig+0x8a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a1e      	ldr	r2, [pc, #120]	; (8002fd4 <TIM_Base_SetConfig+0xf8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d003      	beq.n	8002f66 <TIM_Base_SetConfig+0x8a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <TIM_Base_SetConfig+0xfc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d108      	bne.n	8002f78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <TIM_Base_SetConfig+0xe4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d103      	bne.n	8002fac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	615a      	str	r2, [r3, #20]
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40010000 	.word	0x40010000
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40000800 	.word	0x40000800
 8002fcc:	40000c00 	.word	0x40000c00
 8002fd0:	40014000 	.word	0x40014000
 8002fd4:	40014400 	.word	0x40014400
 8002fd8:	40014800 	.word	0x40014800

08002fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <__NVIC_SetPriority>:
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	6039      	str	r1, [r7, #0]
 800300e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003014:	2b00      	cmp	r3, #0
 8003016:	db0a      	blt.n	800302e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	b2da      	uxtb	r2, r3
 800301c:	490c      	ldr	r1, [pc, #48]	; (8003050 <__NVIC_SetPriority+0x4c>)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	0112      	lsls	r2, r2, #4
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	440b      	add	r3, r1
 8003028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800302c:	e00a      	b.n	8003044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	b2da      	uxtb	r2, r3
 8003032:	4908      	ldr	r1, [pc, #32]	; (8003054 <__NVIC_SetPriority+0x50>)
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	3b04      	subs	r3, #4
 800303c:	0112      	lsls	r2, r2, #4
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	440b      	add	r3, r1
 8003042:	761a      	strb	r2, [r3, #24]
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000e100 	.word	0xe000e100
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <SysTick_Handler+0x1c>)
 800305e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003060:	f002 f8da 	bl	8005218 <xTaskGetSchedulerState>
 8003064:	4603      	mov	r3, r0
 8003066:	2b01      	cmp	r3, #1
 8003068:	d001      	beq.n	800306e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800306a:	f003 f8d5 	bl	8006218 <xPortSysTickHandler>
  }
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	e000e010 	.word	0xe000e010

08003078 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800307c:	2100      	movs	r1, #0
 800307e:	f06f 0004 	mvn.w	r0, #4
 8003082:	f7ff ffbf 	bl	8003004 <__NVIC_SetPriority>
#endif
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003092:	f3ef 8305 	mrs	r3, IPSR
 8003096:	603b      	str	r3, [r7, #0]
  return(result);
 8003098:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800309e:	f06f 0305 	mvn.w	r3, #5
 80030a2:	607b      	str	r3, [r7, #4]
 80030a4:	e00c      	b.n	80030c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <osKernelInitialize+0x44>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <osKernelInitialize+0x44>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	e002      	b.n	80030c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80030ba:	f04f 33ff 	mov.w	r3, #4294967295
 80030be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030c0:	687b      	ldr	r3, [r7, #4]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	200000b4 	.word	0x200000b4

080030d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030da:	f3ef 8305 	mrs	r3, IPSR
 80030de:	603b      	str	r3, [r7, #0]
  return(result);
 80030e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80030e6:	f06f 0305 	mvn.w	r3, #5
 80030ea:	607b      	str	r3, [r7, #4]
 80030ec:	e010      	b.n	8003110 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <osKernelStart+0x48>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d109      	bne.n	800310a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80030f6:	f7ff ffbf 	bl	8003078 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <osKernelStart+0x48>)
 80030fc:	2202      	movs	r2, #2
 80030fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003100:	f001 fc0c 	bl	800491c <vTaskStartScheduler>
      stat = osOK;
 8003104:	2300      	movs	r3, #0
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	e002      	b.n	8003110 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800310a:	f04f 33ff 	mov.w	r3, #4294967295
 800310e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003110:	687b      	ldr	r3, [r7, #4]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200000b4 	.word	0x200000b4

08003120 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003120:	b580      	push	{r7, lr}
 8003122:	b08e      	sub	sp, #56	; 0x38
 8003124:	af04      	add	r7, sp, #16
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800312c:	2300      	movs	r3, #0
 800312e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003130:	f3ef 8305 	mrs	r3, IPSR
 8003134:	617b      	str	r3, [r7, #20]
  return(result);
 8003136:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003138:	2b00      	cmp	r3, #0
 800313a:	d17e      	bne.n	800323a <osThreadNew+0x11a>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d07b      	beq.n	800323a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003146:	2318      	movs	r3, #24
 8003148:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800314e:	f04f 33ff 	mov.w	r3, #4294967295
 8003152:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d045      	beq.n	80031e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <osThreadNew+0x48>
        name = attr->name;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <osThreadNew+0x6e>
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	2b38      	cmp	r3, #56	; 0x38
 8003180:	d805      	bhi.n	800318e <osThreadNew+0x6e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <osThreadNew+0x72>
        return (NULL);
 800318e:	2300      	movs	r3, #0
 8003190:	e054      	b.n	800323c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00e      	beq.n	80031c8 <osThreadNew+0xa8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	2b5b      	cmp	r3, #91	; 0x5b
 80031b0:	d90a      	bls.n	80031c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d006      	beq.n	80031c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <osThreadNew+0xa8>
        mem = 1;
 80031c2:	2301      	movs	r3, #1
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	e010      	b.n	80031ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10c      	bne.n	80031ea <osThreadNew+0xca>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d108      	bne.n	80031ea <osThreadNew+0xca>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d104      	bne.n	80031ea <osThreadNew+0xca>
          mem = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	e001      	b.n	80031ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d110      	bne.n	8003212 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031f8:	9202      	str	r2, [sp, #8]
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	6a3a      	ldr	r2, [r7, #32]
 8003204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f001 f9e7 	bl	80045da <xTaskCreateStatic>
 800320c:	4603      	mov	r3, r0
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	e013      	b.n	800323a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d110      	bne.n	800323a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	b29a      	uxth	r2, r3
 800321c:	f107 0310 	add.w	r3, r7, #16
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f001 fa32 	bl	8004694 <xTaskCreate>
 8003230:	4603      	mov	r3, r0
 8003232:	2b01      	cmp	r3, #1
 8003234:	d001      	beq.n	800323a <osThreadNew+0x11a>
            hTask = NULL;
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800323a:	693b      	ldr	r3, [r7, #16]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3728      	adds	r7, #40	; 0x28
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4a07      	ldr	r2, [pc, #28]	; (8003270 <vApplicationGetIdleTaskMemory+0x2c>)
 8003254:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4a06      	ldr	r2, [pc, #24]	; (8003274 <vApplicationGetIdleTaskMemory+0x30>)
 800325a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2280      	movs	r2, #128	; 0x80
 8003260:	601a      	str	r2, [r3, #0]
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	200000b8 	.word	0x200000b8
 8003274:	20000114 	.word	0x20000114

08003278 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4a07      	ldr	r2, [pc, #28]	; (80032a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003288:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	4a06      	ldr	r2, [pc, #24]	; (80032a8 <vApplicationGetTimerTaskMemory+0x30>)
 800328e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003296:	601a      	str	r2, [r3, #0]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	20000314 	.word	0x20000314
 80032a8:	20000370 	.word	0x20000370

080032ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f103 0208 	add.w	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295
 80032c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f103 0208 	add.w	r2, r3, #8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f103 0208 	add.w	r2, r3, #8
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	1c5a      	adds	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	601a      	str	r2, [r3, #0]
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d103      	bne.n	800336e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	e00c      	b.n	8003388 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3308      	adds	r3, #8
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	e002      	b.n	800337c <vListInsert+0x2e>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	429a      	cmp	r2, r3
 8003386:	d2f6      	bcs.n	8003376 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	601a      	str	r2, [r3, #0]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6892      	ldr	r2, [r2, #8]
 80033d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6852      	ldr	r2, [r2, #4]
 80033e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d103      	bne.n	80033f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	1e5a      	subs	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800343a:	bf00      	nop
 800343c:	e7fe      	b.n	800343c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800343e:	f002 fe59 	bl	80060f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	68f9      	ldr	r1, [r7, #12]
 800344c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	441a      	add	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	3b01      	subs	r3, #1
 8003470:	68f9      	ldr	r1, [r7, #12]
 8003472:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	441a      	add	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	22ff      	movs	r2, #255	; 0xff
 8003482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	22ff      	movs	r2, #255	; 0xff
 800348a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d114      	bne.n	80034be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01a      	beq.n	80034d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3310      	adds	r3, #16
 80034a0:	4618      	mov	r0, r3
 80034a2:	f001 fcc5 	bl	8004e30 <xTaskRemoveFromEventList>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d012      	beq.n	80034d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034ac:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <xQueueGenericReset+0xcc>)
 80034ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	e009      	b.n	80034d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3310      	adds	r3, #16
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fef2 	bl	80032ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3324      	adds	r3, #36	; 0x24
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff feed 	bl	80032ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034d2:	f002 fe3f 	bl	8006154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034d6:	2301      	movs	r3, #1
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	e000ed04 	.word	0xe000ed04

080034e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08e      	sub	sp, #56	; 0x38
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003526:	bf00      	nop
 8003528:	e7fe      	b.n	8003528 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <xQueueGenericCreateStatic+0x52>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <xQueueGenericCreateStatic+0x56>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <xQueueGenericCreateStatic+0x58>
 800353a:	2300      	movs	r3, #0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	623b      	str	r3, [r7, #32]
}
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <xQueueGenericCreateStatic+0x7e>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <xQueueGenericCreateStatic+0x82>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <xQueueGenericCreateStatic+0x84>
 8003566:	2300      	movs	r3, #0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10a      	bne.n	8003582 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	61fb      	str	r3, [r7, #28]
}
 800357e:	bf00      	nop
 8003580:	e7fe      	b.n	8003580 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003582:	2350      	movs	r3, #80	; 0x50
 8003584:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b50      	cmp	r3, #80	; 0x50
 800358a:	d00a      	beq.n	80035a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	61bb      	str	r3, [r7, #24]
}
 800359e:	bf00      	nop
 80035a0:	e7fe      	b.n	80035a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00d      	beq.n	80035ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	4613      	mov	r3, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f805 	bl	80035d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3730      	adds	r7, #48	; 0x30
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d103      	bne.n	80035f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e002      	b.n	80035f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003602:	2101      	movs	r1, #1
 8003604:	69b8      	ldr	r0, [r7, #24]
 8003606:	f7ff ff05 	bl	8003414 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003612:	bf00      	nop
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08e      	sub	sp, #56	; 0x38
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800362a:	2300      	movs	r3, #0
 800362c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <xQueueGenericSend+0x32>
	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800364a:	bf00      	nop
 800364c:	e7fe      	b.n	800364c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d103      	bne.n	800365c <xQueueGenericSend+0x40>
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <xQueueGenericSend+0x44>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <xQueueGenericSend+0x46>
 8003660:	2300      	movs	r3, #0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10a      	bne.n	800367c <xQueueGenericSend+0x60>
	__asm volatile
 8003666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003678:	bf00      	nop
 800367a:	e7fe      	b.n	800367a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d103      	bne.n	800368a <xQueueGenericSend+0x6e>
 8003682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <xQueueGenericSend+0x72>
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <xQueueGenericSend+0x74>
 800368e:	2300      	movs	r3, #0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <xQueueGenericSend+0x8e>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	623b      	str	r3, [r7, #32]
}
 80036a6:	bf00      	nop
 80036a8:	e7fe      	b.n	80036a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036aa:	f001 fdb5 	bl	8005218 <xTaskGetSchedulerState>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <xQueueGenericSend+0x9e>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <xQueueGenericSend+0xa2>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <xQueueGenericSend+0xa4>
 80036be:	2300      	movs	r3, #0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10a      	bne.n	80036da <xQueueGenericSend+0xbe>
	__asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	61fb      	str	r3, [r7, #28]
}
 80036d6:	bf00      	nop
 80036d8:	e7fe      	b.n	80036d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036da:	f002 fd0b 	bl	80060f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <xQueueGenericSend+0xd4>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d129      	bne.n	8003744 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036f6:	f000 fa0b 	bl	8003b10 <prvCopyDataToQueue>
 80036fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	2b00      	cmp	r3, #0
 8003702:	d010      	beq.n	8003726 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	3324      	adds	r3, #36	; 0x24
 8003708:	4618      	mov	r0, r3
 800370a:	f001 fb91 	bl	8004e30 <xTaskRemoveFromEventList>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d013      	beq.n	800373c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003714:	4b3f      	ldr	r3, [pc, #252]	; (8003814 <xQueueGenericSend+0x1f8>)
 8003716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	e00a      	b.n	800373c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800372c:	4b39      	ldr	r3, [pc, #228]	; (8003814 <xQueueGenericSend+0x1f8>)
 800372e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800373c:	f002 fd0a 	bl	8006154 <vPortExitCritical>
				return pdPASS;
 8003740:	2301      	movs	r3, #1
 8003742:	e063      	b.n	800380c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d103      	bne.n	8003752 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800374a:	f002 fd03 	bl	8006154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800374e:	2300      	movs	r3, #0
 8003750:	e05c      	b.n	800380c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003758:	f107 0314 	add.w	r3, r7, #20
 800375c:	4618      	mov	r0, r3
 800375e:	f001 fbf1 	bl	8004f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003762:	2301      	movs	r3, #1
 8003764:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003766:	f002 fcf5 	bl	8006154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800376a:	f001 f93d 	bl	80049e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800376e:	f002 fcc1 	bl	80060f4 <vPortEnterCritical>
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003778:	b25b      	sxtb	r3, r3
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377e:	d103      	bne.n	8003788 <xQueueGenericSend+0x16c>
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800378e:	b25b      	sxtb	r3, r3
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d103      	bne.n	800379e <xQueueGenericSend+0x182>
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800379e:	f002 fcd9 	bl	8006154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037a2:	1d3a      	adds	r2, r7, #4
 80037a4:	f107 0314 	add.w	r3, r7, #20
 80037a8:	4611      	mov	r1, r2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 fbe0 	bl	8004f70 <xTaskCheckForTimeOut>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d124      	bne.n	8003800 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037b8:	f000 faa2 	bl	8003d00 <prvIsQueueFull>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d018      	beq.n	80037f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	3310      	adds	r3, #16
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	4611      	mov	r1, r2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 fae0 	bl	8004d90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037d2:	f000 fa2d 	bl	8003c30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037d6:	f001 f915 	bl	8004a04 <xTaskResumeAll>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f47f af7c 	bne.w	80036da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <xQueueGenericSend+0x1f8>)
 80037e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	e772      	b.n	80036da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037f6:	f000 fa1b 	bl	8003c30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037fa:	f001 f903 	bl	8004a04 <xTaskResumeAll>
 80037fe:	e76c      	b.n	80036da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003802:	f000 fa15 	bl	8003c30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003806:	f001 f8fd 	bl	8004a04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800380a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800380c:	4618      	mov	r0, r3
 800380e:	3738      	adds	r7, #56	; 0x38
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	e000ed04 	.word	0xe000ed04

08003818 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b090      	sub	sp, #64	; 0x40
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800382a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d103      	bne.n	8003854 <xQueueGenericSendFromISR+0x3c>
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <xQueueGenericSendFromISR+0x40>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <xQueueGenericSendFromISR+0x42>
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003870:	bf00      	nop
 8003872:	e7fe      	b.n	8003872 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d103      	bne.n	8003882 <xQueueGenericSendFromISR+0x6a>
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <xQueueGenericSendFromISR+0x6e>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <xQueueGenericSendFromISR+0x70>
 8003886:	2300      	movs	r3, #0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10a      	bne.n	80038a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	623b      	str	r3, [r7, #32]
}
 800389e:	bf00      	nop
 80038a0:	e7fe      	b.n	80038a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038a2:	f002 fd09 	bl	80062b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038a6:	f3ef 8211 	mrs	r2, BASEPRI
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	61fa      	str	r2, [r7, #28]
 80038bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80038be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d302      	bcc.n	80038d4 <xQueueGenericSendFromISR+0xbc>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d12f      	bne.n	8003934 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038ea:	f000 f911 	bl	8003b10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80038f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f6:	d112      	bne.n	800391e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d016      	beq.n	800392e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003902:	3324      	adds	r3, #36	; 0x24
 8003904:	4618      	mov	r0, r3
 8003906:	f001 fa93 	bl	8004e30 <xTaskRemoveFromEventList>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00e      	beq.n	800392e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00b      	beq.n	800392e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	e007      	b.n	800392e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800391e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003922:	3301      	adds	r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	b25a      	sxtb	r2, r3
 8003928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800392e:	2301      	movs	r3, #1
 8003930:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003932:	e001      	b.n	8003938 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003934:	2300      	movs	r3, #0
 8003936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003942:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003946:	4618      	mov	r0, r3
 8003948:	3740      	adds	r7, #64	; 0x40
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08c      	sub	sp, #48	; 0x30
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800395c:	2300      	movs	r3, #0
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10a      	bne.n	8003980 <xQueueReceive+0x30>
	__asm volatile
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	623b      	str	r3, [r7, #32]
}
 800397c:	bf00      	nop
 800397e:	e7fe      	b.n	800397e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d103      	bne.n	800398e <xQueueReceive+0x3e>
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <xQueueReceive+0x42>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <xQueueReceive+0x44>
 8003992:	2300      	movs	r3, #0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <xQueueReceive+0x5e>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	61fb      	str	r3, [r7, #28]
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039ae:	f001 fc33 	bl	8005218 <xTaskGetSchedulerState>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d102      	bne.n	80039be <xQueueReceive+0x6e>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <xQueueReceive+0x72>
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <xQueueReceive+0x74>
 80039c2:	2300      	movs	r3, #0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <xQueueReceive+0x8e>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	61bb      	str	r3, [r7, #24]
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039de:	f002 fb89 	bl	80060f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01f      	beq.n	8003a2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039f2:	f000 f8f7 	bl	8003be4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	1e5a      	subs	r2, r3, #1
 80039fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00f      	beq.n	8003a26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	3310      	adds	r3, #16
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 fa10 	bl	8004e30 <xTaskRemoveFromEventList>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a16:	4b3d      	ldr	r3, [pc, #244]	; (8003b0c <xQueueReceive+0x1bc>)
 8003a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a26:	f002 fb95 	bl	8006154 <vPortExitCritical>
				return pdPASS;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e069      	b.n	8003b02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d103      	bne.n	8003a3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a34:	f002 fb8e 	bl	8006154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e062      	b.n	8003b02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a42:	f107 0310 	add.w	r3, r7, #16
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 fa7c 	bl	8004f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a50:	f002 fb80 	bl	8006154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a54:	f000 ffc8 	bl	80049e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a58:	f002 fb4c 	bl	80060f4 <vPortEnterCritical>
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a62:	b25b      	sxtb	r3, r3
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d103      	bne.n	8003a72 <xQueueReceive+0x122>
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a78:	b25b      	sxtb	r3, r3
 8003a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7e:	d103      	bne.n	8003a88 <xQueueReceive+0x138>
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a88:	f002 fb64 	bl	8006154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a8c:	1d3a      	adds	r2, r7, #4
 8003a8e:	f107 0310 	add.w	r3, r7, #16
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 fa6b 	bl	8004f70 <xTaskCheckForTimeOut>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d123      	bne.n	8003ae8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aa2:	f000 f917 	bl	8003cd4 <prvIsQueueEmpty>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d017      	beq.n	8003adc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	3324      	adds	r3, #36	; 0x24
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f001 f96b 	bl	8004d90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003abc:	f000 f8b8 	bl	8003c30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ac0:	f000 ffa0 	bl	8004a04 <xTaskResumeAll>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d189      	bne.n	80039de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003aca:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <xQueueReceive+0x1bc>)
 8003acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	e780      	b.n	80039de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ade:	f000 f8a7 	bl	8003c30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ae2:	f000 ff8f 	bl	8004a04 <xTaskResumeAll>
 8003ae6:	e77a      	b.n	80039de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aea:	f000 f8a1 	bl	8003c30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003aee:	f000 ff89 	bl	8004a04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003af4:	f000 f8ee 	bl	8003cd4 <prvIsQueueEmpty>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f43f af6f 	beq.w	80039de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3730      	adds	r7, #48	; 0x30
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	e000ed04 	.word	0xe000ed04

08003b10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10d      	bne.n	8003b4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d14d      	bne.n	8003bd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 fb8a 	bl	8005254 <xTaskPriorityDisinherit>
 8003b40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	e043      	b.n	8003bd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d119      	bne.n	8003b84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6858      	ldr	r0, [r3, #4]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	461a      	mov	r2, r3
 8003b5a:	68b9      	ldr	r1, [r7, #8]
 8003b5c:	f002 fe00 	bl	8006760 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	441a      	add	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d32b      	bcc.n	8003bd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	e026      	b.n	8003bd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	68d8      	ldr	r0, [r3, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68b9      	ldr	r1, [r7, #8]
 8003b90:	f002 fde6 	bl	8006760 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	425b      	negs	r3, r3
 8003b9e:	441a      	add	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d207      	bcs.n	8003bc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	425b      	negs	r3, r3
 8003bba:	441a      	add	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d105      	bne.n	8003bd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003bda:	697b      	ldr	r3, [r7, #20]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d018      	beq.n	8003c28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	441a      	add	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d303      	bcc.n	8003c18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68d9      	ldr	r1, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	461a      	mov	r2, r3
 8003c22:	6838      	ldr	r0, [r7, #0]
 8003c24:	f002 fd9c 	bl	8006760 <memcpy>
	}
}
 8003c28:	bf00      	nop
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c38:	f002 fa5c 	bl	80060f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c44:	e011      	b.n	8003c6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d012      	beq.n	8003c74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3324      	adds	r3, #36	; 0x24
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 f8ec 	bl	8004e30 <xTaskRemoveFromEventList>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c5e:	f001 f9e9 	bl	8005034 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	dce9      	bgt.n	8003c46 <prvUnlockQueue+0x16>
 8003c72:	e000      	b.n	8003c76 <prvUnlockQueue+0x46>
					break;
 8003c74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	22ff      	movs	r2, #255	; 0xff
 8003c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c7e:	f002 fa69 	bl	8006154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c82:	f002 fa37 	bl	80060f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c8e:	e011      	b.n	8003cb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d012      	beq.n	8003cbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3310      	adds	r3, #16
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f001 f8c7 	bl	8004e30 <xTaskRemoveFromEventList>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ca8:	f001 f9c4 	bl	8005034 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003cac:	7bbb      	ldrb	r3, [r7, #14]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	dce9      	bgt.n	8003c90 <prvUnlockQueue+0x60>
 8003cbc:	e000      	b.n	8003cc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003cbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	22ff      	movs	r2, #255	; 0xff
 8003cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003cc8:	f002 fa44 	bl	8006154 <vPortExitCritical>
}
 8003ccc:	bf00      	nop
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cdc:	f002 fa0a 	bl	80060f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d102      	bne.n	8003cee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e001      	b.n	8003cf2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cf2:	f002 fa2f 	bl	8006154 <vPortExitCritical>

	return xReturn;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d08:	f002 f9f4 	bl	80060f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d102      	bne.n	8003d1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	e001      	b.n	8003d22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d22:	f002 fa17 	bl	8006154 <vPortExitCritical>

	return xReturn;
 8003d26:	68fb      	ldr	r3, [r7, #12]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	e014      	b.n	8003d6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d40:	4a0f      	ldr	r2, [pc, #60]	; (8003d80 <vQueueAddToRegistry+0x50>)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10b      	bne.n	8003d64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d4c:	490c      	ldr	r1, [pc, #48]	; (8003d80 <vQueueAddToRegistry+0x50>)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d56:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <vQueueAddToRegistry+0x50>)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d62:	e006      	b.n	8003d72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3301      	adds	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b07      	cmp	r3, #7
 8003d6e:	d9e7      	bls.n	8003d40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20004a40 	.word	0x20004a40

08003d84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d94:	f002 f9ae 	bl	80060f4 <vPortEnterCritical>
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d9e:	b25b      	sxtb	r3, r3
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da4:	d103      	bne.n	8003dae <vQueueWaitForMessageRestricted+0x2a>
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003db4:	b25b      	sxtb	r3, r3
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dba:	d103      	bne.n	8003dc4 <vQueueWaitForMessageRestricted+0x40>
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dc4:	f002 f9c6 	bl	8006154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	3324      	adds	r3, #36	; 0x24
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fffd 	bl	8004dd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003dde:	6978      	ldr	r0, [r7, #20]
 8003de0:	f7ff ff26 	bl	8003c30 <prvUnlockQueue>
	}
 8003de4:	bf00      	nop
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08c      	sub	sp, #48	; 0x30
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d110      	bne.n	8003e20 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d81b      	bhi.n	8003e42 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	61fb      	str	r3, [r7, #28]
}
 8003e1c:	bf00      	nop
 8003e1e:	e7fe      	b.n	8003e1e <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	61bb      	str	r3, [r7, #24]
}
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d90a      	bls.n	8003e60 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	617b      	str	r3, [r7, #20]
}
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8003e66:	2301      	movs	r3, #1
 8003e68:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3324      	adds	r3, #36	; 0x24
 8003e74:	4618      	mov	r0, r3
 8003e76:	f002 fa5f 	bl	8006338 <pvPortMalloc>
 8003e7a:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8003e88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	6a38      	ldr	r0, [r7, #32]
 8003e94:	f000 fb6e 	bl	8004574 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8003e98:	6a3b      	ldr	r3, [r7, #32]
	}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3728      	adds	r7, #40	; 0x28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b087      	sub	sp, #28
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	60fb      	str	r3, [r7, #12]
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d304      	bcc.n	8003efa <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8003efa:	697b      	ldr	r3, [r7, #20]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b090      	sub	sp, #64	; 0x40
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <xStreamBufferSend+0x36>
	__asm volatile
 8003f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f3a:	bf00      	nop
 8003f3c:	e7fe      	b.n	8003f3c <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10a      	bne.n	8003f5a <xStreamBufferSend+0x52>
	__asm volatile
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	623b      	str	r3, [r7, #32]
}
 8003f56:	bf00      	nop
 8003f58:	e7fe      	b.n	8003f58 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	7f1b      	ldrb	r3, [r3, #28]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d011      	beq.n	8003f8a <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	3304      	adds	r3, #4
 8003f6a:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8003f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d80a      	bhi.n	8003f8a <xStreamBufferSend+0x82>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	f383 8811 	msr	BASEPRI, r3
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	61fb      	str	r3, [r7, #28]
}
 8003f86:	bf00      	nop
 8003f88:	e7fe      	b.n	8003f88 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d03e      	beq.n	800400e <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8003f90:	f107 0310 	add.w	r3, r7, #16
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 ffaf 	bl	8004ef8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8003f9a:	f002 f8ab 	bl	80060f4 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8003f9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fa0:	f7ff ff7f 	bl	8003ea2 <xStreamBufferSpacesAvailable>
 8003fa4:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8003fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d217      	bcs.n	8003fde <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8003fae:	2000      	movs	r0, #0
 8003fb0:	f001 fbac 	bl	800570c <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8003fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <xStreamBufferSend+0xca>
	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	61bb      	str	r3, [r7, #24]
}
 8003fce:	bf00      	nop
 8003fd0:	e7fe      	b.n	8003fd0 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8003fd2:	f001 f911 	bl	80051f8 <xTaskGetCurrentTaskHandle>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fda:	615a      	str	r2, [r3, #20]
 8003fdc:	e002      	b.n	8003fe4 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8003fde:	f002 f8b9 	bl	8006154 <vPortExitCritical>
					break;
 8003fe2:	e014      	b.n	800400e <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8003fe4:	f002 f8b6 	bl	8006154 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2200      	movs	r2, #0
 8003fec:	2100      	movs	r1, #0
 8003fee:	2000      	movs	r0, #0
 8003ff0:	f001 f99e 	bl	8005330 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8003ffa:	463a      	mov	r2, r7
 8003ffc:	f107 0310 	add.w	r3, r7, #16
 8004000:	4611      	mov	r1, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f000 ffb4 	bl	8004f70 <xTaskCheckForTimeOut>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0c5      	beq.n	8003f9a <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800400e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004010:	2b00      	cmp	r3, #0
 8004012:	d103      	bne.n	800401c <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8004014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004016:	f7ff ff44 	bl	8003ea2 <xStreamBufferSpacesAvailable>
 800401a:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004028:	f000 f894 	bl	8004154 <prvWriteMessageToBuffer>
 800402c:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	2b00      	cmp	r3, #0
 8004032:	d019      	beq.n	8004068 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8004034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004036:	f000 fa7d 	bl	8004534 <prvBytesInBuffer>
 800403a:	4602      	mov	r2, r0
 800403c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	429a      	cmp	r2, r3
 8004042:	d311      	bcc.n	8004068 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8004044:	f000 fcd0 	bl	80049e8 <vTaskSuspendAll>
 8004048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d009      	beq.n	8004064 <xStreamBufferSend+0x15c>
 8004050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004052:	6918      	ldr	r0, [r3, #16]
 8004054:	2300      	movs	r3, #0
 8004056:	2200      	movs	r2, #0
 8004058:	2100      	movs	r1, #0
 800405a:	f001 f9c3 	bl	80053e4 <xTaskGenericNotify>
 800405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004060:	2200      	movs	r2, #0
 8004062:	611a      	str	r2, [r3, #16]
 8004064:	f000 fcce 	bl	8004a04 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8004068:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800406a:	4618      	mov	r0, r3
 800406c:	3738      	adds	r7, #56	; 0x38
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b090      	sub	sp, #64	; 0x40
 8004076:	af02      	add	r7, sp, #8
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <xStreamBufferSendFromISR+0x32>
	__asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	623b      	str	r3, [r7, #32]
}
 80040a0:	bf00      	nop
 80040a2:	e7fe      	b.n	80040a2 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	61fb      	str	r3, [r7, #28]
}
 80040bc:	bf00      	nop
 80040be:	e7fe      	b.n	80040be <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	7f1b      	ldrb	r3, [r3, #28]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80040cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ce:	3304      	adds	r3, #4
 80040d0:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80040d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040d4:	f7ff fee5 	bl	8003ea2 <xStreamBufferSpacesAvailable>
 80040d8:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80040da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	68b9      	ldr	r1, [r7, #8]
 80040e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040e6:	f000 f835 	bl	8004154 <prvWriteMessageToBuffer>
 80040ea:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d02b      	beq.n	800414a <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80040f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040f4:	f000 fa1e 	bl	8004534 <prvBytesInBuffer>
 80040f8:	4602      	mov	r2, r0
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d323      	bcc.n	800414a <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 8004102:	f3ef 8211 	mrs	r2, BASEPRI
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	61ba      	str	r2, [r7, #24]
 8004118:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800411a:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00b      	beq.n	800413e <xStreamBufferSendFromISR+0xcc>
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	6918      	ldr	r0, [r3, #16]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	2300      	movs	r3, #0
 8004130:	2200      	movs	r2, #0
 8004132:	2100      	movs	r1, #0
 8004134:	f001 fa0e 	bl	8005554 <xTaskGenericNotifyFromISR>
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	2200      	movs	r2, #0
 800413c:	611a      	str	r2, [r3, #16]
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f383 8811 	msr	BASEPRI, r3
}
 8004148:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 800414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800414c:	4618      	mov	r0, r3
 800414e:	3738      	adds	r7, #56	; 0x38
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	e01d      	b.n	80041aa <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	7f1b      	ldrb	r3, [r3, #28]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d108      	bne.n	800418c <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800417a:	2301      	movs	r3, #1
 800417c:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	4293      	cmp	r3, r2
 8004184:	bf28      	it	cs
 8004186:	4613      	movcs	r3, r2
 8004188:	607b      	str	r3, [r7, #4]
 800418a:	e00e      	b.n	80041aa <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	429a      	cmp	r2, r3
 8004192:	d308      	bcc.n	80041a6 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8004194:	2301      	movs	r3, #1
 8004196:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004198:	1d3b      	adds	r3, r7, #4
 800419a:	2204      	movs	r2, #4
 800419c:	4619      	mov	r1, r3
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f8dc 	bl	800435c <prvWriteBytesToBuffer>
 80041a4:	e001      	b.n	80041aa <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	461a      	mov	r2, r3
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f8d0 	bl	800435c <prvWriteBytesToBuffer>
 80041bc:	6138      	str	r0, [r7, #16]
 80041be:	e001      	b.n	80041c4 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 80041c4:	693b      	ldr	r3, [r7, #16]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b08e      	sub	sp, #56	; 0x38
 80041d2:	af02      	add	r7, sp, #8
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	607a      	str	r2, [r7, #4]
 80041da:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80041e0:	2300      	movs	r3, #0
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <xStreamBufferReceive+0x32>
	__asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	61fb      	str	r3, [r7, #28]
}
 80041fc:	bf00      	nop
 80041fe:	e7fe      	b.n	80041fe <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10a      	bne.n	800421c <xStreamBufferReceive+0x4e>
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	61bb      	str	r3, [r7, #24]
}
 8004218:	bf00      	nop
 800421a:	e7fe      	b.n	800421a <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	7f1b      	ldrb	r3, [r3, #28]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004228:	2304      	movs	r3, #4
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
 800422c:	e001      	b.n	8004232 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800422e:	2300      	movs	r3, #0
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d034      	beq.n	80042a2 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8004238:	f001 ff5c 	bl	80060f4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800423c:	6a38      	ldr	r0, [r7, #32]
 800423e:	f000 f979 	bl	8004534 <prvBytesInBuffer>
 8004242:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8004244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	429a      	cmp	r2, r3
 800424a:	d816      	bhi.n	800427a <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800424c:	2000      	movs	r0, #0
 800424e:	f001 fa5d 	bl	800570c <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <xStreamBufferReceive+0xa2>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	617b      	str	r3, [r7, #20]
}
 800426c:	bf00      	nop
 800426e:	e7fe      	b.n	800426e <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8004270:	f000 ffc2 	bl	80051f8 <xTaskGetCurrentTaskHandle>
 8004274:	4602      	mov	r2, r0
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800427a:	f001 ff6b 	bl	8006154 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800427e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	429a      	cmp	r2, r3
 8004284:	d811      	bhi.n	80042aa <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2200      	movs	r2, #0
 800428a:	2100      	movs	r1, #0
 800428c:	2000      	movs	r0, #0
 800428e:	f001 f84f 	bl	8005330 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	2200      	movs	r2, #0
 8004296:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004298:	6a38      	ldr	r0, [r7, #32]
 800429a:	f000 f94b 	bl	8004534 <prvBytesInBuffer>
 800429e:	62b8      	str	r0, [r7, #40]	; 0x28
 80042a0:	e003      	b.n	80042aa <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80042a2:	6a38      	ldr	r0, [r7, #32]
 80042a4:	f000 f946 	bl	8004534 <prvBytesInBuffer>
 80042a8:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80042aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d91d      	bls.n	80042ee <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	6a38      	ldr	r0, [r7, #32]
 80042be:	f000 f81b 	bl	80042f8 <prvReadMessageFromBuffer>
 80042c2:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d011      	beq.n	80042ee <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80042ca:	f000 fb8d 	bl	80049e8 <vTaskSuspendAll>
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d009      	beq.n	80042ea <xStreamBufferReceive+0x11c>
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	6958      	ldr	r0, [r3, #20]
 80042da:	2300      	movs	r3, #0
 80042dc:	2200      	movs	r2, #0
 80042de:	2100      	movs	r1, #0
 80042e0:	f001 f880 	bl	80053e4 <xTaskGenericNotify>
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	2200      	movs	r2, #0
 80042e8:	615a      	str	r2, [r3, #20]
 80042ea:	f000 fb8b 	bl	8004a04 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3730      	adds	r7, #48	; 0x30
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	2b00      	cmp	r3, #0
 800430a:	d019      	beq.n	8004340 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8004312:	f107 0110 	add.w	r1, r7, #16
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f890 	bl	8004440 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	429a      	cmp	r2, r3
 8004332:	d907      	bls.n	8004344 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	e001      	b.n	8004344 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f878 	bl	8004440 <prvReadBytesFromBuffer>
 8004350:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8004352:	697b      	ldr	r3, [r7, #20]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3720      	adds	r7, #32
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10a      	bne.n	8004384 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	61fb      	str	r3, [r7, #28]
}
 8004380:	bf00      	nop
 8004382:	e7fe      	b.n	8004382 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	4293      	cmp	r3, r2
 8004396:	bf28      	it	cs
 8004398:	4613      	movcs	r3, r2
 800439a:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800439c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	441a      	add	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d90a      	bls.n	80043c0 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	61bb      	str	r3, [r7, #24]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	699a      	ldr	r2, [r3, #24]
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	4413      	add	r3, r2
 80043c8:	6a3a      	ldr	r2, [r7, #32]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f002 f9c7 	bl	8006760 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d91c      	bls.n	8004414 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	1ad2      	subs	r2, r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d90a      	bls.n	80043fe <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	617b      	str	r3, [r7, #20]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6998      	ldr	r0, [r3, #24]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	18d1      	adds	r1, r2, r3
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	461a      	mov	r2, r3
 8004410:	f002 f9a6 	bl	8006760 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8004414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4413      	add	r3, r2
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004422:	429a      	cmp	r2, r3
 8004424:	d304      	bcc.n	8004430 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004434:	605a      	str	r2, [r3, #4]

	return xCount;
 8004436:	687b      	ldr	r3, [r7, #4]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3728      	adds	r7, #40	; 0x28
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	; 0x28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	4293      	cmp	r3, r2
 8004454:	bf28      	it	cs
 8004456:	4613      	movcs	r3, r2
 8004458:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d064      	beq.n	800452a <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	6a3a      	ldr	r2, [r7, #32]
 8004470:	4293      	cmp	r3, r2
 8004472:	bf28      	it	cs
 8004474:	4613      	movcs	r3, r2
 8004476:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	429a      	cmp	r2, r3
 800447e:	d90a      	bls.n	8004496 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	61bb      	str	r3, [r7, #24]
}
 8004492:	bf00      	nop
 8004494:	e7fe      	b.n	8004494 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8004496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	441a      	add	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d90a      	bls.n	80044ba <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	617b      	str	r3, [r7, #20]
}
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	4413      	add	r3, r2
 80044c2:	69fa      	ldr	r2, [r7, #28]
 80044c4:	4619      	mov	r1, r3
 80044c6:	68b8      	ldr	r0, [r7, #8]
 80044c8:	f002 f94a 	bl	8006760 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80044cc:	6a3a      	ldr	r2, [r7, #32]
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d919      	bls.n	8004508 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80044d4:	6a3a      	ldr	r2, [r7, #32]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d90a      	bls.n	80044f2 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	613b      	str	r3, [r7, #16]
}
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	18d0      	adds	r0, r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6999      	ldr	r1, [r3, #24]
 80044fc:	6a3a      	ldr	r2, [r7, #32]
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	461a      	mov	r2, r3
 8004504:	f002 f92c 	bl	8006760 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8004508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	4413      	add	r3, r2
 800450e:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004516:	429a      	cmp	r2, r3
 8004518:	d304      	bcc.n	8004524 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004528:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800452a:	6a3b      	ldr	r3, [r7, #32]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3728      	adds	r7, #40	; 0x28
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	4413      	add	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	429a      	cmp	r2, r3
 800455a:	d304      	bcc.n	8004566 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8004566:	68fb      	ldr	r3, [r7, #12]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8004582:	2355      	movs	r3, #85	; 0x55
 8004584:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6979      	ldr	r1, [r7, #20]
 800458a:	68b8      	ldr	r0, [r7, #8]
 800458c:	f002 f8f6 	bl	800677c <memset>
 8004590:	4602      	mov	r2, r0
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	4293      	cmp	r3, r2
 8004596:	d00a      	beq.n	80045ae <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	613b      	str	r3, [r7, #16]
}
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80045ae:	2224      	movs	r2, #36	; 0x24
 80045b0:	2100      	movs	r1, #0
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f002 f8e2 	bl	800677c <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80045d0:	771a      	strb	r2, [r3, #28]
}
 80045d2:	bf00      	nop
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b08e      	sub	sp, #56	; 0x38
 80045de:	af04      	add	r7, sp, #16
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
 80045e6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <xTaskCreateStatic+0x2a>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	623b      	str	r3, [r7, #32]
}
 8004600:	bf00      	nop
 8004602:	e7fe      	b.n	8004602 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10a      	bne.n	8004620 <xTaskCreateStatic+0x46>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	61fb      	str	r3, [r7, #28]
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004620:	235c      	movs	r3, #92	; 0x5c
 8004622:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	2b5c      	cmp	r3, #92	; 0x5c
 8004628:	d00a      	beq.n	8004640 <xTaskCreateStatic+0x66>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	61bb      	str	r3, [r7, #24]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004640:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01e      	beq.n	8004686 <xTaskCreateStatic+0xac>
 8004648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01b      	beq.n	8004686 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004656:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	2202      	movs	r2, #2
 800465c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004660:	2300      	movs	r3, #0
 8004662:	9303      	str	r3, [sp, #12]
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	9302      	str	r3, [sp, #8]
 8004668:	f107 0314 	add.w	r3, r7, #20
 800466c:	9301      	str	r3, [sp, #4]
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f850 	bl	800471e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800467e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004680:	f000 f8dc 	bl	800483c <prvAddNewTaskToReadyList>
 8004684:	e001      	b.n	800468a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800468a:	697b      	ldr	r3, [r7, #20]
	}
 800468c:	4618      	mov	r0, r3
 800468e:	3728      	adds	r7, #40	; 0x28
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08c      	sub	sp, #48	; 0x30
 8004698:	af04      	add	r7, sp, #16
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046a4:	88fb      	ldrh	r3, [r7, #6]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 fe45 	bl	8006338 <pvPortMalloc>
 80046ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00e      	beq.n	80046d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046b6:	205c      	movs	r0, #92	; 0x5c
 80046b8:	f001 fe3e 	bl	8006338 <pvPortMalloc>
 80046bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	631a      	str	r2, [r3, #48]	; 0x30
 80046ca:	e005      	b.n	80046d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046cc:	6978      	ldr	r0, [r7, #20]
 80046ce:	f001 feff 	bl	80064d0 <vPortFree>
 80046d2:	e001      	b.n	80046d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d017      	beq.n	800470e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	2300      	movs	r3, #0
 80046ea:	9303      	str	r3, [sp, #12]
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	9302      	str	r3, [sp, #8]
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f80e 	bl	800471e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004702:	69f8      	ldr	r0, [r7, #28]
 8004704:	f000 f89a 	bl	800483c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004708:	2301      	movs	r3, #1
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	e002      	b.n	8004714 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295
 8004712:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004714:	69bb      	ldr	r3, [r7, #24]
	}
 8004716:	4618      	mov	r0, r3
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b088      	sub	sp, #32
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	461a      	mov	r2, r3
 8004736:	21a5      	movs	r1, #165	; 0xa5
 8004738:	f002 f820 	bl	800677c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004746:	3b01      	subs	r3, #1
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f023 0307 	bic.w	r3, r3, #7
 8004754:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	617b      	str	r3, [r7, #20]
}
 8004772:	bf00      	nop
 8004774:	e7fe      	b.n	8004774 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01f      	beq.n	80047bc <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
 8004780:	e012      	b.n	80047a8 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	4413      	add	r3, r2
 8004788:	7819      	ldrb	r1, [r3, #0]
 800478a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	4413      	add	r3, r2
 8004790:	3334      	adds	r3, #52	; 0x34
 8004792:	460a      	mov	r2, r1
 8004794:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	4413      	add	r3, r2
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d006      	beq.n	80047b0 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	3301      	adds	r3, #1
 80047a6:	61fb      	str	r3, [r7, #28]
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	2b0f      	cmp	r3, #15
 80047ac:	d9e9      	bls.n	8004782 <prvInitialiseNewTask+0x64>
 80047ae:	e000      	b.n	80047b2 <prvInitialiseNewTask+0x94>
			{
				break;
 80047b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047ba:	e003      	b.n	80047c4 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	2b37      	cmp	r3, #55	; 0x37
 80047c8:	d901      	bls.n	80047ce <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047ca:	2337      	movs	r3, #55	; 0x37
 80047cc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	2200      	movs	r2, #0
 80047de:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	3304      	adds	r3, #4
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fe fd81 	bl	80032ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	3318      	adds	r3, #24
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe fd7c 	bl	80032ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004808:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	2200      	movs	r2, #0
 800480e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	68f9      	ldr	r1, [r7, #12]
 800481c:	69b8      	ldr	r0, [r7, #24]
 800481e:	f001 fb3d 	bl	8005e9c <pxPortInitialiseStack>
 8004822:	4602      	mov	r2, r0
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004832:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004834:	bf00      	nop
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004844:	f001 fc56 	bl	80060f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004848:	4b2d      	ldr	r3, [pc, #180]	; (8004900 <prvAddNewTaskToReadyList+0xc4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	4a2c      	ldr	r2, [pc, #176]	; (8004900 <prvAddNewTaskToReadyList+0xc4>)
 8004850:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004852:	4b2c      	ldr	r3, [pc, #176]	; (8004904 <prvAddNewTaskToReadyList+0xc8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800485a:	4a2a      	ldr	r2, [pc, #168]	; (8004904 <prvAddNewTaskToReadyList+0xc8>)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004860:	4b27      	ldr	r3, [pc, #156]	; (8004900 <prvAddNewTaskToReadyList+0xc4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d110      	bne.n	800488a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004868:	f000 fc08 	bl	800507c <prvInitialiseTaskLists>
 800486c:	e00d      	b.n	800488a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800486e:	4b26      	ldr	r3, [pc, #152]	; (8004908 <prvAddNewTaskToReadyList+0xcc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004876:	4b23      	ldr	r3, [pc, #140]	; (8004904 <prvAddNewTaskToReadyList+0xc8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	429a      	cmp	r2, r3
 8004882:	d802      	bhi.n	800488a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004884:	4a1f      	ldr	r2, [pc, #124]	; (8004904 <prvAddNewTaskToReadyList+0xc8>)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800488a:	4b20      	ldr	r3, [pc, #128]	; (800490c <prvAddNewTaskToReadyList+0xd0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3301      	adds	r3, #1
 8004890:	4a1e      	ldr	r2, [pc, #120]	; (800490c <prvAddNewTaskToReadyList+0xd0>)
 8004892:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004894:	4b1d      	ldr	r3, [pc, #116]	; (800490c <prvAddNewTaskToReadyList+0xd0>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a0:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <prvAddNewTaskToReadyList+0xd4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d903      	bls.n	80048b0 <prvAddNewTaskToReadyList+0x74>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	4a18      	ldr	r2, [pc, #96]	; (8004910 <prvAddNewTaskToReadyList+0xd4>)
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4a15      	ldr	r2, [pc, #84]	; (8004914 <prvAddNewTaskToReadyList+0xd8>)
 80048be:	441a      	add	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4619      	mov	r1, r3
 80048c6:	4610      	mov	r0, r2
 80048c8:	f7fe fd1d 	bl	8003306 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048cc:	f001 fc42 	bl	8006154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048d0:	4b0d      	ldr	r3, [pc, #52]	; (8004908 <prvAddNewTaskToReadyList+0xcc>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00e      	beq.n	80048f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <prvAddNewTaskToReadyList+0xc8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d207      	bcs.n	80048f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048e6:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <prvAddNewTaskToReadyList+0xdc>)
 80048e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048f6:	bf00      	nop
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	20000c44 	.word	0x20000c44
 8004904:	20000770 	.word	0x20000770
 8004908:	20000c50 	.word	0x20000c50
 800490c:	20000c60 	.word	0x20000c60
 8004910:	20000c4c 	.word	0x20000c4c
 8004914:	20000774 	.word	0x20000774
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	; 0x28
 8004920:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004922:	2300      	movs	r3, #0
 8004924:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004926:	2300      	movs	r3, #0
 8004928:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800492a:	463a      	mov	r2, r7
 800492c:	1d39      	adds	r1, r7, #4
 800492e:	f107 0308 	add.w	r3, r7, #8
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe fc86 	bl	8003244 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004938:	6839      	ldr	r1, [r7, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	9202      	str	r2, [sp, #8]
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	2300      	movs	r3, #0
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	2300      	movs	r3, #0
 8004948:	460a      	mov	r2, r1
 800494a:	4921      	ldr	r1, [pc, #132]	; (80049d0 <vTaskStartScheduler+0xb4>)
 800494c:	4821      	ldr	r0, [pc, #132]	; (80049d4 <vTaskStartScheduler+0xb8>)
 800494e:	f7ff fe44 	bl	80045da <xTaskCreateStatic>
 8004952:	4603      	mov	r3, r0
 8004954:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <vTaskStartScheduler+0xbc>)
 8004956:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004958:	4b1f      	ldr	r3, [pc, #124]	; (80049d8 <vTaskStartScheduler+0xbc>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004960:	2301      	movs	r3, #1
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	e001      	b.n	800496a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d102      	bne.n	8004976 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004970:	f000 ff46 	bl	8005800 <xTimerCreateTimerTask>
 8004974:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d116      	bne.n	80049aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	613b      	str	r3, [r7, #16]
}
 800498e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004990:	4b12      	ldr	r3, [pc, #72]	; (80049dc <vTaskStartScheduler+0xc0>)
 8004992:	f04f 32ff 	mov.w	r2, #4294967295
 8004996:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004998:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <vTaskStartScheduler+0xc4>)
 800499a:	2201      	movs	r2, #1
 800499c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800499e:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <vTaskStartScheduler+0xc8>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049a4:	f001 fb04 	bl	8005fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049a8:	e00e      	b.n	80049c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b0:	d10a      	bne.n	80049c8 <vTaskStartScheduler+0xac>
	__asm volatile
 80049b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	60fb      	str	r3, [r7, #12]
}
 80049c4:	bf00      	nop
 80049c6:	e7fe      	b.n	80049c6 <vTaskStartScheduler+0xaa>
}
 80049c8:	bf00      	nop
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	08007a10 	.word	0x08007a10
 80049d4:	0800504d 	.word	0x0800504d
 80049d8:	20000c68 	.word	0x20000c68
 80049dc:	20000c64 	.word	0x20000c64
 80049e0:	20000c50 	.word	0x20000c50
 80049e4:	20000c48 	.word	0x20000c48

080049e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80049ec:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <vTaskSuspendAll+0x18>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3301      	adds	r3, #1
 80049f2:	4a03      	ldr	r2, [pc, #12]	; (8004a00 <vTaskSuspendAll+0x18>)
 80049f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80049f6:	bf00      	nop
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	20000c6c 	.word	0x20000c6c

08004a04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a12:	4b42      	ldr	r3, [pc, #264]	; (8004b1c <xTaskResumeAll+0x118>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10a      	bne.n	8004a30 <xTaskResumeAll+0x2c>
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	603b      	str	r3, [r7, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	e7fe      	b.n	8004a2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a30:	f001 fb60 	bl	80060f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a34:	4b39      	ldr	r3, [pc, #228]	; (8004b1c <xTaskResumeAll+0x118>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	4a38      	ldr	r2, [pc, #224]	; (8004b1c <xTaskResumeAll+0x118>)
 8004a3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a3e:	4b37      	ldr	r3, [pc, #220]	; (8004b1c <xTaskResumeAll+0x118>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d162      	bne.n	8004b0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a46:	4b36      	ldr	r3, [pc, #216]	; (8004b20 <xTaskResumeAll+0x11c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d05e      	beq.n	8004b0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a4e:	e02f      	b.n	8004ab0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a50:	4b34      	ldr	r3, [pc, #208]	; (8004b24 <xTaskResumeAll+0x120>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3318      	adds	r3, #24
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fe fcaf 	bl	80033c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3304      	adds	r3, #4
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fe fcaa 	bl	80033c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a70:	4b2d      	ldr	r3, [pc, #180]	; (8004b28 <xTaskResumeAll+0x124>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d903      	bls.n	8004a80 <xTaskResumeAll+0x7c>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	4a2a      	ldr	r2, [pc, #168]	; (8004b28 <xTaskResumeAll+0x124>)
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a84:	4613      	mov	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4a27      	ldr	r2, [pc, #156]	; (8004b2c <xTaskResumeAll+0x128>)
 8004a8e:	441a      	add	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3304      	adds	r3, #4
 8004a94:	4619      	mov	r1, r3
 8004a96:	4610      	mov	r0, r2
 8004a98:	f7fe fc35 	bl	8003306 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa0:	4b23      	ldr	r3, [pc, #140]	; (8004b30 <xTaskResumeAll+0x12c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d302      	bcc.n	8004ab0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004aaa:	4b22      	ldr	r3, [pc, #136]	; (8004b34 <xTaskResumeAll+0x130>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ab0:	4b1c      	ldr	r3, [pc, #112]	; (8004b24 <xTaskResumeAll+0x120>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1cb      	bne.n	8004a50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004abe:	f000 fb7b 	bl	80051b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ac2:	4b1d      	ldr	r3, [pc, #116]	; (8004b38 <xTaskResumeAll+0x134>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d010      	beq.n	8004af0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ace:	f000 f847 	bl	8004b60 <xTaskIncrementTick>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004ad8:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <xTaskResumeAll+0x130>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f1      	bne.n	8004ace <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004aea:	4b13      	ldr	r3, [pc, #76]	; (8004b38 <xTaskResumeAll+0x134>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004af0:	4b10      	ldr	r3, [pc, #64]	; (8004b34 <xTaskResumeAll+0x130>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d009      	beq.n	8004b0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004af8:	2301      	movs	r3, #1
 8004afa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004afc:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <xTaskResumeAll+0x138>)
 8004afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b0c:	f001 fb22 	bl	8006154 <vPortExitCritical>

	return xAlreadyYielded;
 8004b10:	68bb      	ldr	r3, [r7, #8]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000c6c 	.word	0x20000c6c
 8004b20:	20000c44 	.word	0x20000c44
 8004b24:	20000c04 	.word	0x20000c04
 8004b28:	20000c4c 	.word	0x20000c4c
 8004b2c:	20000774 	.word	0x20000774
 8004b30:	20000770 	.word	0x20000770
 8004b34:	20000c58 	.word	0x20000c58
 8004b38:	20000c54 	.word	0x20000c54
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <xTaskGetTickCount+0x1c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b4c:	687b      	ldr	r3, [r7, #4]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20000c48 	.word	0x20000c48

08004b60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b6a:	4b4f      	ldr	r3, [pc, #316]	; (8004ca8 <xTaskIncrementTick+0x148>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f040 808f 	bne.w	8004c92 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b74:	4b4d      	ldr	r3, [pc, #308]	; (8004cac <xTaskIncrementTick+0x14c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b7c:	4a4b      	ldr	r2, [pc, #300]	; (8004cac <xTaskIncrementTick+0x14c>)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d120      	bne.n	8004bca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b88:	4b49      	ldr	r3, [pc, #292]	; (8004cb0 <xTaskIncrementTick+0x150>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	603b      	str	r3, [r7, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	e7fe      	b.n	8004ba6 <xTaskIncrementTick+0x46>
 8004ba8:	4b41      	ldr	r3, [pc, #260]	; (8004cb0 <xTaskIncrementTick+0x150>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	4b41      	ldr	r3, [pc, #260]	; (8004cb4 <xTaskIncrementTick+0x154>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a3f      	ldr	r2, [pc, #252]	; (8004cb0 <xTaskIncrementTick+0x150>)
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	4a3f      	ldr	r2, [pc, #252]	; (8004cb4 <xTaskIncrementTick+0x154>)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	4b3e      	ldr	r3, [pc, #248]	; (8004cb8 <xTaskIncrementTick+0x158>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	4a3d      	ldr	r2, [pc, #244]	; (8004cb8 <xTaskIncrementTick+0x158>)
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	f000 faf7 	bl	80051b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bca:	4b3c      	ldr	r3, [pc, #240]	; (8004cbc <xTaskIncrementTick+0x15c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d349      	bcc.n	8004c68 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bd4:	4b36      	ldr	r3, [pc, #216]	; (8004cb0 <xTaskIncrementTick+0x150>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d104      	bne.n	8004be8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bde:	4b37      	ldr	r3, [pc, #220]	; (8004cbc <xTaskIncrementTick+0x15c>)
 8004be0:	f04f 32ff 	mov.w	r2, #4294967295
 8004be4:	601a      	str	r2, [r3, #0]
					break;
 8004be6:	e03f      	b.n	8004c68 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004be8:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <xTaskIncrementTick+0x150>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d203      	bcs.n	8004c08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c00:	4a2e      	ldr	r2, [pc, #184]	; (8004cbc <xTaskIncrementTick+0x15c>)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c06:	e02f      	b.n	8004c68 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fe fbd7 	bl	80033c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d004      	beq.n	8004c24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	3318      	adds	r3, #24
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe fbce 	bl	80033c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c28:	4b25      	ldr	r3, [pc, #148]	; (8004cc0 <xTaskIncrementTick+0x160>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d903      	bls.n	8004c38 <xTaskIncrementTick+0xd8>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	4a22      	ldr	r2, [pc, #136]	; (8004cc0 <xTaskIncrementTick+0x160>)
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4a1f      	ldr	r2, [pc, #124]	; (8004cc4 <xTaskIncrementTick+0x164>)
 8004c46:	441a      	add	r2, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	f7fe fb59 	bl	8003306 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c58:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <xTaskIncrementTick+0x168>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d3b8      	bcc.n	8004bd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004c62:	2301      	movs	r3, #1
 8004c64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c66:	e7b5      	b.n	8004bd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c68:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <xTaskIncrementTick+0x168>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6e:	4915      	ldr	r1, [pc, #84]	; (8004cc4 <xTaskIncrementTick+0x164>)
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d901      	bls.n	8004c84 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004c80:	2301      	movs	r3, #1
 8004c82:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004c84:	4b11      	ldr	r3, [pc, #68]	; (8004ccc <xTaskIncrementTick+0x16c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d007      	beq.n	8004c9c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	e004      	b.n	8004c9c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004c92:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <xTaskIncrementTick+0x170>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3301      	adds	r3, #1
 8004c98:	4a0d      	ldr	r2, [pc, #52]	; (8004cd0 <xTaskIncrementTick+0x170>)
 8004c9a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004c9c:	697b      	ldr	r3, [r7, #20]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000c6c 	.word	0x20000c6c
 8004cac:	20000c48 	.word	0x20000c48
 8004cb0:	20000bfc 	.word	0x20000bfc
 8004cb4:	20000c00 	.word	0x20000c00
 8004cb8:	20000c5c 	.word	0x20000c5c
 8004cbc:	20000c64 	.word	0x20000c64
 8004cc0:	20000c4c 	.word	0x20000c4c
 8004cc4:	20000774 	.word	0x20000774
 8004cc8:	20000770 	.word	0x20000770
 8004ccc:	20000c58 	.word	0x20000c58
 8004cd0:	20000c54 	.word	0x20000c54

08004cd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cda:	4b28      	ldr	r3, [pc, #160]	; (8004d7c <vTaskSwitchContext+0xa8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ce2:	4b27      	ldr	r3, [pc, #156]	; (8004d80 <vTaskSwitchContext+0xac>)
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ce8:	e041      	b.n	8004d6e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004cea:	4b25      	ldr	r3, [pc, #148]	; (8004d80 <vTaskSwitchContext+0xac>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf0:	4b24      	ldr	r3, [pc, #144]	; (8004d84 <vTaskSwitchContext+0xb0>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	e010      	b.n	8004d1a <vTaskSwitchContext+0x46>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10a      	bne.n	8004d14 <vTaskSwitchContext+0x40>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	607b      	str	r3, [r7, #4]
}
 8004d10:	bf00      	nop
 8004d12:	e7fe      	b.n	8004d12 <vTaskSwitchContext+0x3e>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	491b      	ldr	r1, [pc, #108]	; (8004d88 <vTaskSwitchContext+0xb4>)
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0e4      	beq.n	8004cf8 <vTaskSwitchContext+0x24>
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4a13      	ldr	r2, [pc, #76]	; (8004d88 <vTaskSwitchContext+0xb4>)
 8004d3a:	4413      	add	r3, r2
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	605a      	str	r2, [r3, #4]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	3308      	adds	r3, #8
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d104      	bne.n	8004d5e <vTaskSwitchContext+0x8a>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	605a      	str	r2, [r3, #4]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	4a09      	ldr	r2, [pc, #36]	; (8004d8c <vTaskSwitchContext+0xb8>)
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	4a06      	ldr	r2, [pc, #24]	; (8004d84 <vTaskSwitchContext+0xb0>)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6013      	str	r3, [r2, #0]
}
 8004d6e:	bf00      	nop
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	20000c6c 	.word	0x20000c6c
 8004d80:	20000c58 	.word	0x20000c58
 8004d84:	20000c4c 	.word	0x20000c4c
 8004d88:	20000774 	.word	0x20000774
 8004d8c:	20000770 	.word	0x20000770

08004d90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	60fb      	str	r3, [r7, #12]
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004db6:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <vTaskPlaceOnEventList+0x44>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3318      	adds	r3, #24
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7fe fac5 	bl	800334e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	6838      	ldr	r0, [r7, #0]
 8004dc8:	f000 fcc6 	bl	8005758 <prvAddCurrentTaskToDelayedList>
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000770 	.word	0x20000770

08004dd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	617b      	str	r3, [r7, #20]
}
 8004dfc:	bf00      	nop
 8004dfe:	e7fe      	b.n	8004dfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e00:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <vTaskPlaceOnEventListRestricted+0x54>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3318      	adds	r3, #24
 8004e06:	4619      	mov	r1, r3
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f7fe fa7c 	bl	8003306 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004e14:	f04f 33ff 	mov.w	r3, #4294967295
 8004e18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	68b8      	ldr	r0, [r7, #8]
 8004e1e:	f000 fc9b 	bl	8005758 <prvAddCurrentTaskToDelayedList>
	}
 8004e22:	bf00      	nop
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000770 	.word	0x20000770

08004e30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10a      	bne.n	8004e5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	60fb      	str	r3, [r7, #12]
}
 8004e58:	bf00      	nop
 8004e5a:	e7fe      	b.n	8004e5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	3318      	adds	r3, #24
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fe faad 	bl	80033c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e66:	4b1e      	ldr	r3, [pc, #120]	; (8004ee0 <xTaskRemoveFromEventList+0xb0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d11d      	bne.n	8004eaa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	3304      	adds	r3, #4
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fe faa4 	bl	80033c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7c:	4b19      	ldr	r3, [pc, #100]	; (8004ee4 <xTaskRemoveFromEventList+0xb4>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d903      	bls.n	8004e8c <xTaskRemoveFromEventList+0x5c>
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	4a16      	ldr	r2, [pc, #88]	; (8004ee4 <xTaskRemoveFromEventList+0xb4>)
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4a13      	ldr	r2, [pc, #76]	; (8004ee8 <xTaskRemoveFromEventList+0xb8>)
 8004e9a:	441a      	add	r2, r3
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	f7fe fa2f 	bl	8003306 <vListInsertEnd>
 8004ea8:	e005      	b.n	8004eb6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	3318      	adds	r3, #24
 8004eae:	4619      	mov	r1, r3
 8004eb0:	480e      	ldr	r0, [pc, #56]	; (8004eec <xTaskRemoveFromEventList+0xbc>)
 8004eb2:	f7fe fa28 	bl	8003306 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eba:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <xTaskRemoveFromEventList+0xc0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d905      	bls.n	8004ed0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <xTaskRemoveFromEventList+0xc4>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	e001      	b.n	8004ed4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ed4:	697b      	ldr	r3, [r7, #20]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20000c6c 	.word	0x20000c6c
 8004ee4:	20000c4c 	.word	0x20000c4c
 8004ee8:	20000774 	.word	0x20000774
 8004eec:	20000c04 	.word	0x20000c04
 8004ef0:	20000770 	.word	0x20000770
 8004ef4:	20000c58 	.word	0x20000c58

08004ef8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10a      	bne.n	8004f1c <vTaskSetTimeOutState+0x24>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	60fb      	str	r3, [r7, #12]
}
 8004f18:	bf00      	nop
 8004f1a:	e7fe      	b.n	8004f1a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8004f1c:	f001 f8ea 	bl	80060f4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <vTaskSetTimeOutState+0x44>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8004f28:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <vTaskSetTimeOutState+0x48>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8004f30:	f001 f910 	bl	8006154 <vPortExitCritical>
}
 8004f34:	bf00      	nop
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	20000c5c 	.word	0x20000c5c
 8004f40:	20000c48 	.word	0x20000c48

08004f44 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f4c:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <vTaskInternalSetTimeOutState+0x24>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f54:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <vTaskInternalSetTimeOutState+0x28>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	605a      	str	r2, [r3, #4]
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	20000c5c 	.word	0x20000c5c
 8004f6c:	20000c48 	.word	0x20000c48

08004f70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	613b      	str	r3, [r7, #16]
}
 8004f92:	bf00      	nop
 8004f94:	e7fe      	b.n	8004f94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	60fb      	str	r3, [r7, #12]
}
 8004fae:	bf00      	nop
 8004fb0:	e7fe      	b.n	8004fb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004fb2:	f001 f89f 	bl	80060f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fb6:	4b1d      	ldr	r3, [pc, #116]	; (800502c <xTaskCheckForTimeOut+0xbc>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d102      	bne.n	8004fd6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61fb      	str	r3, [r7, #28]
 8004fd4:	e023      	b.n	800501e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4b15      	ldr	r3, [pc, #84]	; (8005030 <xTaskCheckForTimeOut+0xc0>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d007      	beq.n	8004ff2 <xTaskCheckForTimeOut+0x82>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d302      	bcc.n	8004ff2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fec:	2301      	movs	r3, #1
 8004fee:	61fb      	str	r3, [r7, #28]
 8004ff0:	e015      	b.n	800501e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d20b      	bcs.n	8005014 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	1ad2      	subs	r2, r2, r3
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff ff9b 	bl	8004f44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800500e:	2300      	movs	r3, #0
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	e004      	b.n	800501e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800501a:	2301      	movs	r3, #1
 800501c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800501e:	f001 f899 	bl	8006154 <vPortExitCritical>

	return xReturn;
 8005022:	69fb      	ldr	r3, [r7, #28]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3720      	adds	r7, #32
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	20000c48 	.word	0x20000c48
 8005030:	20000c5c 	.word	0x20000c5c

08005034 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005038:	4b03      	ldr	r3, [pc, #12]	; (8005048 <vTaskMissedYield+0x14>)
 800503a:	2201      	movs	r2, #1
 800503c:	601a      	str	r2, [r3, #0]
}
 800503e:	bf00      	nop
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	20000c58 	.word	0x20000c58

0800504c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005054:	f000 f852 	bl	80050fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005058:	4b06      	ldr	r3, [pc, #24]	; (8005074 <prvIdleTask+0x28>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d9f9      	bls.n	8005054 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <prvIdleTask+0x2c>)
 8005062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005070:	e7f0      	b.n	8005054 <prvIdleTask+0x8>
 8005072:	bf00      	nop
 8005074:	20000774 	.word	0x20000774
 8005078:	e000ed04 	.word	0xe000ed04

0800507c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005082:	2300      	movs	r3, #0
 8005084:	607b      	str	r3, [r7, #4]
 8005086:	e00c      	b.n	80050a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4a12      	ldr	r2, [pc, #72]	; (80050dc <prvInitialiseTaskLists+0x60>)
 8005094:	4413      	add	r3, r2
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe f908 	bl	80032ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3301      	adds	r3, #1
 80050a0:	607b      	str	r3, [r7, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b37      	cmp	r3, #55	; 0x37
 80050a6:	d9ef      	bls.n	8005088 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050a8:	480d      	ldr	r0, [pc, #52]	; (80050e0 <prvInitialiseTaskLists+0x64>)
 80050aa:	f7fe f8ff 	bl	80032ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050ae:	480d      	ldr	r0, [pc, #52]	; (80050e4 <prvInitialiseTaskLists+0x68>)
 80050b0:	f7fe f8fc 	bl	80032ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050b4:	480c      	ldr	r0, [pc, #48]	; (80050e8 <prvInitialiseTaskLists+0x6c>)
 80050b6:	f7fe f8f9 	bl	80032ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050ba:	480c      	ldr	r0, [pc, #48]	; (80050ec <prvInitialiseTaskLists+0x70>)
 80050bc:	f7fe f8f6 	bl	80032ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050c0:	480b      	ldr	r0, [pc, #44]	; (80050f0 <prvInitialiseTaskLists+0x74>)
 80050c2:	f7fe f8f3 	bl	80032ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050c6:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <prvInitialiseTaskLists+0x78>)
 80050c8:	4a05      	ldr	r2, [pc, #20]	; (80050e0 <prvInitialiseTaskLists+0x64>)
 80050ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050cc:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <prvInitialiseTaskLists+0x7c>)
 80050ce:	4a05      	ldr	r2, [pc, #20]	; (80050e4 <prvInitialiseTaskLists+0x68>)
 80050d0:	601a      	str	r2, [r3, #0]
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000774 	.word	0x20000774
 80050e0:	20000bd4 	.word	0x20000bd4
 80050e4:	20000be8 	.word	0x20000be8
 80050e8:	20000c04 	.word	0x20000c04
 80050ec:	20000c18 	.word	0x20000c18
 80050f0:	20000c30 	.word	0x20000c30
 80050f4:	20000bfc 	.word	0x20000bfc
 80050f8:	20000c00 	.word	0x20000c00

080050fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005102:	e019      	b.n	8005138 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005104:	f000 fff6 	bl	80060f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005108:	4b10      	ldr	r3, [pc, #64]	; (800514c <prvCheckTasksWaitingTermination+0x50>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3304      	adds	r3, #4
 8005114:	4618      	mov	r0, r3
 8005116:	f7fe f953 	bl	80033c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800511a:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <prvCheckTasksWaitingTermination+0x54>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3b01      	subs	r3, #1
 8005120:	4a0b      	ldr	r2, [pc, #44]	; (8005150 <prvCheckTasksWaitingTermination+0x54>)
 8005122:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005124:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <prvCheckTasksWaitingTermination+0x58>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3b01      	subs	r3, #1
 800512a:	4a0a      	ldr	r2, [pc, #40]	; (8005154 <prvCheckTasksWaitingTermination+0x58>)
 800512c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800512e:	f001 f811 	bl	8006154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f810 	bl	8005158 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005138:	4b06      	ldr	r3, [pc, #24]	; (8005154 <prvCheckTasksWaitingTermination+0x58>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e1      	bne.n	8005104 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005140:	bf00      	nop
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20000c18 	.word	0x20000c18
 8005150:	20000c44 	.word	0x20000c44
 8005154:	20000c2c 	.word	0x20000c2c

08005158 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005166:	2b00      	cmp	r3, #0
 8005168:	d108      	bne.n	800517c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	4618      	mov	r0, r3
 8005170:	f001 f9ae 	bl	80064d0 <vPortFree>
				vPortFree( pxTCB );
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f001 f9ab 	bl	80064d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800517a:	e018      	b.n	80051ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005182:	2b01      	cmp	r3, #1
 8005184:	d103      	bne.n	800518e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f001 f9a2 	bl	80064d0 <vPortFree>
	}
 800518c:	e00f      	b.n	80051ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005194:	2b02      	cmp	r3, #2
 8005196:	d00a      	beq.n	80051ae <prvDeleteTCB+0x56>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	60fb      	str	r3, [r7, #12]
}
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <prvDeleteTCB+0x54>
	}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051be:	4b0c      	ldr	r3, [pc, #48]	; (80051f0 <prvResetNextTaskUnblockTime+0x38>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d104      	bne.n	80051d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051c8:	4b0a      	ldr	r3, [pc, #40]	; (80051f4 <prvResetNextTaskUnblockTime+0x3c>)
 80051ca:	f04f 32ff 	mov.w	r2, #4294967295
 80051ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051d0:	e008      	b.n	80051e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051d2:	4b07      	ldr	r3, [pc, #28]	; (80051f0 <prvResetNextTaskUnblockTime+0x38>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4a04      	ldr	r2, [pc, #16]	; (80051f4 <prvResetNextTaskUnblockTime+0x3c>)
 80051e2:	6013      	str	r3, [r2, #0]
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	20000bfc 	.word	0x20000bfc
 80051f4:	20000c64 	.word	0x20000c64

080051f8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <xTaskGetCurrentTaskHandle+0x1c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005204:	687b      	ldr	r3, [r7, #4]
	}
 8005206:	4618      	mov	r0, r3
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20000770 	.word	0x20000770

08005218 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800521e:	4b0b      	ldr	r3, [pc, #44]	; (800524c <xTaskGetSchedulerState+0x34>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d102      	bne.n	800522c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005226:	2301      	movs	r3, #1
 8005228:	607b      	str	r3, [r7, #4]
 800522a:	e008      	b.n	800523e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800522c:	4b08      	ldr	r3, [pc, #32]	; (8005250 <xTaskGetSchedulerState+0x38>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d102      	bne.n	800523a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005234:	2302      	movs	r3, #2
 8005236:	607b      	str	r3, [r7, #4]
 8005238:	e001      	b.n	800523e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800523a:	2300      	movs	r3, #0
 800523c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800523e:	687b      	ldr	r3, [r7, #4]
	}
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	20000c50 	.word	0x20000c50
 8005250:	20000c6c 	.word	0x20000c6c

08005254 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d056      	beq.n	8005318 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800526a:	4b2e      	ldr	r3, [pc, #184]	; (8005324 <xTaskPriorityDisinherit+0xd0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	429a      	cmp	r2, r3
 8005272:	d00a      	beq.n	800528a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	60fb      	str	r3, [r7, #12]
}
 8005286:	bf00      	nop
 8005288:	e7fe      	b.n	8005288 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	60bb      	str	r3, [r7, #8]
}
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ac:	1e5a      	subs	r2, r3, #1
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d02c      	beq.n	8005318 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d128      	bne.n	8005318 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	3304      	adds	r3, #4
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fe f878 	bl	80033c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <xTaskPriorityDisinherit+0xd4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d903      	bls.n	80052f8 <xTaskPriorityDisinherit+0xa4>
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	4a0c      	ldr	r2, [pc, #48]	; (8005328 <xTaskPriorityDisinherit+0xd4>)
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4a09      	ldr	r2, [pc, #36]	; (800532c <xTaskPriorityDisinherit+0xd8>)
 8005306:	441a      	add	r2, r3
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	3304      	adds	r3, #4
 800530c:	4619      	mov	r1, r3
 800530e:	4610      	mov	r0, r2
 8005310:	f7fd fff9 	bl	8003306 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005314:	2301      	movs	r3, #1
 8005316:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005318:	697b      	ldr	r3, [r7, #20]
	}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20000770 	.word	0x20000770
 8005328:	20000c4c 	.word	0x20000c4c
 800532c:	20000774 	.word	0x20000774

08005330 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800533e:	f000 fed9 	bl	80060f4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005342:	4b26      	ldr	r3, [pc, #152]	; (80053dc <xTaskNotifyWait+0xac>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d01a      	beq.n	8005386 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005350:	4b22      	ldr	r3, [pc, #136]	; (80053dc <xTaskNotifyWait+0xac>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	43d2      	mvns	r2, r2
 800535a:	400a      	ands	r2, r1
 800535c:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800535e:	4b1f      	ldr	r3, [pc, #124]	; (80053dc <xTaskNotifyWait+0xac>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00b      	beq.n	8005386 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800536e:	2101      	movs	r1, #1
 8005370:	6838      	ldr	r0, [r7, #0]
 8005372:	f000 f9f1 	bl	8005758 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005376:	4b1a      	ldr	r3, [pc, #104]	; (80053e0 <xTaskNotifyWait+0xb0>)
 8005378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005386:	f000 fee5 	bl	8006154 <vPortExitCritical>

		taskENTER_CRITICAL();
 800538a:	f000 feb3 	bl	80060f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005394:	4b11      	ldr	r3, [pc, #68]	; (80053dc <xTaskNotifyWait+0xac>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800539e:	4b0f      	ldr	r3, [pc, #60]	; (80053dc <xTaskNotifyWait+0xac>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d002      	beq.n	80053b2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	e008      	b.n	80053c4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80053b2:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <xTaskNotifyWait+0xac>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	43d2      	mvns	r2, r2
 80053bc:	400a      	ands	r2, r1
 80053be:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80053c0:	2301      	movs	r3, #1
 80053c2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <xTaskNotifyWait+0xac>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80053ce:	f000 fec1 	bl	8006154 <vPortExitCritical>

		return xReturn;
 80053d2:	697b      	ldr	r3, [r7, #20]
	}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	20000770 	.word	0x20000770
 80053e0:	e000ed04 	.word	0xe000ed04

080053e4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08a      	sub	sp, #40	; 0x28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	4613      	mov	r3, r2
 80053f2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80053f4:	2301      	movs	r3, #1
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10a      	bne.n	8005414 <xTaskGenericNotify+0x30>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	61bb      	str	r3, [r7, #24]
}
 8005410:	bf00      	nop
 8005412:	e7fe      	b.n	8005412 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005418:	f000 fe6c 	bl	80060f4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005430:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	2202      	movs	r2, #2
 8005436:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	2b04      	cmp	r3, #4
 800543e:	d828      	bhi.n	8005492 <xTaskGenericNotify+0xae>
 8005440:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <xTaskGenericNotify+0x64>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	080054b3 	.word	0x080054b3
 800544c:	0800545d 	.word	0x0800545d
 8005450:	0800546b 	.word	0x0800546b
 8005454:	08005477 	.word	0x08005477
 8005458:	0800547f 	.word	0x0800547f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	431a      	orrs	r2, r3
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005468:	e026      	b.n	80054b8 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005474:	e020      	b.n	80054b8 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800547c:	e01c      	b.n	80054b8 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800547e:	7ffb      	ldrb	r3, [r7, #31]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d003      	beq.n	800548c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800548a:	e015      	b.n	80054b8 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800548c:	2300      	movs	r3, #0
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005490:	e012      	b.n	80054b8 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549a:	d00c      	beq.n	80054b6 <xTaskGenericNotify+0xd2>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	617b      	str	r3, [r7, #20]
}
 80054ae:	bf00      	nop
 80054b0:	e7fe      	b.n	80054b0 <xTaskGenericNotify+0xcc>
					break;
 80054b2:	bf00      	nop
 80054b4:	e000      	b.n	80054b8 <xTaskGenericNotify+0xd4>

					break;
 80054b6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80054b8:	7ffb      	ldrb	r3, [r7, #31]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d13a      	bne.n	8005534 <xTaskGenericNotify+0x150>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fd ff7c 	bl	80033c0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054cc:	4b1d      	ldr	r3, [pc, #116]	; (8005544 <xTaskGenericNotify+0x160>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d903      	bls.n	80054dc <xTaskGenericNotify+0xf8>
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	4a1a      	ldr	r2, [pc, #104]	; (8005544 <xTaskGenericNotify+0x160>)
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4a17      	ldr	r2, [pc, #92]	; (8005548 <xTaskGenericNotify+0x164>)
 80054ea:	441a      	add	r2, r3
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	3304      	adds	r3, #4
 80054f0:	4619      	mov	r1, r3
 80054f2:	4610      	mov	r0, r2
 80054f4:	f7fd ff07 	bl	8003306 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <xTaskGenericNotify+0x132>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	613b      	str	r3, [r7, #16]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <xTaskGenericNotify+0x130>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551a:	4b0c      	ldr	r3, [pc, #48]	; (800554c <xTaskGenericNotify+0x168>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	429a      	cmp	r2, r3
 8005522:	d907      	bls.n	8005534 <xTaskGenericNotify+0x150>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005524:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <xTaskGenericNotify+0x16c>)
 8005526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005534:	f000 fe0e 	bl	8006154 <vPortExitCritical>

		return xReturn;
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800553a:	4618      	mov	r0, r3
 800553c:	3728      	adds	r7, #40	; 0x28
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000c4c 	.word	0x20000c4c
 8005548:	20000774 	.word	0x20000774
 800554c:	20000770 	.word	0x20000770
 8005550:	e000ed04 	.word	0xe000ed04

08005554 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08e      	sub	sp, #56	; 0x38
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	4613      	mov	r3, r2
 8005562:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005564:	2301      	movs	r3, #1
 8005566:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10a      	bne.n	8005584 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005580:	bf00      	nop
 8005582:	e7fe      	b.n	8005582 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005584:	f000 fe98 	bl	80062b8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800558c:	f3ef 8211 	mrs	r2, BASEPRI
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	623a      	str	r2, [r7, #32]
 80055a2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80055a4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80055bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d828      	bhi.n	8005620 <xTaskGenericNotifyFromISR+0xcc>
 80055ce:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <xTaskGenericNotifyFromISR+0x80>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	08005641 	.word	0x08005641
 80055d8:	080055e9 	.word	0x080055e9
 80055dc:	080055f7 	.word	0x080055f7
 80055e0:	08005603 	.word	0x08005603
 80055e4:	0800560b 	.word	0x0800560b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	431a      	orrs	r2, r3
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80055f4:	e027      	b.n	8005646 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005600:	e021      	b.n	8005646 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005608:	e01d      	b.n	8005646 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800560a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800560e:	2b02      	cmp	r3, #2
 8005610:	d003      	beq.n	800561a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005618:	e015      	b.n	8005646 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800561a:	2300      	movs	r3, #0
 800561c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800561e:	e012      	b.n	8005646 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d00c      	beq.n	8005644 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	61bb      	str	r3, [r7, #24]
}
 800563c:	bf00      	nop
 800563e:	e7fe      	b.n	800563e <xTaskGenericNotifyFromISR+0xea>
					break;
 8005640:	bf00      	nop
 8005642:	e000      	b.n	8005646 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8005644:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005646:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800564a:	2b01      	cmp	r3, #1
 800564c:	d146      	bne.n	80056dc <xTaskGenericNotifyFromISR+0x188>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	617b      	str	r3, [r7, #20]
}
 8005668:	bf00      	nop
 800566a:	e7fe      	b.n	800566a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800566c:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <xTaskGenericNotifyFromISR+0x1a0>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d11d      	bne.n	80056b0 <xTaskGenericNotifyFromISR+0x15c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	3304      	adds	r3, #4
 8005678:	4618      	mov	r0, r3
 800567a:	f7fd fea1 	bl	80033c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005682:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <xTaskGenericNotifyFromISR+0x1a4>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d903      	bls.n	8005692 <xTaskGenericNotifyFromISR+0x13e>
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568e:	4a1a      	ldr	r2, [pc, #104]	; (80056f8 <xTaskGenericNotifyFromISR+0x1a4>)
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005696:	4613      	mov	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4a17      	ldr	r2, [pc, #92]	; (80056fc <xTaskGenericNotifyFromISR+0x1a8>)
 80056a0:	441a      	add	r2, r3
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	3304      	adds	r3, #4
 80056a6:	4619      	mov	r1, r3
 80056a8:	4610      	mov	r0, r2
 80056aa:	f7fd fe2c 	bl	8003306 <vListInsertEnd>
 80056ae:	e005      	b.n	80056bc <xTaskGenericNotifyFromISR+0x168>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	3318      	adds	r3, #24
 80056b4:	4619      	mov	r1, r3
 80056b6:	4812      	ldr	r0, [pc, #72]	; (8005700 <xTaskGenericNotifyFromISR+0x1ac>)
 80056b8:	f7fd fe25 	bl	8003306 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c0:	4b10      	ldr	r3, [pc, #64]	; (8005704 <xTaskGenericNotifyFromISR+0x1b0>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d908      	bls.n	80056dc <xTaskGenericNotifyFromISR+0x188>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80056ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <xTaskGenericNotifyFromISR+0x182>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80056d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80056d6:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <xTaskGenericNotifyFromISR+0x1b4>)
 80056d8:	2201      	movs	r2, #1
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056de:	613b      	str	r3, [r7, #16]
	__asm volatile
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f383 8811 	msr	BASEPRI, r3
}
 80056e6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80056e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3738      	adds	r7, #56	; 0x38
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000c6c 	.word	0x20000c6c
 80056f8:	20000c4c 	.word	0x20000c4c
 80056fc:	20000774 	.word	0x20000774
 8005700:	20000c04 	.word	0x20000c04
 8005704:	20000770 	.word	0x20000770
 8005708:	20000c58 	.word	0x20000c58

0800570c <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d102      	bne.n	8005720 <xTaskNotifyStateClear+0x14>
 800571a:	4b0e      	ldr	r3, [pc, #56]	; (8005754 <xTaskNotifyStateClear+0x48>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	e000      	b.n	8005722 <xTaskNotifyStateClear+0x16>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8005724:	f000 fce6 	bl	80060f4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d106      	bne.n	8005742 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				xReturn = pdPASS;
 800573c:	2301      	movs	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	e001      	b.n	8005746 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8005746:	f000 fd05 	bl	8006154 <vPortExitCritical>

		return xReturn;
 800574a:	68fb      	ldr	r3, [r7, #12]
	}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000770 	.word	0x20000770

08005758 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005762:	4b21      	ldr	r3, [pc, #132]	; (80057e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005768:	4b20      	ldr	r3, [pc, #128]	; (80057ec <prvAddCurrentTaskToDelayedList+0x94>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3304      	adds	r3, #4
 800576e:	4618      	mov	r0, r3
 8005770:	f7fd fe26 	bl	80033c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577a:	d10a      	bne.n	8005792 <prvAddCurrentTaskToDelayedList+0x3a>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d007      	beq.n	8005792 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005782:	4b1a      	ldr	r3, [pc, #104]	; (80057ec <prvAddCurrentTaskToDelayedList+0x94>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3304      	adds	r3, #4
 8005788:	4619      	mov	r1, r3
 800578a:	4819      	ldr	r0, [pc, #100]	; (80057f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800578c:	f7fd fdbb 	bl	8003306 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005790:	e026      	b.n	80057e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4413      	add	r3, r2
 8005798:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800579a:	4b14      	ldr	r3, [pc, #80]	; (80057ec <prvAddCurrentTaskToDelayedList+0x94>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d209      	bcs.n	80057be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057aa:	4b12      	ldr	r3, [pc, #72]	; (80057f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	4b0f      	ldr	r3, [pc, #60]	; (80057ec <prvAddCurrentTaskToDelayedList+0x94>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f7fd fdc9 	bl	800334e <vListInsert>
}
 80057bc:	e010      	b.n	80057e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057be:	4b0e      	ldr	r3, [pc, #56]	; (80057f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <prvAddCurrentTaskToDelayedList+0x94>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3304      	adds	r3, #4
 80057c8:	4619      	mov	r1, r3
 80057ca:	4610      	mov	r0, r2
 80057cc:	f7fd fdbf 	bl	800334e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057d0:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d202      	bcs.n	80057e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057da:	4a08      	ldr	r2, [pc, #32]	; (80057fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	6013      	str	r3, [r2, #0]
}
 80057e0:	bf00      	nop
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20000c48 	.word	0x20000c48
 80057ec:	20000770 	.word	0x20000770
 80057f0:	20000c30 	.word	0x20000c30
 80057f4:	20000c00 	.word	0x20000c00
 80057f8:	20000bfc 	.word	0x20000bfc
 80057fc:	20000c64 	.word	0x20000c64

08005800 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08a      	sub	sp, #40	; 0x28
 8005804:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800580a:	f000 fb07 	bl	8005e1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800580e:	4b1c      	ldr	r3, [pc, #112]	; (8005880 <xTimerCreateTimerTask+0x80>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d021      	beq.n	800585a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800581e:	1d3a      	adds	r2, r7, #4
 8005820:	f107 0108 	add.w	r1, r7, #8
 8005824:	f107 030c 	add.w	r3, r7, #12
 8005828:	4618      	mov	r0, r3
 800582a:	f7fd fd25 	bl	8003278 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	9202      	str	r2, [sp, #8]
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	2302      	movs	r3, #2
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	2300      	movs	r3, #0
 800583e:	460a      	mov	r2, r1
 8005840:	4910      	ldr	r1, [pc, #64]	; (8005884 <xTimerCreateTimerTask+0x84>)
 8005842:	4811      	ldr	r0, [pc, #68]	; (8005888 <xTimerCreateTimerTask+0x88>)
 8005844:	f7fe fec9 	bl	80045da <xTaskCreateStatic>
 8005848:	4603      	mov	r3, r0
 800584a:	4a10      	ldr	r2, [pc, #64]	; (800588c <xTimerCreateTimerTask+0x8c>)
 800584c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800584e:	4b0f      	ldr	r3, [pc, #60]	; (800588c <xTimerCreateTimerTask+0x8c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005856:	2301      	movs	r3, #1
 8005858:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10a      	bne.n	8005876 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	613b      	str	r3, [r7, #16]
}
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005876:	697b      	ldr	r3, [r7, #20]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	20000ca0 	.word	0x20000ca0
 8005884:	08007a18 	.word	0x08007a18
 8005888:	080059c5 	.word	0x080059c5
 800588c:	20000ca4 	.word	0x20000ca4

08005890 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08a      	sub	sp, #40	; 0x28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800589e:	2300      	movs	r3, #0
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10a      	bne.n	80058be <xTimerGenericCommand+0x2e>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	623b      	str	r3, [r7, #32]
}
 80058ba:	bf00      	nop
 80058bc:	e7fe      	b.n	80058bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058be:	4b1a      	ldr	r3, [pc, #104]	; (8005928 <xTimerGenericCommand+0x98>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d02a      	beq.n	800591c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b05      	cmp	r3, #5
 80058d6:	dc18      	bgt.n	800590a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058d8:	f7ff fc9e 	bl	8005218 <xTaskGetSchedulerState>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d109      	bne.n	80058f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058e2:	4b11      	ldr	r3, [pc, #68]	; (8005928 <xTimerGenericCommand+0x98>)
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	f107 0110 	add.w	r1, r7, #16
 80058ea:	2300      	movs	r3, #0
 80058ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ee:	f7fd fe95 	bl	800361c <xQueueGenericSend>
 80058f2:	6278      	str	r0, [r7, #36]	; 0x24
 80058f4:	e012      	b.n	800591c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058f6:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <xTimerGenericCommand+0x98>)
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	f107 0110 	add.w	r1, r7, #16
 80058fe:	2300      	movs	r3, #0
 8005900:	2200      	movs	r2, #0
 8005902:	f7fd fe8b 	bl	800361c <xQueueGenericSend>
 8005906:	6278      	str	r0, [r7, #36]	; 0x24
 8005908:	e008      	b.n	800591c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800590a:	4b07      	ldr	r3, [pc, #28]	; (8005928 <xTimerGenericCommand+0x98>)
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	f107 0110 	add.w	r1, r7, #16
 8005912:	2300      	movs	r3, #0
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	f7fd ff7f 	bl	8003818 <xQueueGenericSendFromISR>
 800591a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800591e:	4618      	mov	r0, r3
 8005920:	3728      	adds	r7, #40	; 0x28
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20000ca0 	.word	0x20000ca0

0800592c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af02      	add	r7, sp, #8
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005936:	4b22      	ldr	r3, [pc, #136]	; (80059c0 <prvProcessExpiredTimer+0x94>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	3304      	adds	r3, #4
 8005944:	4618      	mov	r0, r3
 8005946:	f7fd fd3b 	bl	80033c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d022      	beq.n	800599e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	699a      	ldr	r2, [r3, #24]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	18d1      	adds	r1, r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	6978      	ldr	r0, [r7, #20]
 8005966:	f000 f8d1 	bl	8005b0c <prvInsertTimerInActiveList>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01f      	beq.n	80059b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005970:	2300      	movs	r3, #0
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	2300      	movs	r3, #0
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	2100      	movs	r1, #0
 800597a:	6978      	ldr	r0, [r7, #20]
 800597c:	f7ff ff88 	bl	8005890 <xTimerGenericCommand>
 8005980:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d113      	bne.n	80059b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	60fb      	str	r3, [r7, #12]
}
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059a4:	f023 0301 	bic.w	r3, r3, #1
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	6978      	ldr	r0, [r7, #20]
 80059b6:	4798      	blx	r3
}
 80059b8:	bf00      	nop
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20000c98 	.word	0x20000c98

080059c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059cc:	f107 0308 	add.w	r3, r7, #8
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 f857 	bl	8005a84 <prvGetNextExpireTime>
 80059d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4619      	mov	r1, r3
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f803 	bl	80059e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059e2:	f000 f8d5 	bl	8005b90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059e6:	e7f1      	b.n	80059cc <prvTimerTask+0x8>

080059e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059f2:	f7fe fff9 	bl	80049e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059f6:	f107 0308 	add.w	r3, r7, #8
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 f866 	bl	8005acc <prvSampleTimeNow>
 8005a00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d130      	bne.n	8005a6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10a      	bne.n	8005a24 <prvProcessTimerOrBlockTask+0x3c>
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d806      	bhi.n	8005a24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a16:	f7fe fff5 	bl	8004a04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a1a:	68f9      	ldr	r1, [r7, #12]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff ff85 	bl	800592c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a22:	e024      	b.n	8005a6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a2a:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <prvProcessTimerOrBlockTask+0x90>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <prvProcessTimerOrBlockTask+0x50>
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <prvProcessTimerOrBlockTask+0x52>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a3c:	4b0f      	ldr	r3, [pc, #60]	; (8005a7c <prvProcessTimerOrBlockTask+0x94>)
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	f7fe f99b 	bl	8003d84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a4e:	f7fe ffd9 	bl	8004a04 <xTaskResumeAll>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a58:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <prvProcessTimerOrBlockTask+0x98>)
 8005a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	f3bf 8f6f 	isb	sy
}
 8005a68:	e001      	b.n	8005a6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a6a:	f7fe ffcb 	bl	8004a04 <xTaskResumeAll>
}
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20000c9c 	.word	0x20000c9c
 8005a7c:	20000ca0 	.word	0x20000ca0
 8005a80:	e000ed04 	.word	0xe000ed04

08005a84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <prvGetNextExpireTime+0x44>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <prvGetNextExpireTime+0x16>
 8005a96:	2201      	movs	r2, #1
 8005a98:	e000      	b.n	8005a9c <prvGetNextExpireTime+0x18>
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d105      	bne.n	8005ab4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005aa8:	4b07      	ldr	r3, [pc, #28]	; (8005ac8 <prvGetNextExpireTime+0x44>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	e001      	b.n	8005ab8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	20000c98 	.word	0x20000c98

08005acc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ad4:	f7ff f834 	bl	8004b40 <xTaskGetTickCount>
 8005ad8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ada:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <prvSampleTimeNow+0x3c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d205      	bcs.n	8005af0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ae4:	f000 f936 	bl	8005d54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	e002      	b.n	8005af6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005af6:	4a04      	ldr	r2, [pc, #16]	; (8005b08 <prvSampleTimeNow+0x3c>)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005afc:	68fb      	ldr	r3, [r7, #12]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000ca8 	.word	0x20000ca8

08005b0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d812      	bhi.n	8005b58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	1ad2      	subs	r2, r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d302      	bcc.n	8005b46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b40:	2301      	movs	r3, #1
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e01b      	b.n	8005b7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b46:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <prvInsertTimerInActiveList+0x7c>)
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f7fd fbfc 	bl	800334e <vListInsert>
 8005b56:	e012      	b.n	8005b7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d206      	bcs.n	8005b6e <prvInsertTimerInActiveList+0x62>
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d302      	bcc.n	8005b6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	e007      	b.n	8005b7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <prvInsertTimerInActiveList+0x80>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3304      	adds	r3, #4
 8005b76:	4619      	mov	r1, r3
 8005b78:	4610      	mov	r0, r2
 8005b7a:	f7fd fbe8 	bl	800334e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b7e:	697b      	ldr	r3, [r7, #20]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20000c9c 	.word	0x20000c9c
 8005b8c:	20000c98 	.word	0x20000c98

08005b90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08e      	sub	sp, #56	; 0x38
 8005b94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b96:	e0ca      	b.n	8005d2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	da18      	bge.n	8005bd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b9e:	1d3b      	adds	r3, r7, #4
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10a      	bne.n	8005bc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	61fb      	str	r3, [r7, #28]
}
 8005bbc:	bf00      	nop
 8005bbe:	e7fe      	b.n	8005bbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bc6:	6850      	ldr	r0, [r2, #4]
 8005bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bca:	6892      	ldr	r2, [r2, #8]
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f2c0 80aa 	blt.w	8005d2c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d004      	beq.n	8005bee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	3304      	adds	r3, #4
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fd fbe9 	bl	80033c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bee:	463b      	mov	r3, r7
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff ff6b 	bl	8005acc <prvSampleTimeNow>
 8005bf6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b09      	cmp	r3, #9
 8005bfc:	f200 8097 	bhi.w	8005d2e <prvProcessReceivedCommands+0x19e>
 8005c00:	a201      	add	r2, pc, #4	; (adr r2, 8005c08 <prvProcessReceivedCommands+0x78>)
 8005c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c06:	bf00      	nop
 8005c08:	08005c31 	.word	0x08005c31
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c31 	.word	0x08005c31
 8005c14:	08005ca5 	.word	0x08005ca5
 8005c18:	08005cb9 	.word	0x08005cb9
 8005c1c:	08005d03 	.word	0x08005d03
 8005c20:	08005c31 	.word	0x08005c31
 8005c24:	08005c31 	.word	0x08005c31
 8005c28:	08005ca5 	.word	0x08005ca5
 8005c2c:	08005cb9 	.word	0x08005cb9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c36:	f043 0301 	orr.w	r3, r3, #1
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	18d1      	adds	r1, r2, r3
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c50:	f7ff ff5c 	bl	8005b0c <prvInsertTimerInActiveList>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d069      	beq.n	8005d2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d05e      	beq.n	8005d2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	441a      	add	r2, r3
 8005c78:	2300      	movs	r3, #0
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	2100      	movs	r1, #0
 8005c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c82:	f7ff fe05 	bl	8005890 <xTimerGenericCommand>
 8005c86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d14f      	bne.n	8005d2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	61bb      	str	r3, [r7, #24]
}
 8005ca0:	bf00      	nop
 8005ca2:	e7fe      	b.n	8005ca2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005caa:	f023 0301 	bic.w	r3, r3, #1
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005cb6:	e03a      	b.n	8005d2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cbe:	f043 0301 	orr.w	r3, r3, #1
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	617b      	str	r3, [r7, #20]
}
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	699a      	ldr	r2, [r3, #24]
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	18d1      	adds	r1, r2, r3
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cfc:	f7ff ff06 	bl	8005b0c <prvInsertTimerInActiveList>
					break;
 8005d00:	e015      	b.n	8005d2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d103      	bne.n	8005d18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d12:	f000 fbdd 	bl	80064d0 <vPortFree>
 8005d16:	e00a      	b.n	8005d2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d1e:	f023 0301 	bic.w	r3, r3, #1
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d2a:	e000      	b.n	8005d2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005d2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d2e:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <prvProcessReceivedCommands+0x1c0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	1d39      	adds	r1, r7, #4
 8005d34:	2200      	movs	r2, #0
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fd fe0a 	bl	8003950 <xQueueReceive>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f47f af2a 	bne.w	8005b98 <prvProcessReceivedCommands+0x8>
	}
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop
 8005d48:	3730      	adds	r7, #48	; 0x30
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000ca0 	.word	0x20000ca0

08005d54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d5a:	e048      	b.n	8005dee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d5c:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <prvSwitchTimerLists+0xc0>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d66:	4b2b      	ldr	r3, [pc, #172]	; (8005e14 <prvSwitchTimerLists+0xc0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fd fb23 	bl	80033c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d02e      	beq.n	8005dee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4413      	add	r3, r2
 8005d98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d90e      	bls.n	8005dc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dae:	4b19      	ldr	r3, [pc, #100]	; (8005e14 <prvSwitchTimerLists+0xc0>)
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3304      	adds	r3, #4
 8005db6:	4619      	mov	r1, r3
 8005db8:	4610      	mov	r0, r2
 8005dba:	f7fd fac8 	bl	800334e <vListInsert>
 8005dbe:	e016      	b.n	8005dee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	2100      	movs	r1, #0
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f7ff fd60 	bl	8005890 <xTimerGenericCommand>
 8005dd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	603b      	str	r3, [r7, #0]
}
 8005dea:	bf00      	nop
 8005dec:	e7fe      	b.n	8005dec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dee:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <prvSwitchTimerLists+0xc0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1b1      	bne.n	8005d5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005df8:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <prvSwitchTimerLists+0xc0>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005dfe:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <prvSwitchTimerLists+0xc4>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a04      	ldr	r2, [pc, #16]	; (8005e14 <prvSwitchTimerLists+0xc0>)
 8005e04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e06:	4a04      	ldr	r2, [pc, #16]	; (8005e18 <prvSwitchTimerLists+0xc4>)
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	6013      	str	r3, [r2, #0]
}
 8005e0c:	bf00      	nop
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	20000c98 	.word	0x20000c98
 8005e18:	20000c9c 	.word	0x20000c9c

08005e1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e22:	f000 f967 	bl	80060f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e26:	4b15      	ldr	r3, [pc, #84]	; (8005e7c <prvCheckForValidListAndQueue+0x60>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d120      	bne.n	8005e70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e2e:	4814      	ldr	r0, [pc, #80]	; (8005e80 <prvCheckForValidListAndQueue+0x64>)
 8005e30:	f7fd fa3c 	bl	80032ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e34:	4813      	ldr	r0, [pc, #76]	; (8005e84 <prvCheckForValidListAndQueue+0x68>)
 8005e36:	f7fd fa39 	bl	80032ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e3a:	4b13      	ldr	r3, [pc, #76]	; (8005e88 <prvCheckForValidListAndQueue+0x6c>)
 8005e3c:	4a10      	ldr	r2, [pc, #64]	; (8005e80 <prvCheckForValidListAndQueue+0x64>)
 8005e3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e40:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <prvCheckForValidListAndQueue+0x70>)
 8005e42:	4a10      	ldr	r2, [pc, #64]	; (8005e84 <prvCheckForValidListAndQueue+0x68>)
 8005e44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e46:	2300      	movs	r3, #0
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <prvCheckForValidListAndQueue+0x74>)
 8005e4c:	4a11      	ldr	r2, [pc, #68]	; (8005e94 <prvCheckForValidListAndQueue+0x78>)
 8005e4e:	2110      	movs	r1, #16
 8005e50:	200a      	movs	r0, #10
 8005e52:	f7fd fb47 	bl	80034e4 <xQueueGenericCreateStatic>
 8005e56:	4603      	mov	r3, r0
 8005e58:	4a08      	ldr	r2, [pc, #32]	; (8005e7c <prvCheckForValidListAndQueue+0x60>)
 8005e5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e5c:	4b07      	ldr	r3, [pc, #28]	; (8005e7c <prvCheckForValidListAndQueue+0x60>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e64:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <prvCheckForValidListAndQueue+0x60>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	490b      	ldr	r1, [pc, #44]	; (8005e98 <prvCheckForValidListAndQueue+0x7c>)
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fd ff60 	bl	8003d30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e70:	f000 f970 	bl	8006154 <vPortExitCritical>
}
 8005e74:	bf00      	nop
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000ca0 	.word	0x20000ca0
 8005e80:	20000c70 	.word	0x20000c70
 8005e84:	20000c84 	.word	0x20000c84
 8005e88:	20000c98 	.word	0x20000c98
 8005e8c:	20000c9c 	.word	0x20000c9c
 8005e90:	20000d4c 	.word	0x20000d4c
 8005e94:	20000cac 	.word	0x20000cac
 8005e98:	08007a20 	.word	0x08007a20

08005e9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3b04      	subs	r3, #4
 8005eac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3b04      	subs	r3, #4
 8005eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f023 0201 	bic.w	r2, r3, #1
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3b04      	subs	r3, #4
 8005eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ecc:	4a0c      	ldr	r2, [pc, #48]	; (8005f00 <pxPortInitialiseStack+0x64>)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3b14      	subs	r3, #20
 8005ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3b04      	subs	r3, #4
 8005ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f06f 0202 	mvn.w	r2, #2
 8005eea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3b20      	subs	r3, #32
 8005ef0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	08005f05 	.word	0x08005f05

08005f04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f0e:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <prvTaskExitError+0x54>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f16:	d00a      	beq.n	8005f2e <prvTaskExitError+0x2a>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	60fb      	str	r3, [r7, #12]
}
 8005f2a:	bf00      	nop
 8005f2c:	e7fe      	b.n	8005f2c <prvTaskExitError+0x28>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	60bb      	str	r3, [r7, #8]
}
 8005f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f42:	bf00      	nop
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d0fc      	beq.n	8005f44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f4a:	bf00      	nop
 8005f4c:	bf00      	nop
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	2000000c 	.word	0x2000000c
 8005f5c:	00000000 	.word	0x00000000

08005f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <pxCurrentTCBConst2>)
 8005f62:	6819      	ldr	r1, [r3, #0]
 8005f64:	6808      	ldr	r0, [r1, #0]
 8005f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6a:	f380 8809 	msr	PSP, r0
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f04f 0000 	mov.w	r0, #0
 8005f76:	f380 8811 	msr	BASEPRI, r0
 8005f7a:	4770      	bx	lr
 8005f7c:	f3af 8000 	nop.w

08005f80 <pxCurrentTCBConst2>:
 8005f80:	20000770 	.word	0x20000770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop

08005f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f88:	4808      	ldr	r0, [pc, #32]	; (8005fac <prvPortStartFirstTask+0x24>)
 8005f8a:	6800      	ldr	r0, [r0, #0]
 8005f8c:	6800      	ldr	r0, [r0, #0]
 8005f8e:	f380 8808 	msr	MSP, r0
 8005f92:	f04f 0000 	mov.w	r0, #0
 8005f96:	f380 8814 	msr	CONTROL, r0
 8005f9a:	b662      	cpsie	i
 8005f9c:	b661      	cpsie	f
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	df00      	svc	0
 8005fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005faa:	bf00      	nop
 8005fac:	e000ed08 	.word	0xe000ed08

08005fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005fb6:	4b46      	ldr	r3, [pc, #280]	; (80060d0 <xPortStartScheduler+0x120>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a46      	ldr	r2, [pc, #280]	; (80060d4 <xPortStartScheduler+0x124>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d10a      	bne.n	8005fd6 <xPortStartScheduler+0x26>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	613b      	str	r3, [r7, #16]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fd6:	4b3e      	ldr	r3, [pc, #248]	; (80060d0 <xPortStartScheduler+0x120>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a3f      	ldr	r2, [pc, #252]	; (80060d8 <xPortStartScheduler+0x128>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d10a      	bne.n	8005ff6 <xPortStartScheduler+0x46>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	60fb      	str	r3, [r7, #12]
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ff6:	4b39      	ldr	r3, [pc, #228]	; (80060dc <xPortStartScheduler+0x12c>)
 8005ff8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	22ff      	movs	r2, #255	; 0xff
 8006006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	b2db      	uxtb	r3, r3
 8006014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006018:	b2da      	uxtb	r2, r3
 800601a:	4b31      	ldr	r3, [pc, #196]	; (80060e0 <xPortStartScheduler+0x130>)
 800601c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800601e:	4b31      	ldr	r3, [pc, #196]	; (80060e4 <xPortStartScheduler+0x134>)
 8006020:	2207      	movs	r2, #7
 8006022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006024:	e009      	b.n	800603a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006026:	4b2f      	ldr	r3, [pc, #188]	; (80060e4 <xPortStartScheduler+0x134>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3b01      	subs	r3, #1
 800602c:	4a2d      	ldr	r2, [pc, #180]	; (80060e4 <xPortStartScheduler+0x134>)
 800602e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	b2db      	uxtb	r3, r3
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	b2db      	uxtb	r3, r3
 8006038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800603a:	78fb      	ldrb	r3, [r7, #3]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006042:	2b80      	cmp	r3, #128	; 0x80
 8006044:	d0ef      	beq.n	8006026 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006046:	4b27      	ldr	r3, [pc, #156]	; (80060e4 <xPortStartScheduler+0x134>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f1c3 0307 	rsb	r3, r3, #7
 800604e:	2b04      	cmp	r3, #4
 8006050:	d00a      	beq.n	8006068 <xPortStartScheduler+0xb8>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	60bb      	str	r3, [r7, #8]
}
 8006064:	bf00      	nop
 8006066:	e7fe      	b.n	8006066 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006068:	4b1e      	ldr	r3, [pc, #120]	; (80060e4 <xPortStartScheduler+0x134>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	4a1d      	ldr	r2, [pc, #116]	; (80060e4 <xPortStartScheduler+0x134>)
 8006070:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006072:	4b1c      	ldr	r3, [pc, #112]	; (80060e4 <xPortStartScheduler+0x134>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800607a:	4a1a      	ldr	r2, [pc, #104]	; (80060e4 <xPortStartScheduler+0x134>)
 800607c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	b2da      	uxtb	r2, r3
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006086:	4b18      	ldr	r3, [pc, #96]	; (80060e8 <xPortStartScheduler+0x138>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a17      	ldr	r2, [pc, #92]	; (80060e8 <xPortStartScheduler+0x138>)
 800608c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006092:	4b15      	ldr	r3, [pc, #84]	; (80060e8 <xPortStartScheduler+0x138>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a14      	ldr	r2, [pc, #80]	; (80060e8 <xPortStartScheduler+0x138>)
 8006098:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800609c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800609e:	f000 f8dd 	bl	800625c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060a2:	4b12      	ldr	r3, [pc, #72]	; (80060ec <xPortStartScheduler+0x13c>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060a8:	f000 f8fc 	bl	80062a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060ac:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <xPortStartScheduler+0x140>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a0f      	ldr	r2, [pc, #60]	; (80060f0 <xPortStartScheduler+0x140>)
 80060b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060b8:	f7ff ff66 	bl	8005f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060bc:	f7fe fe0a 	bl	8004cd4 <vTaskSwitchContext>
	prvTaskExitError();
 80060c0:	f7ff ff20 	bl	8005f04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	e000ed00 	.word	0xe000ed00
 80060d4:	410fc271 	.word	0x410fc271
 80060d8:	410fc270 	.word	0x410fc270
 80060dc:	e000e400 	.word	0xe000e400
 80060e0:	20000d9c 	.word	0x20000d9c
 80060e4:	20000da0 	.word	0x20000da0
 80060e8:	e000ed20 	.word	0xe000ed20
 80060ec:	2000000c 	.word	0x2000000c
 80060f0:	e000ef34 	.word	0xe000ef34

080060f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	607b      	str	r3, [r7, #4]
}
 800610c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800610e:	4b0f      	ldr	r3, [pc, #60]	; (800614c <vPortEnterCritical+0x58>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3301      	adds	r3, #1
 8006114:	4a0d      	ldr	r2, [pc, #52]	; (800614c <vPortEnterCritical+0x58>)
 8006116:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006118:	4b0c      	ldr	r3, [pc, #48]	; (800614c <vPortEnterCritical+0x58>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d10f      	bne.n	8006140 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006120:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <vPortEnterCritical+0x5c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <vPortEnterCritical+0x4c>
	__asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	603b      	str	r3, [r7, #0]
}
 800613c:	bf00      	nop
 800613e:	e7fe      	b.n	800613e <vPortEnterCritical+0x4a>
	}
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	2000000c 	.word	0x2000000c
 8006150:	e000ed04 	.word	0xe000ed04

08006154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800615a:	4b12      	ldr	r3, [pc, #72]	; (80061a4 <vPortExitCritical+0x50>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <vPortExitCritical+0x24>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	607b      	str	r3, [r7, #4]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006178:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <vPortExitCritical+0x50>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3b01      	subs	r3, #1
 800617e:	4a09      	ldr	r2, [pc, #36]	; (80061a4 <vPortExitCritical+0x50>)
 8006180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006182:	4b08      	ldr	r3, [pc, #32]	; (80061a4 <vPortExitCritical+0x50>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d105      	bne.n	8006196 <vPortExitCritical+0x42>
 800618a:	2300      	movs	r3, #0
 800618c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	f383 8811 	msr	BASEPRI, r3
}
 8006194:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	2000000c 	.word	0x2000000c
	...

080061b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061b0:	f3ef 8009 	mrs	r0, PSP
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	4b15      	ldr	r3, [pc, #84]	; (8006210 <pxCurrentTCBConst>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	f01e 0f10 	tst.w	lr, #16
 80061c0:	bf08      	it	eq
 80061c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ca:	6010      	str	r0, [r2, #0]
 80061cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80061d4:	f380 8811 	msr	BASEPRI, r0
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f7fe fd78 	bl	8004cd4 <vTaskSwitchContext>
 80061e4:	f04f 0000 	mov.w	r0, #0
 80061e8:	f380 8811 	msr	BASEPRI, r0
 80061ec:	bc09      	pop	{r0, r3}
 80061ee:	6819      	ldr	r1, [r3, #0]
 80061f0:	6808      	ldr	r0, [r1, #0]
 80061f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f6:	f01e 0f10 	tst.w	lr, #16
 80061fa:	bf08      	it	eq
 80061fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006200:	f380 8809 	msr	PSP, r0
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	f3af 8000 	nop.w

08006210 <pxCurrentTCBConst>:
 8006210:	20000770 	.word	0x20000770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop

08006218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	607b      	str	r3, [r7, #4]
}
 8006230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006232:	f7fe fc95 	bl	8004b60 <xTaskIncrementTick>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800623c:	4b06      	ldr	r3, [pc, #24]	; (8006258 <xPortSysTickHandler+0x40>)
 800623e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	2300      	movs	r3, #0
 8006246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	f383 8811 	msr	BASEPRI, r3
}
 800624e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006260:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <vPortSetupTimerInterrupt+0x34>)
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006266:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <vPortSetupTimerInterrupt+0x38>)
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800626c:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <vPortSetupTimerInterrupt+0x3c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a0a      	ldr	r2, [pc, #40]	; (800629c <vPortSetupTimerInterrupt+0x40>)
 8006272:	fba2 2303 	umull	r2, r3, r2, r3
 8006276:	099b      	lsrs	r3, r3, #6
 8006278:	4a09      	ldr	r2, [pc, #36]	; (80062a0 <vPortSetupTimerInterrupt+0x44>)
 800627a:	3b01      	subs	r3, #1
 800627c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800627e:	4b04      	ldr	r3, [pc, #16]	; (8006290 <vPortSetupTimerInterrupt+0x34>)
 8006280:	2207      	movs	r2, #7
 8006282:	601a      	str	r2, [r3, #0]
}
 8006284:	bf00      	nop
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	e000e010 	.word	0xe000e010
 8006294:	e000e018 	.word	0xe000e018
 8006298:	20000000 	.word	0x20000000
 800629c:	10624dd3 	.word	0x10624dd3
 80062a0:	e000e014 	.word	0xe000e014

080062a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062b4 <vPortEnableVFP+0x10>
 80062a8:	6801      	ldr	r1, [r0, #0]
 80062aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062ae:	6001      	str	r1, [r0, #0]
 80062b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062b2:	bf00      	nop
 80062b4:	e000ed88 	.word	0xe000ed88

080062b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062be:	f3ef 8305 	mrs	r3, IPSR
 80062c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b0f      	cmp	r3, #15
 80062c8:	d914      	bls.n	80062f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062ca:	4a17      	ldr	r2, [pc, #92]	; (8006328 <vPortValidateInterruptPriority+0x70>)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062d4:	4b15      	ldr	r3, [pc, #84]	; (800632c <vPortValidateInterruptPriority+0x74>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	7afa      	ldrb	r2, [r7, #11]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d20a      	bcs.n	80062f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	607b      	str	r3, [r7, #4]
}
 80062f0:	bf00      	nop
 80062f2:	e7fe      	b.n	80062f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062f4:	4b0e      	ldr	r3, [pc, #56]	; (8006330 <vPortValidateInterruptPriority+0x78>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062fc:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <vPortValidateInterruptPriority+0x7c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d90a      	bls.n	800631a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	603b      	str	r3, [r7, #0]
}
 8006316:	bf00      	nop
 8006318:	e7fe      	b.n	8006318 <vPortValidateInterruptPriority+0x60>
	}
 800631a:	bf00      	nop
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	e000e3f0 	.word	0xe000e3f0
 800632c:	20000d9c 	.word	0x20000d9c
 8006330:	e000ed0c 	.word	0xe000ed0c
 8006334:	20000da0 	.word	0x20000da0

08006338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08a      	sub	sp, #40	; 0x28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006340:	2300      	movs	r3, #0
 8006342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006344:	f7fe fb50 	bl	80049e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006348:	4b5b      	ldr	r3, [pc, #364]	; (80064b8 <pvPortMalloc+0x180>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006350:	f000 f920 	bl	8006594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006354:	4b59      	ldr	r3, [pc, #356]	; (80064bc <pvPortMalloc+0x184>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4013      	ands	r3, r2
 800635c:	2b00      	cmp	r3, #0
 800635e:	f040 8093 	bne.w	8006488 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01d      	beq.n	80063a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006368:	2208      	movs	r2, #8
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4413      	add	r3, r2
 800636e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	2b00      	cmp	r3, #0
 8006378:	d014      	beq.n	80063a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f023 0307 	bic.w	r3, r3, #7
 8006380:	3308      	adds	r3, #8
 8006382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <pvPortMalloc+0x6c>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	617b      	str	r3, [r7, #20]
}
 80063a0:	bf00      	nop
 80063a2:	e7fe      	b.n	80063a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d06e      	beq.n	8006488 <pvPortMalloc+0x150>
 80063aa:	4b45      	ldr	r3, [pc, #276]	; (80064c0 <pvPortMalloc+0x188>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d869      	bhi.n	8006488 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063b4:	4b43      	ldr	r3, [pc, #268]	; (80064c4 <pvPortMalloc+0x18c>)
 80063b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063b8:	4b42      	ldr	r3, [pc, #264]	; (80064c4 <pvPortMalloc+0x18c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063be:	e004      	b.n	80063ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d903      	bls.n	80063dc <pvPortMalloc+0xa4>
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f1      	bne.n	80063c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063dc:	4b36      	ldr	r3, [pc, #216]	; (80064b8 <pvPortMalloc+0x180>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d050      	beq.n	8006488 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2208      	movs	r2, #8
 80063ec:	4413      	add	r3, r2
 80063ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	1ad2      	subs	r2, r2, r3
 8006400:	2308      	movs	r3, #8
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	429a      	cmp	r2, r3
 8006406:	d91f      	bls.n	8006448 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <pvPortMalloc+0xf8>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	613b      	str	r3, [r7, #16]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006442:	69b8      	ldr	r0, [r7, #24]
 8006444:	f000 f908 	bl	8006658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006448:	4b1d      	ldr	r3, [pc, #116]	; (80064c0 <pvPortMalloc+0x188>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	4a1b      	ldr	r2, [pc, #108]	; (80064c0 <pvPortMalloc+0x188>)
 8006454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006456:	4b1a      	ldr	r3, [pc, #104]	; (80064c0 <pvPortMalloc+0x188>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4b1b      	ldr	r3, [pc, #108]	; (80064c8 <pvPortMalloc+0x190>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d203      	bcs.n	800646a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006462:	4b17      	ldr	r3, [pc, #92]	; (80064c0 <pvPortMalloc+0x188>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a18      	ldr	r2, [pc, #96]	; (80064c8 <pvPortMalloc+0x190>)
 8006468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	4b13      	ldr	r3, [pc, #76]	; (80064bc <pvPortMalloc+0x184>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	431a      	orrs	r2, r3
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800647e:	4b13      	ldr	r3, [pc, #76]	; (80064cc <pvPortMalloc+0x194>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3301      	adds	r3, #1
 8006484:	4a11      	ldr	r2, [pc, #68]	; (80064cc <pvPortMalloc+0x194>)
 8006486:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006488:	f7fe fabc 	bl	8004a04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <pvPortMalloc+0x174>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	60fb      	str	r3, [r7, #12]
}
 80064a8:	bf00      	nop
 80064aa:	e7fe      	b.n	80064aa <pvPortMalloc+0x172>
	return pvReturn;
 80064ac:	69fb      	ldr	r3, [r7, #28]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3728      	adds	r7, #40	; 0x28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	200049ac 	.word	0x200049ac
 80064bc:	200049c0 	.word	0x200049c0
 80064c0:	200049b0 	.word	0x200049b0
 80064c4:	200049a4 	.word	0x200049a4
 80064c8:	200049b4 	.word	0x200049b4
 80064cc:	200049b8 	.word	0x200049b8

080064d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d04d      	beq.n	800657e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064e2:	2308      	movs	r3, #8
 80064e4:	425b      	negs	r3, r3
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4413      	add	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	4b24      	ldr	r3, [pc, #144]	; (8006588 <vPortFree+0xb8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4013      	ands	r3, r2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10a      	bne.n	8006514 <vPortFree+0x44>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	60fb      	str	r3, [r7, #12]
}
 8006510:	bf00      	nop
 8006512:	e7fe      	b.n	8006512 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <vPortFree+0x62>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	60bb      	str	r3, [r7, #8]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	4b14      	ldr	r3, [pc, #80]	; (8006588 <vPortFree+0xb8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4013      	ands	r3, r2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01e      	beq.n	800657e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d11a      	bne.n	800657e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	4b0e      	ldr	r3, [pc, #56]	; (8006588 <vPortFree+0xb8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	43db      	mvns	r3, r3
 8006552:	401a      	ands	r2, r3
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006558:	f7fe fa46 	bl	80049e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	4b0a      	ldr	r3, [pc, #40]	; (800658c <vPortFree+0xbc>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4413      	add	r3, r2
 8006566:	4a09      	ldr	r2, [pc, #36]	; (800658c <vPortFree+0xbc>)
 8006568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800656a:	6938      	ldr	r0, [r7, #16]
 800656c:	f000 f874 	bl	8006658 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006570:	4b07      	ldr	r3, [pc, #28]	; (8006590 <vPortFree+0xc0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	4a06      	ldr	r2, [pc, #24]	; (8006590 <vPortFree+0xc0>)
 8006578:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800657a:	f7fe fa43 	bl	8004a04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800657e:	bf00      	nop
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	200049c0 	.word	0x200049c0
 800658c:	200049b0 	.word	0x200049b0
 8006590:	200049bc 	.word	0x200049bc

08006594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800659a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800659e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065a0:	4b27      	ldr	r3, [pc, #156]	; (8006640 <prvHeapInit+0xac>)
 80065a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00c      	beq.n	80065c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3307      	adds	r3, #7
 80065b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0307 	bic.w	r3, r3, #7
 80065ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	4a1f      	ldr	r2, [pc, #124]	; (8006640 <prvHeapInit+0xac>)
 80065c4:	4413      	add	r3, r2
 80065c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065cc:	4a1d      	ldr	r2, [pc, #116]	; (8006644 <prvHeapInit+0xb0>)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065d2:	4b1c      	ldr	r3, [pc, #112]	; (8006644 <prvHeapInit+0xb0>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	4413      	add	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065e0:	2208      	movs	r2, #8
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 0307 	bic.w	r3, r3, #7
 80065ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4a15      	ldr	r2, [pc, #84]	; (8006648 <prvHeapInit+0xb4>)
 80065f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065f6:	4b14      	ldr	r3, [pc, #80]	; (8006648 <prvHeapInit+0xb4>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2200      	movs	r2, #0
 80065fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065fe:	4b12      	ldr	r3, [pc, #72]	; (8006648 <prvHeapInit+0xb4>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	1ad2      	subs	r2, r2, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006614:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <prvHeapInit+0xb4>)
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	4a0a      	ldr	r2, [pc, #40]	; (800664c <prvHeapInit+0xb8>)
 8006622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	4a09      	ldr	r2, [pc, #36]	; (8006650 <prvHeapInit+0xbc>)
 800662a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800662c:	4b09      	ldr	r3, [pc, #36]	; (8006654 <prvHeapInit+0xc0>)
 800662e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006632:	601a      	str	r2, [r3, #0]
}
 8006634:	bf00      	nop
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	20000da4 	.word	0x20000da4
 8006644:	200049a4 	.word	0x200049a4
 8006648:	200049ac 	.word	0x200049ac
 800664c:	200049b4 	.word	0x200049b4
 8006650:	200049b0 	.word	0x200049b0
 8006654:	200049c0 	.word	0x200049c0

08006658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006660:	4b28      	ldr	r3, [pc, #160]	; (8006704 <prvInsertBlockIntoFreeList+0xac>)
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	e002      	b.n	800666c <prvInsertBlockIntoFreeList+0x14>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	429a      	cmp	r2, r3
 8006674:	d8f7      	bhi.n	8006666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	4413      	add	r3, r2
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	429a      	cmp	r2, r3
 8006686:	d108      	bne.n	800669a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	441a      	add	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	441a      	add	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d118      	bne.n	80066e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b15      	ldr	r3, [pc, #84]	; (8006708 <prvInsertBlockIntoFreeList+0xb0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d00d      	beq.n	80066d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	441a      	add	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	e008      	b.n	80066e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066d6:	4b0c      	ldr	r3, [pc, #48]	; (8006708 <prvInsertBlockIntoFreeList+0xb0>)
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	e003      	b.n	80066e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d002      	beq.n	80066f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	200049a4 	.word	0x200049a4
 8006708:	200049ac 	.word	0x200049ac

0800670c <__errno>:
 800670c:	4b01      	ldr	r3, [pc, #4]	; (8006714 <__errno+0x8>)
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20000010 	.word	0x20000010

08006718 <__libc_init_array>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4d0d      	ldr	r5, [pc, #52]	; (8006750 <__libc_init_array+0x38>)
 800671c:	4c0d      	ldr	r4, [pc, #52]	; (8006754 <__libc_init_array+0x3c>)
 800671e:	1b64      	subs	r4, r4, r5
 8006720:	10a4      	asrs	r4, r4, #2
 8006722:	2600      	movs	r6, #0
 8006724:	42a6      	cmp	r6, r4
 8006726:	d109      	bne.n	800673c <__libc_init_array+0x24>
 8006728:	4d0b      	ldr	r5, [pc, #44]	; (8006758 <__libc_init_array+0x40>)
 800672a:	4c0c      	ldr	r4, [pc, #48]	; (800675c <__libc_init_array+0x44>)
 800672c:	f001 f8ea 	bl	8007904 <_init>
 8006730:	1b64      	subs	r4, r4, r5
 8006732:	10a4      	asrs	r4, r4, #2
 8006734:	2600      	movs	r6, #0
 8006736:	42a6      	cmp	r6, r4
 8006738:	d105      	bne.n	8006746 <__libc_init_array+0x2e>
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006740:	4798      	blx	r3
 8006742:	3601      	adds	r6, #1
 8006744:	e7ee      	b.n	8006724 <__libc_init_array+0xc>
 8006746:	f855 3b04 	ldr.w	r3, [r5], #4
 800674a:	4798      	blx	r3
 800674c:	3601      	adds	r6, #1
 800674e:	e7f2      	b.n	8006736 <__libc_init_array+0x1e>
 8006750:	08007c50 	.word	0x08007c50
 8006754:	08007c50 	.word	0x08007c50
 8006758:	08007c50 	.word	0x08007c50
 800675c:	08007c54 	.word	0x08007c54

08006760 <memcpy>:
 8006760:	440a      	add	r2, r1
 8006762:	4291      	cmp	r1, r2
 8006764:	f100 33ff 	add.w	r3, r0, #4294967295
 8006768:	d100      	bne.n	800676c <memcpy+0xc>
 800676a:	4770      	bx	lr
 800676c:	b510      	push	{r4, lr}
 800676e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006776:	4291      	cmp	r1, r2
 8006778:	d1f9      	bne.n	800676e <memcpy+0xe>
 800677a:	bd10      	pop	{r4, pc}

0800677c <memset>:
 800677c:	4402      	add	r2, r0
 800677e:	4603      	mov	r3, r0
 8006780:	4293      	cmp	r3, r2
 8006782:	d100      	bne.n	8006786 <memset+0xa>
 8006784:	4770      	bx	lr
 8006786:	f803 1b01 	strb.w	r1, [r3], #1
 800678a:	e7f9      	b.n	8006780 <memset+0x4>

0800678c <iprintf>:
 800678c:	b40f      	push	{r0, r1, r2, r3}
 800678e:	4b0a      	ldr	r3, [pc, #40]	; (80067b8 <iprintf+0x2c>)
 8006790:	b513      	push	{r0, r1, r4, lr}
 8006792:	681c      	ldr	r4, [r3, #0]
 8006794:	b124      	cbz	r4, 80067a0 <iprintf+0x14>
 8006796:	69a3      	ldr	r3, [r4, #24]
 8006798:	b913      	cbnz	r3, 80067a0 <iprintf+0x14>
 800679a:	4620      	mov	r0, r4
 800679c:	f000 fb46 	bl	8006e2c <__sinit>
 80067a0:	ab05      	add	r3, sp, #20
 80067a2:	9a04      	ldr	r2, [sp, #16]
 80067a4:	68a1      	ldr	r1, [r4, #8]
 80067a6:	9301      	str	r3, [sp, #4]
 80067a8:	4620      	mov	r0, r4
 80067aa:	f000 fd1f 	bl	80071ec <_vfiprintf_r>
 80067ae:	b002      	add	sp, #8
 80067b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067b4:	b004      	add	sp, #16
 80067b6:	4770      	bx	lr
 80067b8:	20000010 	.word	0x20000010

080067bc <_puts_r>:
 80067bc:	b570      	push	{r4, r5, r6, lr}
 80067be:	460e      	mov	r6, r1
 80067c0:	4605      	mov	r5, r0
 80067c2:	b118      	cbz	r0, 80067cc <_puts_r+0x10>
 80067c4:	6983      	ldr	r3, [r0, #24]
 80067c6:	b90b      	cbnz	r3, 80067cc <_puts_r+0x10>
 80067c8:	f000 fb30 	bl	8006e2c <__sinit>
 80067cc:	69ab      	ldr	r3, [r5, #24]
 80067ce:	68ac      	ldr	r4, [r5, #8]
 80067d0:	b913      	cbnz	r3, 80067d8 <_puts_r+0x1c>
 80067d2:	4628      	mov	r0, r5
 80067d4:	f000 fb2a 	bl	8006e2c <__sinit>
 80067d8:	4b2c      	ldr	r3, [pc, #176]	; (800688c <_puts_r+0xd0>)
 80067da:	429c      	cmp	r4, r3
 80067dc:	d120      	bne.n	8006820 <_puts_r+0x64>
 80067de:	686c      	ldr	r4, [r5, #4]
 80067e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067e2:	07db      	lsls	r3, r3, #31
 80067e4:	d405      	bmi.n	80067f2 <_puts_r+0x36>
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	0598      	lsls	r0, r3, #22
 80067ea:	d402      	bmi.n	80067f2 <_puts_r+0x36>
 80067ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ee:	f000 fbbb 	bl	8006f68 <__retarget_lock_acquire_recursive>
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	0719      	lsls	r1, r3, #28
 80067f6:	d51d      	bpl.n	8006834 <_puts_r+0x78>
 80067f8:	6923      	ldr	r3, [r4, #16]
 80067fa:	b1db      	cbz	r3, 8006834 <_puts_r+0x78>
 80067fc:	3e01      	subs	r6, #1
 80067fe:	68a3      	ldr	r3, [r4, #8]
 8006800:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006804:	3b01      	subs	r3, #1
 8006806:	60a3      	str	r3, [r4, #8]
 8006808:	bb39      	cbnz	r1, 800685a <_puts_r+0x9e>
 800680a:	2b00      	cmp	r3, #0
 800680c:	da38      	bge.n	8006880 <_puts_r+0xc4>
 800680e:	4622      	mov	r2, r4
 8006810:	210a      	movs	r1, #10
 8006812:	4628      	mov	r0, r5
 8006814:	f000 f930 	bl	8006a78 <__swbuf_r>
 8006818:	3001      	adds	r0, #1
 800681a:	d011      	beq.n	8006840 <_puts_r+0x84>
 800681c:	250a      	movs	r5, #10
 800681e:	e011      	b.n	8006844 <_puts_r+0x88>
 8006820:	4b1b      	ldr	r3, [pc, #108]	; (8006890 <_puts_r+0xd4>)
 8006822:	429c      	cmp	r4, r3
 8006824:	d101      	bne.n	800682a <_puts_r+0x6e>
 8006826:	68ac      	ldr	r4, [r5, #8]
 8006828:	e7da      	b.n	80067e0 <_puts_r+0x24>
 800682a:	4b1a      	ldr	r3, [pc, #104]	; (8006894 <_puts_r+0xd8>)
 800682c:	429c      	cmp	r4, r3
 800682e:	bf08      	it	eq
 8006830:	68ec      	ldreq	r4, [r5, #12]
 8006832:	e7d5      	b.n	80067e0 <_puts_r+0x24>
 8006834:	4621      	mov	r1, r4
 8006836:	4628      	mov	r0, r5
 8006838:	f000 f970 	bl	8006b1c <__swsetup_r>
 800683c:	2800      	cmp	r0, #0
 800683e:	d0dd      	beq.n	80067fc <_puts_r+0x40>
 8006840:	f04f 35ff 	mov.w	r5, #4294967295
 8006844:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006846:	07da      	lsls	r2, r3, #31
 8006848:	d405      	bmi.n	8006856 <_puts_r+0x9a>
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	059b      	lsls	r3, r3, #22
 800684e:	d402      	bmi.n	8006856 <_puts_r+0x9a>
 8006850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006852:	f000 fb8a 	bl	8006f6a <__retarget_lock_release_recursive>
 8006856:	4628      	mov	r0, r5
 8006858:	bd70      	pop	{r4, r5, r6, pc}
 800685a:	2b00      	cmp	r3, #0
 800685c:	da04      	bge.n	8006868 <_puts_r+0xac>
 800685e:	69a2      	ldr	r2, [r4, #24]
 8006860:	429a      	cmp	r2, r3
 8006862:	dc06      	bgt.n	8006872 <_puts_r+0xb6>
 8006864:	290a      	cmp	r1, #10
 8006866:	d004      	beq.n	8006872 <_puts_r+0xb6>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	6022      	str	r2, [r4, #0]
 800686e:	7019      	strb	r1, [r3, #0]
 8006870:	e7c5      	b.n	80067fe <_puts_r+0x42>
 8006872:	4622      	mov	r2, r4
 8006874:	4628      	mov	r0, r5
 8006876:	f000 f8ff 	bl	8006a78 <__swbuf_r>
 800687a:	3001      	adds	r0, #1
 800687c:	d1bf      	bne.n	80067fe <_puts_r+0x42>
 800687e:	e7df      	b.n	8006840 <_puts_r+0x84>
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	250a      	movs	r5, #10
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	6022      	str	r2, [r4, #0]
 8006888:	701d      	strb	r5, [r3, #0]
 800688a:	e7db      	b.n	8006844 <_puts_r+0x88>
 800688c:	08007bd4 	.word	0x08007bd4
 8006890:	08007bf4 	.word	0x08007bf4
 8006894:	08007bb4 	.word	0x08007bb4

08006898 <puts>:
 8006898:	4b02      	ldr	r3, [pc, #8]	; (80068a4 <puts+0xc>)
 800689a:	4601      	mov	r1, r0
 800689c:	6818      	ldr	r0, [r3, #0]
 800689e:	f7ff bf8d 	b.w	80067bc <_puts_r>
 80068a2:	bf00      	nop
 80068a4:	20000010 	.word	0x20000010

080068a8 <setvbuf>:
 80068a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068ac:	461d      	mov	r5, r3
 80068ae:	4b5d      	ldr	r3, [pc, #372]	; (8006a24 <setvbuf+0x17c>)
 80068b0:	681f      	ldr	r7, [r3, #0]
 80068b2:	4604      	mov	r4, r0
 80068b4:	460e      	mov	r6, r1
 80068b6:	4690      	mov	r8, r2
 80068b8:	b127      	cbz	r7, 80068c4 <setvbuf+0x1c>
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	b913      	cbnz	r3, 80068c4 <setvbuf+0x1c>
 80068be:	4638      	mov	r0, r7
 80068c0:	f000 fab4 	bl	8006e2c <__sinit>
 80068c4:	4b58      	ldr	r3, [pc, #352]	; (8006a28 <setvbuf+0x180>)
 80068c6:	429c      	cmp	r4, r3
 80068c8:	d167      	bne.n	800699a <setvbuf+0xf2>
 80068ca:	687c      	ldr	r4, [r7, #4]
 80068cc:	f1b8 0f02 	cmp.w	r8, #2
 80068d0:	d006      	beq.n	80068e0 <setvbuf+0x38>
 80068d2:	f1b8 0f01 	cmp.w	r8, #1
 80068d6:	f200 809f 	bhi.w	8006a18 <setvbuf+0x170>
 80068da:	2d00      	cmp	r5, #0
 80068dc:	f2c0 809c 	blt.w	8006a18 <setvbuf+0x170>
 80068e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068e2:	07db      	lsls	r3, r3, #31
 80068e4:	d405      	bmi.n	80068f2 <setvbuf+0x4a>
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	0598      	lsls	r0, r3, #22
 80068ea:	d402      	bmi.n	80068f2 <setvbuf+0x4a>
 80068ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ee:	f000 fb3b 	bl	8006f68 <__retarget_lock_acquire_recursive>
 80068f2:	4621      	mov	r1, r4
 80068f4:	4638      	mov	r0, r7
 80068f6:	f000 fa05 	bl	8006d04 <_fflush_r>
 80068fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068fc:	b141      	cbz	r1, 8006910 <setvbuf+0x68>
 80068fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006902:	4299      	cmp	r1, r3
 8006904:	d002      	beq.n	800690c <setvbuf+0x64>
 8006906:	4638      	mov	r0, r7
 8006908:	f000 fb9c 	bl	8007044 <_free_r>
 800690c:	2300      	movs	r3, #0
 800690e:	6363      	str	r3, [r4, #52]	; 0x34
 8006910:	2300      	movs	r3, #0
 8006912:	61a3      	str	r3, [r4, #24]
 8006914:	6063      	str	r3, [r4, #4]
 8006916:	89a3      	ldrh	r3, [r4, #12]
 8006918:	0619      	lsls	r1, r3, #24
 800691a:	d503      	bpl.n	8006924 <setvbuf+0x7c>
 800691c:	6921      	ldr	r1, [r4, #16]
 800691e:	4638      	mov	r0, r7
 8006920:	f000 fb90 	bl	8007044 <_free_r>
 8006924:	89a3      	ldrh	r3, [r4, #12]
 8006926:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800692a:	f023 0303 	bic.w	r3, r3, #3
 800692e:	f1b8 0f02 	cmp.w	r8, #2
 8006932:	81a3      	strh	r3, [r4, #12]
 8006934:	d06c      	beq.n	8006a10 <setvbuf+0x168>
 8006936:	ab01      	add	r3, sp, #4
 8006938:	466a      	mov	r2, sp
 800693a:	4621      	mov	r1, r4
 800693c:	4638      	mov	r0, r7
 800693e:	f000 fb15 	bl	8006f6c <__swhatbuf_r>
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	4318      	orrs	r0, r3
 8006946:	81a0      	strh	r0, [r4, #12]
 8006948:	2d00      	cmp	r5, #0
 800694a:	d130      	bne.n	80069ae <setvbuf+0x106>
 800694c:	9d00      	ldr	r5, [sp, #0]
 800694e:	4628      	mov	r0, r5
 8006950:	f000 fb70 	bl	8007034 <malloc>
 8006954:	4606      	mov	r6, r0
 8006956:	2800      	cmp	r0, #0
 8006958:	d155      	bne.n	8006a06 <setvbuf+0x15e>
 800695a:	f8dd 9000 	ldr.w	r9, [sp]
 800695e:	45a9      	cmp	r9, r5
 8006960:	d14a      	bne.n	80069f8 <setvbuf+0x150>
 8006962:	f04f 35ff 	mov.w	r5, #4294967295
 8006966:	2200      	movs	r2, #0
 8006968:	60a2      	str	r2, [r4, #8]
 800696a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800696e:	6022      	str	r2, [r4, #0]
 8006970:	6122      	str	r2, [r4, #16]
 8006972:	2201      	movs	r2, #1
 8006974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006978:	6162      	str	r2, [r4, #20]
 800697a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800697c:	f043 0302 	orr.w	r3, r3, #2
 8006980:	07d2      	lsls	r2, r2, #31
 8006982:	81a3      	strh	r3, [r4, #12]
 8006984:	d405      	bmi.n	8006992 <setvbuf+0xea>
 8006986:	f413 7f00 	tst.w	r3, #512	; 0x200
 800698a:	d102      	bne.n	8006992 <setvbuf+0xea>
 800698c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800698e:	f000 faec 	bl	8006f6a <__retarget_lock_release_recursive>
 8006992:	4628      	mov	r0, r5
 8006994:	b003      	add	sp, #12
 8006996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800699a:	4b24      	ldr	r3, [pc, #144]	; (8006a2c <setvbuf+0x184>)
 800699c:	429c      	cmp	r4, r3
 800699e:	d101      	bne.n	80069a4 <setvbuf+0xfc>
 80069a0:	68bc      	ldr	r4, [r7, #8]
 80069a2:	e793      	b.n	80068cc <setvbuf+0x24>
 80069a4:	4b22      	ldr	r3, [pc, #136]	; (8006a30 <setvbuf+0x188>)
 80069a6:	429c      	cmp	r4, r3
 80069a8:	bf08      	it	eq
 80069aa:	68fc      	ldreq	r4, [r7, #12]
 80069ac:	e78e      	b.n	80068cc <setvbuf+0x24>
 80069ae:	2e00      	cmp	r6, #0
 80069b0:	d0cd      	beq.n	800694e <setvbuf+0xa6>
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	b913      	cbnz	r3, 80069bc <setvbuf+0x114>
 80069b6:	4638      	mov	r0, r7
 80069b8:	f000 fa38 	bl	8006e2c <__sinit>
 80069bc:	f1b8 0f01 	cmp.w	r8, #1
 80069c0:	bf08      	it	eq
 80069c2:	89a3      	ldrheq	r3, [r4, #12]
 80069c4:	6026      	str	r6, [r4, #0]
 80069c6:	bf04      	itt	eq
 80069c8:	f043 0301 	orreq.w	r3, r3, #1
 80069cc:	81a3      	strheq	r3, [r4, #12]
 80069ce:	89a2      	ldrh	r2, [r4, #12]
 80069d0:	f012 0308 	ands.w	r3, r2, #8
 80069d4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80069d8:	d01c      	beq.n	8006a14 <setvbuf+0x16c>
 80069da:	07d3      	lsls	r3, r2, #31
 80069dc:	bf41      	itttt	mi
 80069de:	2300      	movmi	r3, #0
 80069e0:	426d      	negmi	r5, r5
 80069e2:	60a3      	strmi	r3, [r4, #8]
 80069e4:	61a5      	strmi	r5, [r4, #24]
 80069e6:	bf58      	it	pl
 80069e8:	60a5      	strpl	r5, [r4, #8]
 80069ea:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80069ec:	f015 0501 	ands.w	r5, r5, #1
 80069f0:	d115      	bne.n	8006a1e <setvbuf+0x176>
 80069f2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80069f6:	e7c8      	b.n	800698a <setvbuf+0xe2>
 80069f8:	4648      	mov	r0, r9
 80069fa:	f000 fb1b 	bl	8007034 <malloc>
 80069fe:	4606      	mov	r6, r0
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d0ae      	beq.n	8006962 <setvbuf+0xba>
 8006a04:	464d      	mov	r5, r9
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0c:	81a3      	strh	r3, [r4, #12]
 8006a0e:	e7d0      	b.n	80069b2 <setvbuf+0x10a>
 8006a10:	2500      	movs	r5, #0
 8006a12:	e7a8      	b.n	8006966 <setvbuf+0xbe>
 8006a14:	60a3      	str	r3, [r4, #8]
 8006a16:	e7e8      	b.n	80069ea <setvbuf+0x142>
 8006a18:	f04f 35ff 	mov.w	r5, #4294967295
 8006a1c:	e7b9      	b.n	8006992 <setvbuf+0xea>
 8006a1e:	2500      	movs	r5, #0
 8006a20:	e7b7      	b.n	8006992 <setvbuf+0xea>
 8006a22:	bf00      	nop
 8006a24:	20000010 	.word	0x20000010
 8006a28:	08007bd4 	.word	0x08007bd4
 8006a2c:	08007bf4 	.word	0x08007bf4
 8006a30:	08007bb4 	.word	0x08007bb4

08006a34 <strncasecmp>:
 8006a34:	b570      	push	{r4, r5, r6, lr}
 8006a36:	4e0f      	ldr	r6, [pc, #60]	; (8006a74 <strncasecmp+0x40>)
 8006a38:	4604      	mov	r4, r0
 8006a3a:	440a      	add	r2, r1
 8006a3c:	428a      	cmp	r2, r1
 8006a3e:	d101      	bne.n	8006a44 <strncasecmp+0x10>
 8006a40:	2000      	movs	r0, #0
 8006a42:	e013      	b.n	8006a6c <strncasecmp+0x38>
 8006a44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a48:	5d98      	ldrb	r0, [r3, r6]
 8006a4a:	f000 0003 	and.w	r0, r0, #3
 8006a4e:	2801      	cmp	r0, #1
 8006a50:	f811 0b01 	ldrb.w	r0, [r1], #1
 8006a54:	5c35      	ldrb	r5, [r6, r0]
 8006a56:	f005 0503 	and.w	r5, r5, #3
 8006a5a:	bf08      	it	eq
 8006a5c:	3320      	addeq	r3, #32
 8006a5e:	2d01      	cmp	r5, #1
 8006a60:	bf08      	it	eq
 8006a62:	3020      	addeq	r0, #32
 8006a64:	1a1b      	subs	r3, r3, r0
 8006a66:	d102      	bne.n	8006a6e <strncasecmp+0x3a>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d1e7      	bne.n	8006a3c <strncasecmp+0x8>
 8006a6c:	bd70      	pop	{r4, r5, r6, pc}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	e7fc      	b.n	8006a6c <strncasecmp+0x38>
 8006a72:	bf00      	nop
 8006a74:	08007ab1 	.word	0x08007ab1

08006a78 <__swbuf_r>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	460e      	mov	r6, r1
 8006a7c:	4614      	mov	r4, r2
 8006a7e:	4605      	mov	r5, r0
 8006a80:	b118      	cbz	r0, 8006a8a <__swbuf_r+0x12>
 8006a82:	6983      	ldr	r3, [r0, #24]
 8006a84:	b90b      	cbnz	r3, 8006a8a <__swbuf_r+0x12>
 8006a86:	f000 f9d1 	bl	8006e2c <__sinit>
 8006a8a:	4b21      	ldr	r3, [pc, #132]	; (8006b10 <__swbuf_r+0x98>)
 8006a8c:	429c      	cmp	r4, r3
 8006a8e:	d12b      	bne.n	8006ae8 <__swbuf_r+0x70>
 8006a90:	686c      	ldr	r4, [r5, #4]
 8006a92:	69a3      	ldr	r3, [r4, #24]
 8006a94:	60a3      	str	r3, [r4, #8]
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	071a      	lsls	r2, r3, #28
 8006a9a:	d52f      	bpl.n	8006afc <__swbuf_r+0x84>
 8006a9c:	6923      	ldr	r3, [r4, #16]
 8006a9e:	b36b      	cbz	r3, 8006afc <__swbuf_r+0x84>
 8006aa0:	6923      	ldr	r3, [r4, #16]
 8006aa2:	6820      	ldr	r0, [r4, #0]
 8006aa4:	1ac0      	subs	r0, r0, r3
 8006aa6:	6963      	ldr	r3, [r4, #20]
 8006aa8:	b2f6      	uxtb	r6, r6
 8006aaa:	4283      	cmp	r3, r0
 8006aac:	4637      	mov	r7, r6
 8006aae:	dc04      	bgt.n	8006aba <__swbuf_r+0x42>
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f000 f926 	bl	8006d04 <_fflush_r>
 8006ab8:	bb30      	cbnz	r0, 8006b08 <__swbuf_r+0x90>
 8006aba:	68a3      	ldr	r3, [r4, #8]
 8006abc:	3b01      	subs	r3, #1
 8006abe:	60a3      	str	r3, [r4, #8]
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	6022      	str	r2, [r4, #0]
 8006ac6:	701e      	strb	r6, [r3, #0]
 8006ac8:	6963      	ldr	r3, [r4, #20]
 8006aca:	3001      	adds	r0, #1
 8006acc:	4283      	cmp	r3, r0
 8006ace:	d004      	beq.n	8006ada <__swbuf_r+0x62>
 8006ad0:	89a3      	ldrh	r3, [r4, #12]
 8006ad2:	07db      	lsls	r3, r3, #31
 8006ad4:	d506      	bpl.n	8006ae4 <__swbuf_r+0x6c>
 8006ad6:	2e0a      	cmp	r6, #10
 8006ad8:	d104      	bne.n	8006ae4 <__swbuf_r+0x6c>
 8006ada:	4621      	mov	r1, r4
 8006adc:	4628      	mov	r0, r5
 8006ade:	f000 f911 	bl	8006d04 <_fflush_r>
 8006ae2:	b988      	cbnz	r0, 8006b08 <__swbuf_r+0x90>
 8006ae4:	4638      	mov	r0, r7
 8006ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ae8:	4b0a      	ldr	r3, [pc, #40]	; (8006b14 <__swbuf_r+0x9c>)
 8006aea:	429c      	cmp	r4, r3
 8006aec:	d101      	bne.n	8006af2 <__swbuf_r+0x7a>
 8006aee:	68ac      	ldr	r4, [r5, #8]
 8006af0:	e7cf      	b.n	8006a92 <__swbuf_r+0x1a>
 8006af2:	4b09      	ldr	r3, [pc, #36]	; (8006b18 <__swbuf_r+0xa0>)
 8006af4:	429c      	cmp	r4, r3
 8006af6:	bf08      	it	eq
 8006af8:	68ec      	ldreq	r4, [r5, #12]
 8006afa:	e7ca      	b.n	8006a92 <__swbuf_r+0x1a>
 8006afc:	4621      	mov	r1, r4
 8006afe:	4628      	mov	r0, r5
 8006b00:	f000 f80c 	bl	8006b1c <__swsetup_r>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d0cb      	beq.n	8006aa0 <__swbuf_r+0x28>
 8006b08:	f04f 37ff 	mov.w	r7, #4294967295
 8006b0c:	e7ea      	b.n	8006ae4 <__swbuf_r+0x6c>
 8006b0e:	bf00      	nop
 8006b10:	08007bd4 	.word	0x08007bd4
 8006b14:	08007bf4 	.word	0x08007bf4
 8006b18:	08007bb4 	.word	0x08007bb4

08006b1c <__swsetup_r>:
 8006b1c:	4b32      	ldr	r3, [pc, #200]	; (8006be8 <__swsetup_r+0xcc>)
 8006b1e:	b570      	push	{r4, r5, r6, lr}
 8006b20:	681d      	ldr	r5, [r3, #0]
 8006b22:	4606      	mov	r6, r0
 8006b24:	460c      	mov	r4, r1
 8006b26:	b125      	cbz	r5, 8006b32 <__swsetup_r+0x16>
 8006b28:	69ab      	ldr	r3, [r5, #24]
 8006b2a:	b913      	cbnz	r3, 8006b32 <__swsetup_r+0x16>
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	f000 f97d 	bl	8006e2c <__sinit>
 8006b32:	4b2e      	ldr	r3, [pc, #184]	; (8006bec <__swsetup_r+0xd0>)
 8006b34:	429c      	cmp	r4, r3
 8006b36:	d10f      	bne.n	8006b58 <__swsetup_r+0x3c>
 8006b38:	686c      	ldr	r4, [r5, #4]
 8006b3a:	89a3      	ldrh	r3, [r4, #12]
 8006b3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b40:	0719      	lsls	r1, r3, #28
 8006b42:	d42c      	bmi.n	8006b9e <__swsetup_r+0x82>
 8006b44:	06dd      	lsls	r5, r3, #27
 8006b46:	d411      	bmi.n	8006b6c <__swsetup_r+0x50>
 8006b48:	2309      	movs	r3, #9
 8006b4a:	6033      	str	r3, [r6, #0]
 8006b4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b50:	81a3      	strh	r3, [r4, #12]
 8006b52:	f04f 30ff 	mov.w	r0, #4294967295
 8006b56:	e03e      	b.n	8006bd6 <__swsetup_r+0xba>
 8006b58:	4b25      	ldr	r3, [pc, #148]	; (8006bf0 <__swsetup_r+0xd4>)
 8006b5a:	429c      	cmp	r4, r3
 8006b5c:	d101      	bne.n	8006b62 <__swsetup_r+0x46>
 8006b5e:	68ac      	ldr	r4, [r5, #8]
 8006b60:	e7eb      	b.n	8006b3a <__swsetup_r+0x1e>
 8006b62:	4b24      	ldr	r3, [pc, #144]	; (8006bf4 <__swsetup_r+0xd8>)
 8006b64:	429c      	cmp	r4, r3
 8006b66:	bf08      	it	eq
 8006b68:	68ec      	ldreq	r4, [r5, #12]
 8006b6a:	e7e6      	b.n	8006b3a <__swsetup_r+0x1e>
 8006b6c:	0758      	lsls	r0, r3, #29
 8006b6e:	d512      	bpl.n	8006b96 <__swsetup_r+0x7a>
 8006b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b72:	b141      	cbz	r1, 8006b86 <__swsetup_r+0x6a>
 8006b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b78:	4299      	cmp	r1, r3
 8006b7a:	d002      	beq.n	8006b82 <__swsetup_r+0x66>
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	f000 fa61 	bl	8007044 <_free_r>
 8006b82:	2300      	movs	r3, #0
 8006b84:	6363      	str	r3, [r4, #52]	; 0x34
 8006b86:	89a3      	ldrh	r3, [r4, #12]
 8006b88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b8c:	81a3      	strh	r3, [r4, #12]
 8006b8e:	2300      	movs	r3, #0
 8006b90:	6063      	str	r3, [r4, #4]
 8006b92:	6923      	ldr	r3, [r4, #16]
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	f043 0308 	orr.w	r3, r3, #8
 8006b9c:	81a3      	strh	r3, [r4, #12]
 8006b9e:	6923      	ldr	r3, [r4, #16]
 8006ba0:	b94b      	cbnz	r3, 8006bb6 <__swsetup_r+0x9a>
 8006ba2:	89a3      	ldrh	r3, [r4, #12]
 8006ba4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bac:	d003      	beq.n	8006bb6 <__swsetup_r+0x9a>
 8006bae:	4621      	mov	r1, r4
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	f000 f9ff 	bl	8006fb4 <__smakebuf_r>
 8006bb6:	89a0      	ldrh	r0, [r4, #12]
 8006bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bbc:	f010 0301 	ands.w	r3, r0, #1
 8006bc0:	d00a      	beq.n	8006bd8 <__swsetup_r+0xbc>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60a3      	str	r3, [r4, #8]
 8006bc6:	6963      	ldr	r3, [r4, #20]
 8006bc8:	425b      	negs	r3, r3
 8006bca:	61a3      	str	r3, [r4, #24]
 8006bcc:	6923      	ldr	r3, [r4, #16]
 8006bce:	b943      	cbnz	r3, 8006be2 <__swsetup_r+0xc6>
 8006bd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006bd4:	d1ba      	bne.n	8006b4c <__swsetup_r+0x30>
 8006bd6:	bd70      	pop	{r4, r5, r6, pc}
 8006bd8:	0781      	lsls	r1, r0, #30
 8006bda:	bf58      	it	pl
 8006bdc:	6963      	ldrpl	r3, [r4, #20]
 8006bde:	60a3      	str	r3, [r4, #8]
 8006be0:	e7f4      	b.n	8006bcc <__swsetup_r+0xb0>
 8006be2:	2000      	movs	r0, #0
 8006be4:	e7f7      	b.n	8006bd6 <__swsetup_r+0xba>
 8006be6:	bf00      	nop
 8006be8:	20000010 	.word	0x20000010
 8006bec:	08007bd4 	.word	0x08007bd4
 8006bf0:	08007bf4 	.word	0x08007bf4
 8006bf4:	08007bb4 	.word	0x08007bb4

08006bf8 <__sflush_r>:
 8006bf8:	898a      	ldrh	r2, [r1, #12]
 8006bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfe:	4605      	mov	r5, r0
 8006c00:	0710      	lsls	r0, r2, #28
 8006c02:	460c      	mov	r4, r1
 8006c04:	d458      	bmi.n	8006cb8 <__sflush_r+0xc0>
 8006c06:	684b      	ldr	r3, [r1, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	dc05      	bgt.n	8006c18 <__sflush_r+0x20>
 8006c0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	dc02      	bgt.n	8006c18 <__sflush_r+0x20>
 8006c12:	2000      	movs	r0, #0
 8006c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c1a:	2e00      	cmp	r6, #0
 8006c1c:	d0f9      	beq.n	8006c12 <__sflush_r+0x1a>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c24:	682f      	ldr	r7, [r5, #0]
 8006c26:	602b      	str	r3, [r5, #0]
 8006c28:	d032      	beq.n	8006c90 <__sflush_r+0x98>
 8006c2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	075a      	lsls	r2, r3, #29
 8006c30:	d505      	bpl.n	8006c3e <__sflush_r+0x46>
 8006c32:	6863      	ldr	r3, [r4, #4]
 8006c34:	1ac0      	subs	r0, r0, r3
 8006c36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c38:	b10b      	cbz	r3, 8006c3e <__sflush_r+0x46>
 8006c3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c3c:	1ac0      	subs	r0, r0, r3
 8006c3e:	2300      	movs	r3, #0
 8006c40:	4602      	mov	r2, r0
 8006c42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c44:	6a21      	ldr	r1, [r4, #32]
 8006c46:	4628      	mov	r0, r5
 8006c48:	47b0      	blx	r6
 8006c4a:	1c43      	adds	r3, r0, #1
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	d106      	bne.n	8006c5e <__sflush_r+0x66>
 8006c50:	6829      	ldr	r1, [r5, #0]
 8006c52:	291d      	cmp	r1, #29
 8006c54:	d82c      	bhi.n	8006cb0 <__sflush_r+0xb8>
 8006c56:	4a2a      	ldr	r2, [pc, #168]	; (8006d00 <__sflush_r+0x108>)
 8006c58:	40ca      	lsrs	r2, r1
 8006c5a:	07d6      	lsls	r6, r2, #31
 8006c5c:	d528      	bpl.n	8006cb0 <__sflush_r+0xb8>
 8006c5e:	2200      	movs	r2, #0
 8006c60:	6062      	str	r2, [r4, #4]
 8006c62:	04d9      	lsls	r1, r3, #19
 8006c64:	6922      	ldr	r2, [r4, #16]
 8006c66:	6022      	str	r2, [r4, #0]
 8006c68:	d504      	bpl.n	8006c74 <__sflush_r+0x7c>
 8006c6a:	1c42      	adds	r2, r0, #1
 8006c6c:	d101      	bne.n	8006c72 <__sflush_r+0x7a>
 8006c6e:	682b      	ldr	r3, [r5, #0]
 8006c70:	b903      	cbnz	r3, 8006c74 <__sflush_r+0x7c>
 8006c72:	6560      	str	r0, [r4, #84]	; 0x54
 8006c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c76:	602f      	str	r7, [r5, #0]
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	d0ca      	beq.n	8006c12 <__sflush_r+0x1a>
 8006c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c80:	4299      	cmp	r1, r3
 8006c82:	d002      	beq.n	8006c8a <__sflush_r+0x92>
 8006c84:	4628      	mov	r0, r5
 8006c86:	f000 f9dd 	bl	8007044 <_free_r>
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	6360      	str	r0, [r4, #52]	; 0x34
 8006c8e:	e7c1      	b.n	8006c14 <__sflush_r+0x1c>
 8006c90:	6a21      	ldr	r1, [r4, #32]
 8006c92:	2301      	movs	r3, #1
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b0      	blx	r6
 8006c98:	1c41      	adds	r1, r0, #1
 8006c9a:	d1c7      	bne.n	8006c2c <__sflush_r+0x34>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0c4      	beq.n	8006c2c <__sflush_r+0x34>
 8006ca2:	2b1d      	cmp	r3, #29
 8006ca4:	d001      	beq.n	8006caa <__sflush_r+0xb2>
 8006ca6:	2b16      	cmp	r3, #22
 8006ca8:	d101      	bne.n	8006cae <__sflush_r+0xb6>
 8006caa:	602f      	str	r7, [r5, #0]
 8006cac:	e7b1      	b.n	8006c12 <__sflush_r+0x1a>
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb4:	81a3      	strh	r3, [r4, #12]
 8006cb6:	e7ad      	b.n	8006c14 <__sflush_r+0x1c>
 8006cb8:	690f      	ldr	r7, [r1, #16]
 8006cba:	2f00      	cmp	r7, #0
 8006cbc:	d0a9      	beq.n	8006c12 <__sflush_r+0x1a>
 8006cbe:	0793      	lsls	r3, r2, #30
 8006cc0:	680e      	ldr	r6, [r1, #0]
 8006cc2:	bf08      	it	eq
 8006cc4:	694b      	ldreq	r3, [r1, #20]
 8006cc6:	600f      	str	r7, [r1, #0]
 8006cc8:	bf18      	it	ne
 8006cca:	2300      	movne	r3, #0
 8006ccc:	eba6 0807 	sub.w	r8, r6, r7
 8006cd0:	608b      	str	r3, [r1, #8]
 8006cd2:	f1b8 0f00 	cmp.w	r8, #0
 8006cd6:	dd9c      	ble.n	8006c12 <__sflush_r+0x1a>
 8006cd8:	6a21      	ldr	r1, [r4, #32]
 8006cda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006cdc:	4643      	mov	r3, r8
 8006cde:	463a      	mov	r2, r7
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	47b0      	blx	r6
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	dc06      	bgt.n	8006cf6 <__sflush_r+0xfe>
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cee:	81a3      	strh	r3, [r4, #12]
 8006cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf4:	e78e      	b.n	8006c14 <__sflush_r+0x1c>
 8006cf6:	4407      	add	r7, r0
 8006cf8:	eba8 0800 	sub.w	r8, r8, r0
 8006cfc:	e7e9      	b.n	8006cd2 <__sflush_r+0xda>
 8006cfe:	bf00      	nop
 8006d00:	20400001 	.word	0x20400001

08006d04 <_fflush_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	690b      	ldr	r3, [r1, #16]
 8006d08:	4605      	mov	r5, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	b913      	cbnz	r3, 8006d14 <_fflush_r+0x10>
 8006d0e:	2500      	movs	r5, #0
 8006d10:	4628      	mov	r0, r5
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	b118      	cbz	r0, 8006d1e <_fflush_r+0x1a>
 8006d16:	6983      	ldr	r3, [r0, #24]
 8006d18:	b90b      	cbnz	r3, 8006d1e <_fflush_r+0x1a>
 8006d1a:	f000 f887 	bl	8006e2c <__sinit>
 8006d1e:	4b14      	ldr	r3, [pc, #80]	; (8006d70 <_fflush_r+0x6c>)
 8006d20:	429c      	cmp	r4, r3
 8006d22:	d11b      	bne.n	8006d5c <_fflush_r+0x58>
 8006d24:	686c      	ldr	r4, [r5, #4]
 8006d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0ef      	beq.n	8006d0e <_fflush_r+0xa>
 8006d2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d30:	07d0      	lsls	r0, r2, #31
 8006d32:	d404      	bmi.n	8006d3e <_fflush_r+0x3a>
 8006d34:	0599      	lsls	r1, r3, #22
 8006d36:	d402      	bmi.n	8006d3e <_fflush_r+0x3a>
 8006d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d3a:	f000 f915 	bl	8006f68 <__retarget_lock_acquire_recursive>
 8006d3e:	4628      	mov	r0, r5
 8006d40:	4621      	mov	r1, r4
 8006d42:	f7ff ff59 	bl	8006bf8 <__sflush_r>
 8006d46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d48:	07da      	lsls	r2, r3, #31
 8006d4a:	4605      	mov	r5, r0
 8006d4c:	d4e0      	bmi.n	8006d10 <_fflush_r+0xc>
 8006d4e:	89a3      	ldrh	r3, [r4, #12]
 8006d50:	059b      	lsls	r3, r3, #22
 8006d52:	d4dd      	bmi.n	8006d10 <_fflush_r+0xc>
 8006d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d56:	f000 f908 	bl	8006f6a <__retarget_lock_release_recursive>
 8006d5a:	e7d9      	b.n	8006d10 <_fflush_r+0xc>
 8006d5c:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <_fflush_r+0x70>)
 8006d5e:	429c      	cmp	r4, r3
 8006d60:	d101      	bne.n	8006d66 <_fflush_r+0x62>
 8006d62:	68ac      	ldr	r4, [r5, #8]
 8006d64:	e7df      	b.n	8006d26 <_fflush_r+0x22>
 8006d66:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <_fflush_r+0x74>)
 8006d68:	429c      	cmp	r4, r3
 8006d6a:	bf08      	it	eq
 8006d6c:	68ec      	ldreq	r4, [r5, #12]
 8006d6e:	e7da      	b.n	8006d26 <_fflush_r+0x22>
 8006d70:	08007bd4 	.word	0x08007bd4
 8006d74:	08007bf4 	.word	0x08007bf4
 8006d78:	08007bb4 	.word	0x08007bb4

08006d7c <std>:
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	b510      	push	{r4, lr}
 8006d80:	4604      	mov	r4, r0
 8006d82:	e9c0 3300 	strd	r3, r3, [r0]
 8006d86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d8a:	6083      	str	r3, [r0, #8]
 8006d8c:	8181      	strh	r1, [r0, #12]
 8006d8e:	6643      	str	r3, [r0, #100]	; 0x64
 8006d90:	81c2      	strh	r2, [r0, #14]
 8006d92:	6183      	str	r3, [r0, #24]
 8006d94:	4619      	mov	r1, r3
 8006d96:	2208      	movs	r2, #8
 8006d98:	305c      	adds	r0, #92	; 0x5c
 8006d9a:	f7ff fcef 	bl	800677c <memset>
 8006d9e:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <std+0x38>)
 8006da0:	6263      	str	r3, [r4, #36]	; 0x24
 8006da2:	4b05      	ldr	r3, [pc, #20]	; (8006db8 <std+0x3c>)
 8006da4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006da6:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <std+0x40>)
 8006da8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <std+0x44>)
 8006dac:	6224      	str	r4, [r4, #32]
 8006dae:	6323      	str	r3, [r4, #48]	; 0x30
 8006db0:	bd10      	pop	{r4, pc}
 8006db2:	bf00      	nop
 8006db4:	08007795 	.word	0x08007795
 8006db8:	080077b7 	.word	0x080077b7
 8006dbc:	080077ef 	.word	0x080077ef
 8006dc0:	08007813 	.word	0x08007813

08006dc4 <_cleanup_r>:
 8006dc4:	4901      	ldr	r1, [pc, #4]	; (8006dcc <_cleanup_r+0x8>)
 8006dc6:	f000 b8af 	b.w	8006f28 <_fwalk_reent>
 8006dca:	bf00      	nop
 8006dcc:	08006d05 	.word	0x08006d05

08006dd0 <__sfmoreglue>:
 8006dd0:	b570      	push	{r4, r5, r6, lr}
 8006dd2:	1e4a      	subs	r2, r1, #1
 8006dd4:	2568      	movs	r5, #104	; 0x68
 8006dd6:	4355      	muls	r5, r2
 8006dd8:	460e      	mov	r6, r1
 8006dda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006dde:	f000 f981 	bl	80070e4 <_malloc_r>
 8006de2:	4604      	mov	r4, r0
 8006de4:	b140      	cbz	r0, 8006df8 <__sfmoreglue+0x28>
 8006de6:	2100      	movs	r1, #0
 8006de8:	e9c0 1600 	strd	r1, r6, [r0]
 8006dec:	300c      	adds	r0, #12
 8006dee:	60a0      	str	r0, [r4, #8]
 8006df0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006df4:	f7ff fcc2 	bl	800677c <memset>
 8006df8:	4620      	mov	r0, r4
 8006dfa:	bd70      	pop	{r4, r5, r6, pc}

08006dfc <__sfp_lock_acquire>:
 8006dfc:	4801      	ldr	r0, [pc, #4]	; (8006e04 <__sfp_lock_acquire+0x8>)
 8006dfe:	f000 b8b3 	b.w	8006f68 <__retarget_lock_acquire_recursive>
 8006e02:	bf00      	nop
 8006e04:	20004a88 	.word	0x20004a88

08006e08 <__sfp_lock_release>:
 8006e08:	4801      	ldr	r0, [pc, #4]	; (8006e10 <__sfp_lock_release+0x8>)
 8006e0a:	f000 b8ae 	b.w	8006f6a <__retarget_lock_release_recursive>
 8006e0e:	bf00      	nop
 8006e10:	20004a88 	.word	0x20004a88

08006e14 <__sinit_lock_acquire>:
 8006e14:	4801      	ldr	r0, [pc, #4]	; (8006e1c <__sinit_lock_acquire+0x8>)
 8006e16:	f000 b8a7 	b.w	8006f68 <__retarget_lock_acquire_recursive>
 8006e1a:	bf00      	nop
 8006e1c:	20004a83 	.word	0x20004a83

08006e20 <__sinit_lock_release>:
 8006e20:	4801      	ldr	r0, [pc, #4]	; (8006e28 <__sinit_lock_release+0x8>)
 8006e22:	f000 b8a2 	b.w	8006f6a <__retarget_lock_release_recursive>
 8006e26:	bf00      	nop
 8006e28:	20004a83 	.word	0x20004a83

08006e2c <__sinit>:
 8006e2c:	b510      	push	{r4, lr}
 8006e2e:	4604      	mov	r4, r0
 8006e30:	f7ff fff0 	bl	8006e14 <__sinit_lock_acquire>
 8006e34:	69a3      	ldr	r3, [r4, #24]
 8006e36:	b11b      	cbz	r3, 8006e40 <__sinit+0x14>
 8006e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e3c:	f7ff bff0 	b.w	8006e20 <__sinit_lock_release>
 8006e40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e44:	6523      	str	r3, [r4, #80]	; 0x50
 8006e46:	4b13      	ldr	r3, [pc, #76]	; (8006e94 <__sinit+0x68>)
 8006e48:	4a13      	ldr	r2, [pc, #76]	; (8006e98 <__sinit+0x6c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e4e:	42a3      	cmp	r3, r4
 8006e50:	bf04      	itt	eq
 8006e52:	2301      	moveq	r3, #1
 8006e54:	61a3      	streq	r3, [r4, #24]
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 f820 	bl	8006e9c <__sfp>
 8006e5c:	6060      	str	r0, [r4, #4]
 8006e5e:	4620      	mov	r0, r4
 8006e60:	f000 f81c 	bl	8006e9c <__sfp>
 8006e64:	60a0      	str	r0, [r4, #8]
 8006e66:	4620      	mov	r0, r4
 8006e68:	f000 f818 	bl	8006e9c <__sfp>
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	60e0      	str	r0, [r4, #12]
 8006e70:	2104      	movs	r1, #4
 8006e72:	6860      	ldr	r0, [r4, #4]
 8006e74:	f7ff ff82 	bl	8006d7c <std>
 8006e78:	68a0      	ldr	r0, [r4, #8]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	2109      	movs	r1, #9
 8006e7e:	f7ff ff7d 	bl	8006d7c <std>
 8006e82:	68e0      	ldr	r0, [r4, #12]
 8006e84:	2202      	movs	r2, #2
 8006e86:	2112      	movs	r1, #18
 8006e88:	f7ff ff78 	bl	8006d7c <std>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	61a3      	str	r3, [r4, #24]
 8006e90:	e7d2      	b.n	8006e38 <__sinit+0xc>
 8006e92:	bf00      	nop
 8006e94:	08007aac 	.word	0x08007aac
 8006e98:	08006dc5 	.word	0x08006dc5

08006e9c <__sfp>:
 8006e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9e:	4607      	mov	r7, r0
 8006ea0:	f7ff ffac 	bl	8006dfc <__sfp_lock_acquire>
 8006ea4:	4b1e      	ldr	r3, [pc, #120]	; (8006f20 <__sfp+0x84>)
 8006ea6:	681e      	ldr	r6, [r3, #0]
 8006ea8:	69b3      	ldr	r3, [r6, #24]
 8006eaa:	b913      	cbnz	r3, 8006eb2 <__sfp+0x16>
 8006eac:	4630      	mov	r0, r6
 8006eae:	f7ff ffbd 	bl	8006e2c <__sinit>
 8006eb2:	3648      	adds	r6, #72	; 0x48
 8006eb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	d503      	bpl.n	8006ec4 <__sfp+0x28>
 8006ebc:	6833      	ldr	r3, [r6, #0]
 8006ebe:	b30b      	cbz	r3, 8006f04 <__sfp+0x68>
 8006ec0:	6836      	ldr	r6, [r6, #0]
 8006ec2:	e7f7      	b.n	8006eb4 <__sfp+0x18>
 8006ec4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ec8:	b9d5      	cbnz	r5, 8006f00 <__sfp+0x64>
 8006eca:	4b16      	ldr	r3, [pc, #88]	; (8006f24 <__sfp+0x88>)
 8006ecc:	60e3      	str	r3, [r4, #12]
 8006ece:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ed2:	6665      	str	r5, [r4, #100]	; 0x64
 8006ed4:	f000 f847 	bl	8006f66 <__retarget_lock_init_recursive>
 8006ed8:	f7ff ff96 	bl	8006e08 <__sfp_lock_release>
 8006edc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ee0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ee4:	6025      	str	r5, [r4, #0]
 8006ee6:	61a5      	str	r5, [r4, #24]
 8006ee8:	2208      	movs	r2, #8
 8006eea:	4629      	mov	r1, r5
 8006eec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ef0:	f7ff fc44 	bl	800677c <memset>
 8006ef4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ef8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006efc:	4620      	mov	r0, r4
 8006efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f00:	3468      	adds	r4, #104	; 0x68
 8006f02:	e7d9      	b.n	8006eb8 <__sfp+0x1c>
 8006f04:	2104      	movs	r1, #4
 8006f06:	4638      	mov	r0, r7
 8006f08:	f7ff ff62 	bl	8006dd0 <__sfmoreglue>
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	6030      	str	r0, [r6, #0]
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d1d5      	bne.n	8006ec0 <__sfp+0x24>
 8006f14:	f7ff ff78 	bl	8006e08 <__sfp_lock_release>
 8006f18:	230c      	movs	r3, #12
 8006f1a:	603b      	str	r3, [r7, #0]
 8006f1c:	e7ee      	b.n	8006efc <__sfp+0x60>
 8006f1e:	bf00      	nop
 8006f20:	08007aac 	.word	0x08007aac
 8006f24:	ffff0001 	.word	0xffff0001

08006f28 <_fwalk_reent>:
 8006f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f2c:	4606      	mov	r6, r0
 8006f2e:	4688      	mov	r8, r1
 8006f30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f34:	2700      	movs	r7, #0
 8006f36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f3a:	f1b9 0901 	subs.w	r9, r9, #1
 8006f3e:	d505      	bpl.n	8006f4c <_fwalk_reent+0x24>
 8006f40:	6824      	ldr	r4, [r4, #0]
 8006f42:	2c00      	cmp	r4, #0
 8006f44:	d1f7      	bne.n	8006f36 <_fwalk_reent+0xe>
 8006f46:	4638      	mov	r0, r7
 8006f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f4c:	89ab      	ldrh	r3, [r5, #12]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d907      	bls.n	8006f62 <_fwalk_reent+0x3a>
 8006f52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f56:	3301      	adds	r3, #1
 8006f58:	d003      	beq.n	8006f62 <_fwalk_reent+0x3a>
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	47c0      	blx	r8
 8006f60:	4307      	orrs	r7, r0
 8006f62:	3568      	adds	r5, #104	; 0x68
 8006f64:	e7e9      	b.n	8006f3a <_fwalk_reent+0x12>

08006f66 <__retarget_lock_init_recursive>:
 8006f66:	4770      	bx	lr

08006f68 <__retarget_lock_acquire_recursive>:
 8006f68:	4770      	bx	lr

08006f6a <__retarget_lock_release_recursive>:
 8006f6a:	4770      	bx	lr

08006f6c <__swhatbuf_r>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	460e      	mov	r6, r1
 8006f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f74:	2900      	cmp	r1, #0
 8006f76:	b096      	sub	sp, #88	; 0x58
 8006f78:	4614      	mov	r4, r2
 8006f7a:	461d      	mov	r5, r3
 8006f7c:	da07      	bge.n	8006f8e <__swhatbuf_r+0x22>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	602b      	str	r3, [r5, #0]
 8006f82:	89b3      	ldrh	r3, [r6, #12]
 8006f84:	061a      	lsls	r2, r3, #24
 8006f86:	d410      	bmi.n	8006faa <__swhatbuf_r+0x3e>
 8006f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f8c:	e00e      	b.n	8006fac <__swhatbuf_r+0x40>
 8006f8e:	466a      	mov	r2, sp
 8006f90:	f000 fc66 	bl	8007860 <_fstat_r>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	dbf2      	blt.n	8006f7e <__swhatbuf_r+0x12>
 8006f98:	9a01      	ldr	r2, [sp, #4]
 8006f9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006fa2:	425a      	negs	r2, r3
 8006fa4:	415a      	adcs	r2, r3
 8006fa6:	602a      	str	r2, [r5, #0]
 8006fa8:	e7ee      	b.n	8006f88 <__swhatbuf_r+0x1c>
 8006faa:	2340      	movs	r3, #64	; 0x40
 8006fac:	2000      	movs	r0, #0
 8006fae:	6023      	str	r3, [r4, #0]
 8006fb0:	b016      	add	sp, #88	; 0x58
 8006fb2:	bd70      	pop	{r4, r5, r6, pc}

08006fb4 <__smakebuf_r>:
 8006fb4:	898b      	ldrh	r3, [r1, #12]
 8006fb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fb8:	079d      	lsls	r5, r3, #30
 8006fba:	4606      	mov	r6, r0
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	d507      	bpl.n	8006fd0 <__smakebuf_r+0x1c>
 8006fc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	6123      	str	r3, [r4, #16]
 8006fc8:	2301      	movs	r3, #1
 8006fca:	6163      	str	r3, [r4, #20]
 8006fcc:	b002      	add	sp, #8
 8006fce:	bd70      	pop	{r4, r5, r6, pc}
 8006fd0:	ab01      	add	r3, sp, #4
 8006fd2:	466a      	mov	r2, sp
 8006fd4:	f7ff ffca 	bl	8006f6c <__swhatbuf_r>
 8006fd8:	9900      	ldr	r1, [sp, #0]
 8006fda:	4605      	mov	r5, r0
 8006fdc:	4630      	mov	r0, r6
 8006fde:	f000 f881 	bl	80070e4 <_malloc_r>
 8006fe2:	b948      	cbnz	r0, 8006ff8 <__smakebuf_r+0x44>
 8006fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fe8:	059a      	lsls	r2, r3, #22
 8006fea:	d4ef      	bmi.n	8006fcc <__smakebuf_r+0x18>
 8006fec:	f023 0303 	bic.w	r3, r3, #3
 8006ff0:	f043 0302 	orr.w	r3, r3, #2
 8006ff4:	81a3      	strh	r3, [r4, #12]
 8006ff6:	e7e3      	b.n	8006fc0 <__smakebuf_r+0xc>
 8006ff8:	4b0d      	ldr	r3, [pc, #52]	; (8007030 <__smakebuf_r+0x7c>)
 8006ffa:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	6020      	str	r0, [r4, #0]
 8007000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007004:	81a3      	strh	r3, [r4, #12]
 8007006:	9b00      	ldr	r3, [sp, #0]
 8007008:	6163      	str	r3, [r4, #20]
 800700a:	9b01      	ldr	r3, [sp, #4]
 800700c:	6120      	str	r0, [r4, #16]
 800700e:	b15b      	cbz	r3, 8007028 <__smakebuf_r+0x74>
 8007010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007014:	4630      	mov	r0, r6
 8007016:	f000 fc35 	bl	8007884 <_isatty_r>
 800701a:	b128      	cbz	r0, 8007028 <__smakebuf_r+0x74>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	f023 0303 	bic.w	r3, r3, #3
 8007022:	f043 0301 	orr.w	r3, r3, #1
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	89a0      	ldrh	r0, [r4, #12]
 800702a:	4305      	orrs	r5, r0
 800702c:	81a5      	strh	r5, [r4, #12]
 800702e:	e7cd      	b.n	8006fcc <__smakebuf_r+0x18>
 8007030:	08006dc5 	.word	0x08006dc5

08007034 <malloc>:
 8007034:	4b02      	ldr	r3, [pc, #8]	; (8007040 <malloc+0xc>)
 8007036:	4601      	mov	r1, r0
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	f000 b853 	b.w	80070e4 <_malloc_r>
 800703e:	bf00      	nop
 8007040:	20000010 	.word	0x20000010

08007044 <_free_r>:
 8007044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007046:	2900      	cmp	r1, #0
 8007048:	d048      	beq.n	80070dc <_free_r+0x98>
 800704a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800704e:	9001      	str	r0, [sp, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	f1a1 0404 	sub.w	r4, r1, #4
 8007056:	bfb8      	it	lt
 8007058:	18e4      	addlt	r4, r4, r3
 800705a:	f000 fc35 	bl	80078c8 <__malloc_lock>
 800705e:	4a20      	ldr	r2, [pc, #128]	; (80070e0 <_free_r+0x9c>)
 8007060:	9801      	ldr	r0, [sp, #4]
 8007062:	6813      	ldr	r3, [r2, #0]
 8007064:	4615      	mov	r5, r2
 8007066:	b933      	cbnz	r3, 8007076 <_free_r+0x32>
 8007068:	6063      	str	r3, [r4, #4]
 800706a:	6014      	str	r4, [r2, #0]
 800706c:	b003      	add	sp, #12
 800706e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007072:	f000 bc2f 	b.w	80078d4 <__malloc_unlock>
 8007076:	42a3      	cmp	r3, r4
 8007078:	d90b      	bls.n	8007092 <_free_r+0x4e>
 800707a:	6821      	ldr	r1, [r4, #0]
 800707c:	1862      	adds	r2, r4, r1
 800707e:	4293      	cmp	r3, r2
 8007080:	bf04      	itt	eq
 8007082:	681a      	ldreq	r2, [r3, #0]
 8007084:	685b      	ldreq	r3, [r3, #4]
 8007086:	6063      	str	r3, [r4, #4]
 8007088:	bf04      	itt	eq
 800708a:	1852      	addeq	r2, r2, r1
 800708c:	6022      	streq	r2, [r4, #0]
 800708e:	602c      	str	r4, [r5, #0]
 8007090:	e7ec      	b.n	800706c <_free_r+0x28>
 8007092:	461a      	mov	r2, r3
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	b10b      	cbz	r3, 800709c <_free_r+0x58>
 8007098:	42a3      	cmp	r3, r4
 800709a:	d9fa      	bls.n	8007092 <_free_r+0x4e>
 800709c:	6811      	ldr	r1, [r2, #0]
 800709e:	1855      	adds	r5, r2, r1
 80070a0:	42a5      	cmp	r5, r4
 80070a2:	d10b      	bne.n	80070bc <_free_r+0x78>
 80070a4:	6824      	ldr	r4, [r4, #0]
 80070a6:	4421      	add	r1, r4
 80070a8:	1854      	adds	r4, r2, r1
 80070aa:	42a3      	cmp	r3, r4
 80070ac:	6011      	str	r1, [r2, #0]
 80070ae:	d1dd      	bne.n	800706c <_free_r+0x28>
 80070b0:	681c      	ldr	r4, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	6053      	str	r3, [r2, #4]
 80070b6:	4421      	add	r1, r4
 80070b8:	6011      	str	r1, [r2, #0]
 80070ba:	e7d7      	b.n	800706c <_free_r+0x28>
 80070bc:	d902      	bls.n	80070c4 <_free_r+0x80>
 80070be:	230c      	movs	r3, #12
 80070c0:	6003      	str	r3, [r0, #0]
 80070c2:	e7d3      	b.n	800706c <_free_r+0x28>
 80070c4:	6825      	ldr	r5, [r4, #0]
 80070c6:	1961      	adds	r1, r4, r5
 80070c8:	428b      	cmp	r3, r1
 80070ca:	bf04      	itt	eq
 80070cc:	6819      	ldreq	r1, [r3, #0]
 80070ce:	685b      	ldreq	r3, [r3, #4]
 80070d0:	6063      	str	r3, [r4, #4]
 80070d2:	bf04      	itt	eq
 80070d4:	1949      	addeq	r1, r1, r5
 80070d6:	6021      	streq	r1, [r4, #0]
 80070d8:	6054      	str	r4, [r2, #4]
 80070da:	e7c7      	b.n	800706c <_free_r+0x28>
 80070dc:	b003      	add	sp, #12
 80070de:	bd30      	pop	{r4, r5, pc}
 80070e0:	200049c4 	.word	0x200049c4

080070e4 <_malloc_r>:
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e6:	1ccd      	adds	r5, r1, #3
 80070e8:	f025 0503 	bic.w	r5, r5, #3
 80070ec:	3508      	adds	r5, #8
 80070ee:	2d0c      	cmp	r5, #12
 80070f0:	bf38      	it	cc
 80070f2:	250c      	movcc	r5, #12
 80070f4:	2d00      	cmp	r5, #0
 80070f6:	4606      	mov	r6, r0
 80070f8:	db01      	blt.n	80070fe <_malloc_r+0x1a>
 80070fa:	42a9      	cmp	r1, r5
 80070fc:	d903      	bls.n	8007106 <_malloc_r+0x22>
 80070fe:	230c      	movs	r3, #12
 8007100:	6033      	str	r3, [r6, #0]
 8007102:	2000      	movs	r0, #0
 8007104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007106:	f000 fbdf 	bl	80078c8 <__malloc_lock>
 800710a:	4921      	ldr	r1, [pc, #132]	; (8007190 <_malloc_r+0xac>)
 800710c:	680a      	ldr	r2, [r1, #0]
 800710e:	4614      	mov	r4, r2
 8007110:	b99c      	cbnz	r4, 800713a <_malloc_r+0x56>
 8007112:	4f20      	ldr	r7, [pc, #128]	; (8007194 <_malloc_r+0xb0>)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	b923      	cbnz	r3, 8007122 <_malloc_r+0x3e>
 8007118:	4621      	mov	r1, r4
 800711a:	4630      	mov	r0, r6
 800711c:	f000 fb2a 	bl	8007774 <_sbrk_r>
 8007120:	6038      	str	r0, [r7, #0]
 8007122:	4629      	mov	r1, r5
 8007124:	4630      	mov	r0, r6
 8007126:	f000 fb25 	bl	8007774 <_sbrk_r>
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	d123      	bne.n	8007176 <_malloc_r+0x92>
 800712e:	230c      	movs	r3, #12
 8007130:	6033      	str	r3, [r6, #0]
 8007132:	4630      	mov	r0, r6
 8007134:	f000 fbce 	bl	80078d4 <__malloc_unlock>
 8007138:	e7e3      	b.n	8007102 <_malloc_r+0x1e>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	1b5b      	subs	r3, r3, r5
 800713e:	d417      	bmi.n	8007170 <_malloc_r+0x8c>
 8007140:	2b0b      	cmp	r3, #11
 8007142:	d903      	bls.n	800714c <_malloc_r+0x68>
 8007144:	6023      	str	r3, [r4, #0]
 8007146:	441c      	add	r4, r3
 8007148:	6025      	str	r5, [r4, #0]
 800714a:	e004      	b.n	8007156 <_malloc_r+0x72>
 800714c:	6863      	ldr	r3, [r4, #4]
 800714e:	42a2      	cmp	r2, r4
 8007150:	bf0c      	ite	eq
 8007152:	600b      	streq	r3, [r1, #0]
 8007154:	6053      	strne	r3, [r2, #4]
 8007156:	4630      	mov	r0, r6
 8007158:	f000 fbbc 	bl	80078d4 <__malloc_unlock>
 800715c:	f104 000b 	add.w	r0, r4, #11
 8007160:	1d23      	adds	r3, r4, #4
 8007162:	f020 0007 	bic.w	r0, r0, #7
 8007166:	1ac2      	subs	r2, r0, r3
 8007168:	d0cc      	beq.n	8007104 <_malloc_r+0x20>
 800716a:	1a1b      	subs	r3, r3, r0
 800716c:	50a3      	str	r3, [r4, r2]
 800716e:	e7c9      	b.n	8007104 <_malloc_r+0x20>
 8007170:	4622      	mov	r2, r4
 8007172:	6864      	ldr	r4, [r4, #4]
 8007174:	e7cc      	b.n	8007110 <_malloc_r+0x2c>
 8007176:	1cc4      	adds	r4, r0, #3
 8007178:	f024 0403 	bic.w	r4, r4, #3
 800717c:	42a0      	cmp	r0, r4
 800717e:	d0e3      	beq.n	8007148 <_malloc_r+0x64>
 8007180:	1a21      	subs	r1, r4, r0
 8007182:	4630      	mov	r0, r6
 8007184:	f000 faf6 	bl	8007774 <_sbrk_r>
 8007188:	3001      	adds	r0, #1
 800718a:	d1dd      	bne.n	8007148 <_malloc_r+0x64>
 800718c:	e7cf      	b.n	800712e <_malloc_r+0x4a>
 800718e:	bf00      	nop
 8007190:	200049c4 	.word	0x200049c4
 8007194:	200049c8 	.word	0x200049c8

08007198 <__sfputc_r>:
 8007198:	6893      	ldr	r3, [r2, #8]
 800719a:	3b01      	subs	r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	b410      	push	{r4}
 80071a0:	6093      	str	r3, [r2, #8]
 80071a2:	da08      	bge.n	80071b6 <__sfputc_r+0x1e>
 80071a4:	6994      	ldr	r4, [r2, #24]
 80071a6:	42a3      	cmp	r3, r4
 80071a8:	db01      	blt.n	80071ae <__sfputc_r+0x16>
 80071aa:	290a      	cmp	r1, #10
 80071ac:	d103      	bne.n	80071b6 <__sfputc_r+0x1e>
 80071ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071b2:	f7ff bc61 	b.w	8006a78 <__swbuf_r>
 80071b6:	6813      	ldr	r3, [r2, #0]
 80071b8:	1c58      	adds	r0, r3, #1
 80071ba:	6010      	str	r0, [r2, #0]
 80071bc:	7019      	strb	r1, [r3, #0]
 80071be:	4608      	mov	r0, r1
 80071c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <__sfputs_r>:
 80071c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c8:	4606      	mov	r6, r0
 80071ca:	460f      	mov	r7, r1
 80071cc:	4614      	mov	r4, r2
 80071ce:	18d5      	adds	r5, r2, r3
 80071d0:	42ac      	cmp	r4, r5
 80071d2:	d101      	bne.n	80071d8 <__sfputs_r+0x12>
 80071d4:	2000      	movs	r0, #0
 80071d6:	e007      	b.n	80071e8 <__sfputs_r+0x22>
 80071d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071dc:	463a      	mov	r2, r7
 80071de:	4630      	mov	r0, r6
 80071e0:	f7ff ffda 	bl	8007198 <__sfputc_r>
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d1f3      	bne.n	80071d0 <__sfputs_r+0xa>
 80071e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071ec <_vfiprintf_r>:
 80071ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f0:	460d      	mov	r5, r1
 80071f2:	b09d      	sub	sp, #116	; 0x74
 80071f4:	4614      	mov	r4, r2
 80071f6:	4698      	mov	r8, r3
 80071f8:	4606      	mov	r6, r0
 80071fa:	b118      	cbz	r0, 8007204 <_vfiprintf_r+0x18>
 80071fc:	6983      	ldr	r3, [r0, #24]
 80071fe:	b90b      	cbnz	r3, 8007204 <_vfiprintf_r+0x18>
 8007200:	f7ff fe14 	bl	8006e2c <__sinit>
 8007204:	4b89      	ldr	r3, [pc, #548]	; (800742c <_vfiprintf_r+0x240>)
 8007206:	429d      	cmp	r5, r3
 8007208:	d11b      	bne.n	8007242 <_vfiprintf_r+0x56>
 800720a:	6875      	ldr	r5, [r6, #4]
 800720c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800720e:	07d9      	lsls	r1, r3, #31
 8007210:	d405      	bmi.n	800721e <_vfiprintf_r+0x32>
 8007212:	89ab      	ldrh	r3, [r5, #12]
 8007214:	059a      	lsls	r2, r3, #22
 8007216:	d402      	bmi.n	800721e <_vfiprintf_r+0x32>
 8007218:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800721a:	f7ff fea5 	bl	8006f68 <__retarget_lock_acquire_recursive>
 800721e:	89ab      	ldrh	r3, [r5, #12]
 8007220:	071b      	lsls	r3, r3, #28
 8007222:	d501      	bpl.n	8007228 <_vfiprintf_r+0x3c>
 8007224:	692b      	ldr	r3, [r5, #16]
 8007226:	b9eb      	cbnz	r3, 8007264 <_vfiprintf_r+0x78>
 8007228:	4629      	mov	r1, r5
 800722a:	4630      	mov	r0, r6
 800722c:	f7ff fc76 	bl	8006b1c <__swsetup_r>
 8007230:	b1c0      	cbz	r0, 8007264 <_vfiprintf_r+0x78>
 8007232:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007234:	07dc      	lsls	r4, r3, #31
 8007236:	d50e      	bpl.n	8007256 <_vfiprintf_r+0x6a>
 8007238:	f04f 30ff 	mov.w	r0, #4294967295
 800723c:	b01d      	add	sp, #116	; 0x74
 800723e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007242:	4b7b      	ldr	r3, [pc, #492]	; (8007430 <_vfiprintf_r+0x244>)
 8007244:	429d      	cmp	r5, r3
 8007246:	d101      	bne.n	800724c <_vfiprintf_r+0x60>
 8007248:	68b5      	ldr	r5, [r6, #8]
 800724a:	e7df      	b.n	800720c <_vfiprintf_r+0x20>
 800724c:	4b79      	ldr	r3, [pc, #484]	; (8007434 <_vfiprintf_r+0x248>)
 800724e:	429d      	cmp	r5, r3
 8007250:	bf08      	it	eq
 8007252:	68f5      	ldreq	r5, [r6, #12]
 8007254:	e7da      	b.n	800720c <_vfiprintf_r+0x20>
 8007256:	89ab      	ldrh	r3, [r5, #12]
 8007258:	0598      	lsls	r0, r3, #22
 800725a:	d4ed      	bmi.n	8007238 <_vfiprintf_r+0x4c>
 800725c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800725e:	f7ff fe84 	bl	8006f6a <__retarget_lock_release_recursive>
 8007262:	e7e9      	b.n	8007238 <_vfiprintf_r+0x4c>
 8007264:	2300      	movs	r3, #0
 8007266:	9309      	str	r3, [sp, #36]	; 0x24
 8007268:	2320      	movs	r3, #32
 800726a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800726e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007272:	2330      	movs	r3, #48	; 0x30
 8007274:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007438 <_vfiprintf_r+0x24c>
 8007278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800727c:	f04f 0901 	mov.w	r9, #1
 8007280:	4623      	mov	r3, r4
 8007282:	469a      	mov	sl, r3
 8007284:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007288:	b10a      	cbz	r2, 800728e <_vfiprintf_r+0xa2>
 800728a:	2a25      	cmp	r2, #37	; 0x25
 800728c:	d1f9      	bne.n	8007282 <_vfiprintf_r+0x96>
 800728e:	ebba 0b04 	subs.w	fp, sl, r4
 8007292:	d00b      	beq.n	80072ac <_vfiprintf_r+0xc0>
 8007294:	465b      	mov	r3, fp
 8007296:	4622      	mov	r2, r4
 8007298:	4629      	mov	r1, r5
 800729a:	4630      	mov	r0, r6
 800729c:	f7ff ff93 	bl	80071c6 <__sfputs_r>
 80072a0:	3001      	adds	r0, #1
 80072a2:	f000 80aa 	beq.w	80073fa <_vfiprintf_r+0x20e>
 80072a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072a8:	445a      	add	r2, fp
 80072aa:	9209      	str	r2, [sp, #36]	; 0x24
 80072ac:	f89a 3000 	ldrb.w	r3, [sl]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 80a2 	beq.w	80073fa <_vfiprintf_r+0x20e>
 80072b6:	2300      	movs	r3, #0
 80072b8:	f04f 32ff 	mov.w	r2, #4294967295
 80072bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072c0:	f10a 0a01 	add.w	sl, sl, #1
 80072c4:	9304      	str	r3, [sp, #16]
 80072c6:	9307      	str	r3, [sp, #28]
 80072c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072cc:	931a      	str	r3, [sp, #104]	; 0x68
 80072ce:	4654      	mov	r4, sl
 80072d0:	2205      	movs	r2, #5
 80072d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d6:	4858      	ldr	r0, [pc, #352]	; (8007438 <_vfiprintf_r+0x24c>)
 80072d8:	f7f8 ff82 	bl	80001e0 <memchr>
 80072dc:	9a04      	ldr	r2, [sp, #16]
 80072de:	b9d8      	cbnz	r0, 8007318 <_vfiprintf_r+0x12c>
 80072e0:	06d1      	lsls	r1, r2, #27
 80072e2:	bf44      	itt	mi
 80072e4:	2320      	movmi	r3, #32
 80072e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072ea:	0713      	lsls	r3, r2, #28
 80072ec:	bf44      	itt	mi
 80072ee:	232b      	movmi	r3, #43	; 0x2b
 80072f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072f4:	f89a 3000 	ldrb.w	r3, [sl]
 80072f8:	2b2a      	cmp	r3, #42	; 0x2a
 80072fa:	d015      	beq.n	8007328 <_vfiprintf_r+0x13c>
 80072fc:	9a07      	ldr	r2, [sp, #28]
 80072fe:	4654      	mov	r4, sl
 8007300:	2000      	movs	r0, #0
 8007302:	f04f 0c0a 	mov.w	ip, #10
 8007306:	4621      	mov	r1, r4
 8007308:	f811 3b01 	ldrb.w	r3, [r1], #1
 800730c:	3b30      	subs	r3, #48	; 0x30
 800730e:	2b09      	cmp	r3, #9
 8007310:	d94e      	bls.n	80073b0 <_vfiprintf_r+0x1c4>
 8007312:	b1b0      	cbz	r0, 8007342 <_vfiprintf_r+0x156>
 8007314:	9207      	str	r2, [sp, #28]
 8007316:	e014      	b.n	8007342 <_vfiprintf_r+0x156>
 8007318:	eba0 0308 	sub.w	r3, r0, r8
 800731c:	fa09 f303 	lsl.w	r3, r9, r3
 8007320:	4313      	orrs	r3, r2
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	46a2      	mov	sl, r4
 8007326:	e7d2      	b.n	80072ce <_vfiprintf_r+0xe2>
 8007328:	9b03      	ldr	r3, [sp, #12]
 800732a:	1d19      	adds	r1, r3, #4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	9103      	str	r1, [sp, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	bfbb      	ittet	lt
 8007334:	425b      	neglt	r3, r3
 8007336:	f042 0202 	orrlt.w	r2, r2, #2
 800733a:	9307      	strge	r3, [sp, #28]
 800733c:	9307      	strlt	r3, [sp, #28]
 800733e:	bfb8      	it	lt
 8007340:	9204      	strlt	r2, [sp, #16]
 8007342:	7823      	ldrb	r3, [r4, #0]
 8007344:	2b2e      	cmp	r3, #46	; 0x2e
 8007346:	d10c      	bne.n	8007362 <_vfiprintf_r+0x176>
 8007348:	7863      	ldrb	r3, [r4, #1]
 800734a:	2b2a      	cmp	r3, #42	; 0x2a
 800734c:	d135      	bne.n	80073ba <_vfiprintf_r+0x1ce>
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	1d1a      	adds	r2, r3, #4
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	9203      	str	r2, [sp, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	bfb8      	it	lt
 800735a:	f04f 33ff 	movlt.w	r3, #4294967295
 800735e:	3402      	adds	r4, #2
 8007360:	9305      	str	r3, [sp, #20]
 8007362:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007448 <_vfiprintf_r+0x25c>
 8007366:	7821      	ldrb	r1, [r4, #0]
 8007368:	2203      	movs	r2, #3
 800736a:	4650      	mov	r0, sl
 800736c:	f7f8 ff38 	bl	80001e0 <memchr>
 8007370:	b140      	cbz	r0, 8007384 <_vfiprintf_r+0x198>
 8007372:	2340      	movs	r3, #64	; 0x40
 8007374:	eba0 000a 	sub.w	r0, r0, sl
 8007378:	fa03 f000 	lsl.w	r0, r3, r0
 800737c:	9b04      	ldr	r3, [sp, #16]
 800737e:	4303      	orrs	r3, r0
 8007380:	3401      	adds	r4, #1
 8007382:	9304      	str	r3, [sp, #16]
 8007384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007388:	482c      	ldr	r0, [pc, #176]	; (800743c <_vfiprintf_r+0x250>)
 800738a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800738e:	2206      	movs	r2, #6
 8007390:	f7f8 ff26 	bl	80001e0 <memchr>
 8007394:	2800      	cmp	r0, #0
 8007396:	d03f      	beq.n	8007418 <_vfiprintf_r+0x22c>
 8007398:	4b29      	ldr	r3, [pc, #164]	; (8007440 <_vfiprintf_r+0x254>)
 800739a:	bb1b      	cbnz	r3, 80073e4 <_vfiprintf_r+0x1f8>
 800739c:	9b03      	ldr	r3, [sp, #12]
 800739e:	3307      	adds	r3, #7
 80073a0:	f023 0307 	bic.w	r3, r3, #7
 80073a4:	3308      	adds	r3, #8
 80073a6:	9303      	str	r3, [sp, #12]
 80073a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073aa:	443b      	add	r3, r7
 80073ac:	9309      	str	r3, [sp, #36]	; 0x24
 80073ae:	e767      	b.n	8007280 <_vfiprintf_r+0x94>
 80073b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80073b4:	460c      	mov	r4, r1
 80073b6:	2001      	movs	r0, #1
 80073b8:	e7a5      	b.n	8007306 <_vfiprintf_r+0x11a>
 80073ba:	2300      	movs	r3, #0
 80073bc:	3401      	adds	r4, #1
 80073be:	9305      	str	r3, [sp, #20]
 80073c0:	4619      	mov	r1, r3
 80073c2:	f04f 0c0a 	mov.w	ip, #10
 80073c6:	4620      	mov	r0, r4
 80073c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073cc:	3a30      	subs	r2, #48	; 0x30
 80073ce:	2a09      	cmp	r2, #9
 80073d0:	d903      	bls.n	80073da <_vfiprintf_r+0x1ee>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d0c5      	beq.n	8007362 <_vfiprintf_r+0x176>
 80073d6:	9105      	str	r1, [sp, #20]
 80073d8:	e7c3      	b.n	8007362 <_vfiprintf_r+0x176>
 80073da:	fb0c 2101 	mla	r1, ip, r1, r2
 80073de:	4604      	mov	r4, r0
 80073e0:	2301      	movs	r3, #1
 80073e2:	e7f0      	b.n	80073c6 <_vfiprintf_r+0x1da>
 80073e4:	ab03      	add	r3, sp, #12
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	462a      	mov	r2, r5
 80073ea:	4b16      	ldr	r3, [pc, #88]	; (8007444 <_vfiprintf_r+0x258>)
 80073ec:	a904      	add	r1, sp, #16
 80073ee:	4630      	mov	r0, r6
 80073f0:	f3af 8000 	nop.w
 80073f4:	4607      	mov	r7, r0
 80073f6:	1c78      	adds	r0, r7, #1
 80073f8:	d1d6      	bne.n	80073a8 <_vfiprintf_r+0x1bc>
 80073fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073fc:	07d9      	lsls	r1, r3, #31
 80073fe:	d405      	bmi.n	800740c <_vfiprintf_r+0x220>
 8007400:	89ab      	ldrh	r3, [r5, #12]
 8007402:	059a      	lsls	r2, r3, #22
 8007404:	d402      	bmi.n	800740c <_vfiprintf_r+0x220>
 8007406:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007408:	f7ff fdaf 	bl	8006f6a <__retarget_lock_release_recursive>
 800740c:	89ab      	ldrh	r3, [r5, #12]
 800740e:	065b      	lsls	r3, r3, #25
 8007410:	f53f af12 	bmi.w	8007238 <_vfiprintf_r+0x4c>
 8007414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007416:	e711      	b.n	800723c <_vfiprintf_r+0x50>
 8007418:	ab03      	add	r3, sp, #12
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	462a      	mov	r2, r5
 800741e:	4b09      	ldr	r3, [pc, #36]	; (8007444 <_vfiprintf_r+0x258>)
 8007420:	a904      	add	r1, sp, #16
 8007422:	4630      	mov	r0, r6
 8007424:	f000 f880 	bl	8007528 <_printf_i>
 8007428:	e7e4      	b.n	80073f4 <_vfiprintf_r+0x208>
 800742a:	bf00      	nop
 800742c:	08007bd4 	.word	0x08007bd4
 8007430:	08007bf4 	.word	0x08007bf4
 8007434:	08007bb4 	.word	0x08007bb4
 8007438:	08007c14 	.word	0x08007c14
 800743c:	08007c1e 	.word	0x08007c1e
 8007440:	00000000 	.word	0x00000000
 8007444:	080071c7 	.word	0x080071c7
 8007448:	08007c1a 	.word	0x08007c1a

0800744c <_printf_common>:
 800744c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007450:	4616      	mov	r6, r2
 8007452:	4699      	mov	r9, r3
 8007454:	688a      	ldr	r2, [r1, #8]
 8007456:	690b      	ldr	r3, [r1, #16]
 8007458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800745c:	4293      	cmp	r3, r2
 800745e:	bfb8      	it	lt
 8007460:	4613      	movlt	r3, r2
 8007462:	6033      	str	r3, [r6, #0]
 8007464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007468:	4607      	mov	r7, r0
 800746a:	460c      	mov	r4, r1
 800746c:	b10a      	cbz	r2, 8007472 <_printf_common+0x26>
 800746e:	3301      	adds	r3, #1
 8007470:	6033      	str	r3, [r6, #0]
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	0699      	lsls	r1, r3, #26
 8007476:	bf42      	ittt	mi
 8007478:	6833      	ldrmi	r3, [r6, #0]
 800747a:	3302      	addmi	r3, #2
 800747c:	6033      	strmi	r3, [r6, #0]
 800747e:	6825      	ldr	r5, [r4, #0]
 8007480:	f015 0506 	ands.w	r5, r5, #6
 8007484:	d106      	bne.n	8007494 <_printf_common+0x48>
 8007486:	f104 0a19 	add.w	sl, r4, #25
 800748a:	68e3      	ldr	r3, [r4, #12]
 800748c:	6832      	ldr	r2, [r6, #0]
 800748e:	1a9b      	subs	r3, r3, r2
 8007490:	42ab      	cmp	r3, r5
 8007492:	dc26      	bgt.n	80074e2 <_printf_common+0x96>
 8007494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007498:	1e13      	subs	r3, r2, #0
 800749a:	6822      	ldr	r2, [r4, #0]
 800749c:	bf18      	it	ne
 800749e:	2301      	movne	r3, #1
 80074a0:	0692      	lsls	r2, r2, #26
 80074a2:	d42b      	bmi.n	80074fc <_printf_common+0xb0>
 80074a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074a8:	4649      	mov	r1, r9
 80074aa:	4638      	mov	r0, r7
 80074ac:	47c0      	blx	r8
 80074ae:	3001      	adds	r0, #1
 80074b0:	d01e      	beq.n	80074f0 <_printf_common+0xa4>
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	68e5      	ldr	r5, [r4, #12]
 80074b6:	6832      	ldr	r2, [r6, #0]
 80074b8:	f003 0306 	and.w	r3, r3, #6
 80074bc:	2b04      	cmp	r3, #4
 80074be:	bf08      	it	eq
 80074c0:	1aad      	subeq	r5, r5, r2
 80074c2:	68a3      	ldr	r3, [r4, #8]
 80074c4:	6922      	ldr	r2, [r4, #16]
 80074c6:	bf0c      	ite	eq
 80074c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074cc:	2500      	movne	r5, #0
 80074ce:	4293      	cmp	r3, r2
 80074d0:	bfc4      	itt	gt
 80074d2:	1a9b      	subgt	r3, r3, r2
 80074d4:	18ed      	addgt	r5, r5, r3
 80074d6:	2600      	movs	r6, #0
 80074d8:	341a      	adds	r4, #26
 80074da:	42b5      	cmp	r5, r6
 80074dc:	d11a      	bne.n	8007514 <_printf_common+0xc8>
 80074de:	2000      	movs	r0, #0
 80074e0:	e008      	b.n	80074f4 <_printf_common+0xa8>
 80074e2:	2301      	movs	r3, #1
 80074e4:	4652      	mov	r2, sl
 80074e6:	4649      	mov	r1, r9
 80074e8:	4638      	mov	r0, r7
 80074ea:	47c0      	blx	r8
 80074ec:	3001      	adds	r0, #1
 80074ee:	d103      	bne.n	80074f8 <_printf_common+0xac>
 80074f0:	f04f 30ff 	mov.w	r0, #4294967295
 80074f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f8:	3501      	adds	r5, #1
 80074fa:	e7c6      	b.n	800748a <_printf_common+0x3e>
 80074fc:	18e1      	adds	r1, r4, r3
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	2030      	movs	r0, #48	; 0x30
 8007502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007506:	4422      	add	r2, r4
 8007508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800750c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007510:	3302      	adds	r3, #2
 8007512:	e7c7      	b.n	80074a4 <_printf_common+0x58>
 8007514:	2301      	movs	r3, #1
 8007516:	4622      	mov	r2, r4
 8007518:	4649      	mov	r1, r9
 800751a:	4638      	mov	r0, r7
 800751c:	47c0      	blx	r8
 800751e:	3001      	adds	r0, #1
 8007520:	d0e6      	beq.n	80074f0 <_printf_common+0xa4>
 8007522:	3601      	adds	r6, #1
 8007524:	e7d9      	b.n	80074da <_printf_common+0x8e>
	...

08007528 <_printf_i>:
 8007528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800752c:	460c      	mov	r4, r1
 800752e:	4691      	mov	r9, r2
 8007530:	7e27      	ldrb	r7, [r4, #24]
 8007532:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007534:	2f78      	cmp	r7, #120	; 0x78
 8007536:	4680      	mov	r8, r0
 8007538:	469a      	mov	sl, r3
 800753a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800753e:	d807      	bhi.n	8007550 <_printf_i+0x28>
 8007540:	2f62      	cmp	r7, #98	; 0x62
 8007542:	d80a      	bhi.n	800755a <_printf_i+0x32>
 8007544:	2f00      	cmp	r7, #0
 8007546:	f000 80d8 	beq.w	80076fa <_printf_i+0x1d2>
 800754a:	2f58      	cmp	r7, #88	; 0x58
 800754c:	f000 80a3 	beq.w	8007696 <_printf_i+0x16e>
 8007550:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007558:	e03a      	b.n	80075d0 <_printf_i+0xa8>
 800755a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800755e:	2b15      	cmp	r3, #21
 8007560:	d8f6      	bhi.n	8007550 <_printf_i+0x28>
 8007562:	a001      	add	r0, pc, #4	; (adr r0, 8007568 <_printf_i+0x40>)
 8007564:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007568:	080075c1 	.word	0x080075c1
 800756c:	080075d5 	.word	0x080075d5
 8007570:	08007551 	.word	0x08007551
 8007574:	08007551 	.word	0x08007551
 8007578:	08007551 	.word	0x08007551
 800757c:	08007551 	.word	0x08007551
 8007580:	080075d5 	.word	0x080075d5
 8007584:	08007551 	.word	0x08007551
 8007588:	08007551 	.word	0x08007551
 800758c:	08007551 	.word	0x08007551
 8007590:	08007551 	.word	0x08007551
 8007594:	080076e1 	.word	0x080076e1
 8007598:	08007605 	.word	0x08007605
 800759c:	080076c3 	.word	0x080076c3
 80075a0:	08007551 	.word	0x08007551
 80075a4:	08007551 	.word	0x08007551
 80075a8:	08007703 	.word	0x08007703
 80075ac:	08007551 	.word	0x08007551
 80075b0:	08007605 	.word	0x08007605
 80075b4:	08007551 	.word	0x08007551
 80075b8:	08007551 	.word	0x08007551
 80075bc:	080076cb 	.word	0x080076cb
 80075c0:	680b      	ldr	r3, [r1, #0]
 80075c2:	1d1a      	adds	r2, r3, #4
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	600a      	str	r2, [r1, #0]
 80075c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075d0:	2301      	movs	r3, #1
 80075d2:	e0a3      	b.n	800771c <_printf_i+0x1f4>
 80075d4:	6825      	ldr	r5, [r4, #0]
 80075d6:	6808      	ldr	r0, [r1, #0]
 80075d8:	062e      	lsls	r6, r5, #24
 80075da:	f100 0304 	add.w	r3, r0, #4
 80075de:	d50a      	bpl.n	80075f6 <_printf_i+0xce>
 80075e0:	6805      	ldr	r5, [r0, #0]
 80075e2:	600b      	str	r3, [r1, #0]
 80075e4:	2d00      	cmp	r5, #0
 80075e6:	da03      	bge.n	80075f0 <_printf_i+0xc8>
 80075e8:	232d      	movs	r3, #45	; 0x2d
 80075ea:	426d      	negs	r5, r5
 80075ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075f0:	485e      	ldr	r0, [pc, #376]	; (800776c <_printf_i+0x244>)
 80075f2:	230a      	movs	r3, #10
 80075f4:	e019      	b.n	800762a <_printf_i+0x102>
 80075f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80075fa:	6805      	ldr	r5, [r0, #0]
 80075fc:	600b      	str	r3, [r1, #0]
 80075fe:	bf18      	it	ne
 8007600:	b22d      	sxthne	r5, r5
 8007602:	e7ef      	b.n	80075e4 <_printf_i+0xbc>
 8007604:	680b      	ldr	r3, [r1, #0]
 8007606:	6825      	ldr	r5, [r4, #0]
 8007608:	1d18      	adds	r0, r3, #4
 800760a:	6008      	str	r0, [r1, #0]
 800760c:	0628      	lsls	r0, r5, #24
 800760e:	d501      	bpl.n	8007614 <_printf_i+0xec>
 8007610:	681d      	ldr	r5, [r3, #0]
 8007612:	e002      	b.n	800761a <_printf_i+0xf2>
 8007614:	0669      	lsls	r1, r5, #25
 8007616:	d5fb      	bpl.n	8007610 <_printf_i+0xe8>
 8007618:	881d      	ldrh	r5, [r3, #0]
 800761a:	4854      	ldr	r0, [pc, #336]	; (800776c <_printf_i+0x244>)
 800761c:	2f6f      	cmp	r7, #111	; 0x6f
 800761e:	bf0c      	ite	eq
 8007620:	2308      	moveq	r3, #8
 8007622:	230a      	movne	r3, #10
 8007624:	2100      	movs	r1, #0
 8007626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800762a:	6866      	ldr	r6, [r4, #4]
 800762c:	60a6      	str	r6, [r4, #8]
 800762e:	2e00      	cmp	r6, #0
 8007630:	bfa2      	ittt	ge
 8007632:	6821      	ldrge	r1, [r4, #0]
 8007634:	f021 0104 	bicge.w	r1, r1, #4
 8007638:	6021      	strge	r1, [r4, #0]
 800763a:	b90d      	cbnz	r5, 8007640 <_printf_i+0x118>
 800763c:	2e00      	cmp	r6, #0
 800763e:	d04d      	beq.n	80076dc <_printf_i+0x1b4>
 8007640:	4616      	mov	r6, r2
 8007642:	fbb5 f1f3 	udiv	r1, r5, r3
 8007646:	fb03 5711 	mls	r7, r3, r1, r5
 800764a:	5dc7      	ldrb	r7, [r0, r7]
 800764c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007650:	462f      	mov	r7, r5
 8007652:	42bb      	cmp	r3, r7
 8007654:	460d      	mov	r5, r1
 8007656:	d9f4      	bls.n	8007642 <_printf_i+0x11a>
 8007658:	2b08      	cmp	r3, #8
 800765a:	d10b      	bne.n	8007674 <_printf_i+0x14c>
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	07df      	lsls	r7, r3, #31
 8007660:	d508      	bpl.n	8007674 <_printf_i+0x14c>
 8007662:	6923      	ldr	r3, [r4, #16]
 8007664:	6861      	ldr	r1, [r4, #4]
 8007666:	4299      	cmp	r1, r3
 8007668:	bfde      	ittt	le
 800766a:	2330      	movle	r3, #48	; 0x30
 800766c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007670:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007674:	1b92      	subs	r2, r2, r6
 8007676:	6122      	str	r2, [r4, #16]
 8007678:	f8cd a000 	str.w	sl, [sp]
 800767c:	464b      	mov	r3, r9
 800767e:	aa03      	add	r2, sp, #12
 8007680:	4621      	mov	r1, r4
 8007682:	4640      	mov	r0, r8
 8007684:	f7ff fee2 	bl	800744c <_printf_common>
 8007688:	3001      	adds	r0, #1
 800768a:	d14c      	bne.n	8007726 <_printf_i+0x1fe>
 800768c:	f04f 30ff 	mov.w	r0, #4294967295
 8007690:	b004      	add	sp, #16
 8007692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007696:	4835      	ldr	r0, [pc, #212]	; (800776c <_printf_i+0x244>)
 8007698:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	680e      	ldr	r6, [r1, #0]
 80076a0:	061f      	lsls	r7, r3, #24
 80076a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80076a6:	600e      	str	r6, [r1, #0]
 80076a8:	d514      	bpl.n	80076d4 <_printf_i+0x1ac>
 80076aa:	07d9      	lsls	r1, r3, #31
 80076ac:	bf44      	itt	mi
 80076ae:	f043 0320 	orrmi.w	r3, r3, #32
 80076b2:	6023      	strmi	r3, [r4, #0]
 80076b4:	b91d      	cbnz	r5, 80076be <_printf_i+0x196>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	f023 0320 	bic.w	r3, r3, #32
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	2310      	movs	r3, #16
 80076c0:	e7b0      	b.n	8007624 <_printf_i+0xfc>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	f043 0320 	orr.w	r3, r3, #32
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	2378      	movs	r3, #120	; 0x78
 80076cc:	4828      	ldr	r0, [pc, #160]	; (8007770 <_printf_i+0x248>)
 80076ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076d2:	e7e3      	b.n	800769c <_printf_i+0x174>
 80076d4:	065e      	lsls	r6, r3, #25
 80076d6:	bf48      	it	mi
 80076d8:	b2ad      	uxthmi	r5, r5
 80076da:	e7e6      	b.n	80076aa <_printf_i+0x182>
 80076dc:	4616      	mov	r6, r2
 80076de:	e7bb      	b.n	8007658 <_printf_i+0x130>
 80076e0:	680b      	ldr	r3, [r1, #0]
 80076e2:	6826      	ldr	r6, [r4, #0]
 80076e4:	6960      	ldr	r0, [r4, #20]
 80076e6:	1d1d      	adds	r5, r3, #4
 80076e8:	600d      	str	r5, [r1, #0]
 80076ea:	0635      	lsls	r5, r6, #24
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	d501      	bpl.n	80076f4 <_printf_i+0x1cc>
 80076f0:	6018      	str	r0, [r3, #0]
 80076f2:	e002      	b.n	80076fa <_printf_i+0x1d2>
 80076f4:	0671      	lsls	r1, r6, #25
 80076f6:	d5fb      	bpl.n	80076f0 <_printf_i+0x1c8>
 80076f8:	8018      	strh	r0, [r3, #0]
 80076fa:	2300      	movs	r3, #0
 80076fc:	6123      	str	r3, [r4, #16]
 80076fe:	4616      	mov	r6, r2
 8007700:	e7ba      	b.n	8007678 <_printf_i+0x150>
 8007702:	680b      	ldr	r3, [r1, #0]
 8007704:	1d1a      	adds	r2, r3, #4
 8007706:	600a      	str	r2, [r1, #0]
 8007708:	681e      	ldr	r6, [r3, #0]
 800770a:	6862      	ldr	r2, [r4, #4]
 800770c:	2100      	movs	r1, #0
 800770e:	4630      	mov	r0, r6
 8007710:	f7f8 fd66 	bl	80001e0 <memchr>
 8007714:	b108      	cbz	r0, 800771a <_printf_i+0x1f2>
 8007716:	1b80      	subs	r0, r0, r6
 8007718:	6060      	str	r0, [r4, #4]
 800771a:	6863      	ldr	r3, [r4, #4]
 800771c:	6123      	str	r3, [r4, #16]
 800771e:	2300      	movs	r3, #0
 8007720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007724:	e7a8      	b.n	8007678 <_printf_i+0x150>
 8007726:	6923      	ldr	r3, [r4, #16]
 8007728:	4632      	mov	r2, r6
 800772a:	4649      	mov	r1, r9
 800772c:	4640      	mov	r0, r8
 800772e:	47d0      	blx	sl
 8007730:	3001      	adds	r0, #1
 8007732:	d0ab      	beq.n	800768c <_printf_i+0x164>
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	079b      	lsls	r3, r3, #30
 8007738:	d413      	bmi.n	8007762 <_printf_i+0x23a>
 800773a:	68e0      	ldr	r0, [r4, #12]
 800773c:	9b03      	ldr	r3, [sp, #12]
 800773e:	4298      	cmp	r0, r3
 8007740:	bfb8      	it	lt
 8007742:	4618      	movlt	r0, r3
 8007744:	e7a4      	b.n	8007690 <_printf_i+0x168>
 8007746:	2301      	movs	r3, #1
 8007748:	4632      	mov	r2, r6
 800774a:	4649      	mov	r1, r9
 800774c:	4640      	mov	r0, r8
 800774e:	47d0      	blx	sl
 8007750:	3001      	adds	r0, #1
 8007752:	d09b      	beq.n	800768c <_printf_i+0x164>
 8007754:	3501      	adds	r5, #1
 8007756:	68e3      	ldr	r3, [r4, #12]
 8007758:	9903      	ldr	r1, [sp, #12]
 800775a:	1a5b      	subs	r3, r3, r1
 800775c:	42ab      	cmp	r3, r5
 800775e:	dcf2      	bgt.n	8007746 <_printf_i+0x21e>
 8007760:	e7eb      	b.n	800773a <_printf_i+0x212>
 8007762:	2500      	movs	r5, #0
 8007764:	f104 0619 	add.w	r6, r4, #25
 8007768:	e7f5      	b.n	8007756 <_printf_i+0x22e>
 800776a:	bf00      	nop
 800776c:	08007c25 	.word	0x08007c25
 8007770:	08007c36 	.word	0x08007c36

08007774 <_sbrk_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4d06      	ldr	r5, [pc, #24]	; (8007790 <_sbrk_r+0x1c>)
 8007778:	2300      	movs	r3, #0
 800777a:	4604      	mov	r4, r0
 800777c:	4608      	mov	r0, r1
 800777e:	602b      	str	r3, [r5, #0]
 8007780:	f7fa fbb0 	bl	8001ee4 <_sbrk>
 8007784:	1c43      	adds	r3, r0, #1
 8007786:	d102      	bne.n	800778e <_sbrk_r+0x1a>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	b103      	cbz	r3, 800778e <_sbrk_r+0x1a>
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	20004a8c 	.word	0x20004a8c

08007794 <__sread>:
 8007794:	b510      	push	{r4, lr}
 8007796:	460c      	mov	r4, r1
 8007798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800779c:	f000 f8a0 	bl	80078e0 <_read_r>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	bfab      	itete	ge
 80077a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077a6:	89a3      	ldrhlt	r3, [r4, #12]
 80077a8:	181b      	addge	r3, r3, r0
 80077aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077ae:	bfac      	ite	ge
 80077b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80077b2:	81a3      	strhlt	r3, [r4, #12]
 80077b4:	bd10      	pop	{r4, pc}

080077b6 <__swrite>:
 80077b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ba:	461f      	mov	r7, r3
 80077bc:	898b      	ldrh	r3, [r1, #12]
 80077be:	05db      	lsls	r3, r3, #23
 80077c0:	4605      	mov	r5, r0
 80077c2:	460c      	mov	r4, r1
 80077c4:	4616      	mov	r6, r2
 80077c6:	d505      	bpl.n	80077d4 <__swrite+0x1e>
 80077c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077cc:	2302      	movs	r3, #2
 80077ce:	2200      	movs	r2, #0
 80077d0:	f000 f868 	bl	80078a4 <_lseek_r>
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077de:	81a3      	strh	r3, [r4, #12]
 80077e0:	4632      	mov	r2, r6
 80077e2:	463b      	mov	r3, r7
 80077e4:	4628      	mov	r0, r5
 80077e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077ea:	f000 b817 	b.w	800781c <_write_r>

080077ee <__sseek>:
 80077ee:	b510      	push	{r4, lr}
 80077f0:	460c      	mov	r4, r1
 80077f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f6:	f000 f855 	bl	80078a4 <_lseek_r>
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	bf15      	itete	ne
 8007800:	6560      	strne	r0, [r4, #84]	; 0x54
 8007802:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007806:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800780a:	81a3      	strheq	r3, [r4, #12]
 800780c:	bf18      	it	ne
 800780e:	81a3      	strhne	r3, [r4, #12]
 8007810:	bd10      	pop	{r4, pc}

08007812 <__sclose>:
 8007812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007816:	f000 b813 	b.w	8007840 <_close_r>
	...

0800781c <_write_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4d07      	ldr	r5, [pc, #28]	; (800783c <_write_r+0x20>)
 8007820:	4604      	mov	r4, r0
 8007822:	4608      	mov	r0, r1
 8007824:	4611      	mov	r1, r2
 8007826:	2200      	movs	r2, #0
 8007828:	602a      	str	r2, [r5, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	f7fa fa24 	bl	8001c78 <_write>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_write_r+0x1e>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_write_r+0x1e>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	20004a8c 	.word	0x20004a8c

08007840 <_close_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	4d06      	ldr	r5, [pc, #24]	; (800785c <_close_r+0x1c>)
 8007844:	2300      	movs	r3, #0
 8007846:	4604      	mov	r4, r0
 8007848:	4608      	mov	r0, r1
 800784a:	602b      	str	r3, [r5, #0]
 800784c:	f7fa fa3c 	bl	8001cc8 <_close>
 8007850:	1c43      	adds	r3, r0, #1
 8007852:	d102      	bne.n	800785a <_close_r+0x1a>
 8007854:	682b      	ldr	r3, [r5, #0]
 8007856:	b103      	cbz	r3, 800785a <_close_r+0x1a>
 8007858:	6023      	str	r3, [r4, #0]
 800785a:	bd38      	pop	{r3, r4, r5, pc}
 800785c:	20004a8c 	.word	0x20004a8c

08007860 <_fstat_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	4d07      	ldr	r5, [pc, #28]	; (8007880 <_fstat_r+0x20>)
 8007864:	2300      	movs	r3, #0
 8007866:	4604      	mov	r4, r0
 8007868:	4608      	mov	r0, r1
 800786a:	4611      	mov	r1, r2
 800786c:	602b      	str	r3, [r5, #0]
 800786e:	f7fa fa79 	bl	8001d64 <_fstat>
 8007872:	1c43      	adds	r3, r0, #1
 8007874:	d102      	bne.n	800787c <_fstat_r+0x1c>
 8007876:	682b      	ldr	r3, [r5, #0]
 8007878:	b103      	cbz	r3, 800787c <_fstat_r+0x1c>
 800787a:	6023      	str	r3, [r4, #0]
 800787c:	bd38      	pop	{r3, r4, r5, pc}
 800787e:	bf00      	nop
 8007880:	20004a8c 	.word	0x20004a8c

08007884 <_isatty_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	4d06      	ldr	r5, [pc, #24]	; (80078a0 <_isatty_r+0x1c>)
 8007888:	2300      	movs	r3, #0
 800788a:	4604      	mov	r4, r0
 800788c:	4608      	mov	r0, r1
 800788e:	602b      	str	r3, [r5, #0]
 8007890:	f7fa f9dc 	bl	8001c4c <_isatty>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d102      	bne.n	800789e <_isatty_r+0x1a>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	b103      	cbz	r3, 800789e <_isatty_r+0x1a>
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	20004a8c 	.word	0x20004a8c

080078a4 <_lseek_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4d07      	ldr	r5, [pc, #28]	; (80078c4 <_lseek_r+0x20>)
 80078a8:	4604      	mov	r4, r0
 80078aa:	4608      	mov	r0, r1
 80078ac:	4611      	mov	r1, r2
 80078ae:	2200      	movs	r2, #0
 80078b0:	602a      	str	r2, [r5, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	f7fa fa1f 	bl	8001cf6 <_lseek>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d102      	bne.n	80078c2 <_lseek_r+0x1e>
 80078bc:	682b      	ldr	r3, [r5, #0]
 80078be:	b103      	cbz	r3, 80078c2 <_lseek_r+0x1e>
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	20004a8c 	.word	0x20004a8c

080078c8 <__malloc_lock>:
 80078c8:	4801      	ldr	r0, [pc, #4]	; (80078d0 <__malloc_lock+0x8>)
 80078ca:	f7ff bb4d 	b.w	8006f68 <__retarget_lock_acquire_recursive>
 80078ce:	bf00      	nop
 80078d0:	20004a84 	.word	0x20004a84

080078d4 <__malloc_unlock>:
 80078d4:	4801      	ldr	r0, [pc, #4]	; (80078dc <__malloc_unlock+0x8>)
 80078d6:	f7ff bb48 	b.w	8006f6a <__retarget_lock_release_recursive>
 80078da:	bf00      	nop
 80078dc:	20004a84 	.word	0x20004a84

080078e0 <_read_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4d07      	ldr	r5, [pc, #28]	; (8007900 <_read_r+0x20>)
 80078e4:	4604      	mov	r4, r0
 80078e6:	4608      	mov	r0, r1
 80078e8:	4611      	mov	r1, r2
 80078ea:	2200      	movs	r2, #0
 80078ec:	602a      	str	r2, [r5, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	f7fa fa12 	bl	8001d18 <_read>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_read_r+0x1e>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_read_r+0x1e>
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	20004a8c 	.word	0x20004a8c

08007904 <_init>:
 8007904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007906:	bf00      	nop
 8007908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790a:	bc08      	pop	{r3}
 800790c:	469e      	mov	lr, r3
 800790e:	4770      	bx	lr

08007910 <_fini>:
 8007910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007912:	bf00      	nop
 8007914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007916:	bc08      	pop	{r3}
 8007918:	469e      	mov	lr, r3
 800791a:	4770      	bx	lr
